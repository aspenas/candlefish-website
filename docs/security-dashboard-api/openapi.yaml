openapi: 3.0.3
info:
  title: Candlefish Security Dashboard API
  version: 1.0.0
  description: Comprehensive API for Security Dashboard with support for Admin and Guest roles
  contact:
    name: Candlefish Engineering Team
    email: engineering@candlefish.ai

servers:
  - url: https://api.candlefish.ai/v1
    description: Production API Server
  - url: https://staging-api.candlefish.ai/v1
    description: Staging API Server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    jwksAuth:
      type: openIdConnect
      openIdConnectUrl: https://paintbox.fly.dev/.well-known/jwks.json

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        role:
          type: string
          enum: ['admin', 'guest']

    Incident:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        severity:
          type: string
          enum: ['low', 'medium', 'high', 'critical']
        status:
          type: string
          enum: ['open', 'in_progress', 'resolved', 'closed']
        createdAt:
          type: string
          format: date-time
        resolvedAt:
          type: string
          format: date-time

    Alert:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        severity:
          type: string
          enum: ['info', 'warning', 'critical']
        acknowledged:
          type: boolean
        timestamp:
          type: string
          format: date-time

  responses:
    Unauthorized:
      description: Authentication credentials are invalid or missing
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid or expired token"
    Forbidden:
      description: User does not have permission to access the resource
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Insufficient privileges"

paths:
  /auth/login:
    post:
      summary: Authenticate user and generate JWT
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/dashboard/overview:
    get:
      summary: Get security dashboard overview
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard overview data
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalIncidents:
                    type: integer
                  activeAlerts:
                    type: integer
                  complianceScore:
                    type: number
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/incidents:
    get:
      summary: List security incidents
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: ['open', 'in_progress', 'resolved', 'closed']
        - name: severity
          in: query
          schema:
            type: string
            enum: ['low', 'medium', 'high', 'critical']
      responses:
        '200':
          description: List of security incidents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Incident'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      summary: Create a new security incident
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Incident'
      responses:
        '201':
          description: Incident created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Incident'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/alerts:
    get:
      summary: List security alerts
      security:
        - bearerAuth: []
      parameters:
        - name: acknowledged
          in: query
          schema:
            type: boolean
        - name: severity
          in: query
          schema:
            type: string
            enum: ['info', 'warning', 'critical']
      responses:
        '200':
          description: List of security alerts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alert'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'