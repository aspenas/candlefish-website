openapi: 3.0.1
info:
  title: Candlefish AI Secrets Management API
  description: |
    Enterprise-grade secrets management and security configuration API.
    
    ## Authentication
    All API endpoints require JWT authentication with role-based access control.
    
    ## Security Features
    - Multi-factor authentication
    - Secrets rotation
    - Dynamic rate limiting
    - Comprehensive logging
    
    ## Compliance
    - SOC 2 Certified
    - OWASP Top 10 Protection
    - GDPR Compliant
  version: 1.0.0
  contact:
    name: Candlefish Security Team
    email: security@candlefish.ai
    url: https://candlefish.ai/security

servers:
  - url: https://api.candlefish.ai/v1/secrets
    description: Production Secrets Management API
  - url: https://staging-api.candlefish.ai/v1/secrets
    description: Staging Secrets Management API

security:
  - BearerAuth: []

paths:
  /secrets:
    get:
      summary: List accessible secrets
      description: |
        Retrieve a list of secrets that the current user has permission to access.
        Requires ADMIN or SECURITY_MANAGER role.
      tags:
        - Secrets Management
      parameters:
        - name: organization_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: include_metadata
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successfully retrieved secrets list
          content:
            application/json:
              schema:
                type: object
                properties:
                  secrets:
                    type: array
                    items:
                      $ref: '#/components/schemas/SecretMetadata'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      summary: Create a new secret
      description: |
        Create a new secret with advanced encryption and access controls.
        Requires ADMIN or SECURITY_MANAGER role.
      tags:
        - Secrets Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretCreationRequest'
      responses:
        '201':
          description: Secret created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretMetadata'
        '400':
          $ref: '#/components/responses/ValidationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /secrets/{secretId}:
    get:
      summary: Retrieve secret details
      description: |
        Retrieve detailed information about a specific secret.
        Requires ADMIN, SECURITY_MANAGER, or authorized service role.
      tags:
        - Secrets Management
      parameters:
        - name: secretId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved secret details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDetails'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      summary: Update secret metadata
      description: |
        Update metadata for an existing secret.
        Requires ADMIN or SECURITY_MANAGER role.
      tags:
        - Secrets Management
      parameters:
        - name: secretId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretUpdateRequest'
      responses:
        '200':
          description: Secret metadata updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretMetadata'
        '400':
          $ref: '#/components/responses/ValidationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    delete:
      summary: Delete a secret
      description: |
        Permanently delete a secret from the system.
        Requires ADMIN or SECURITY_MANAGER role.
      tags:
        - Secrets Management
      parameters:
        - name: secretId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Secret successfully deleted
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /secrets/rotation:
    post:
      summary: Initiate secret rotation
      description: |
        Manually trigger rotation for a specific secret or all secrets.
        Requires ADMIN or SECURITY_MANAGER role.
      tags:
        - Secrets Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                secretId:
                  type: string
                  format: uuid
                  description: Optional. If not provided, rotates all managed secrets.
      responses:
        '200':
          description: Secret rotation initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  rotatedSecrets:
                    type: array
                    items:
                      type: string
                  timestamp:
                    type: string
                    format: date-time
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /security/configuration:
    get:
      summary: Retrieve current security configuration
      description: |
        Get the current security configuration settings.
        Requires ADMIN or SECURITY_MANAGER role.
      tags:
        - Security Configuration
      responses:
        '200':
          description: Successfully retrieved security configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityConfiguration'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    put:
      summary: Update security configuration
      description: |
        Update security configuration settings.
        Requires ADMIN role.
      tags:
        - Security Configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityConfigurationUpdate'
      responses:
        '200':
          description: Security configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityConfiguration'
        '400':
          $ref: '#/components/responses/ValidationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token issued by Candlefish authentication service.
        Requires specific roles for different operations.

  schemas:
    SecretMetadata:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        last_rotated:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
        organization_id:
          type: string
          format: uuid

    SecretDetails:
      allOf:
        - $ref: '#/components/schemas/SecretMetadata'
        - type: object
          properties:
            version:
              type: integer
            metadata:
              type: object
            access_policy:
              $ref: '#/components/schemas/AccessPolicy'

    SecretCreationRequest:
      type: object
      required:
        - name
        - value
        - organization_id
      properties:
        name:
          type: string
          description: Unique name for the secret
        value:
          type: string
          description: Secret value (will be encrypted)
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        organization_id:
          type: string
          format: uuid
        access_policy:
          $ref: '#/components/schemas/AccessPolicy'

    SecretUpdateRequest:
      type: object
      properties:
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        access_policy:
          $ref: '#/components/schemas/AccessPolicy'

    AccessPolicy:
      type: object
      properties:
        read_roles:
          type: array
          items:
            type: string
            enum: 
              - ADMIN
              - SECURITY_MANAGER
              - SERVICE_ACCOUNT
        write_roles:
          type: array
          items:
            type: string
            enum: 
              - ADMIN
              - SECURITY_MANAGER
        rotation_policy:
          type: object
          properties:
            frequency:
              type: string
              enum: 
                - DAILY
                - WEEKLY
                - MONTHLY
                - QUARTERLY
            last_rotated:
              type: string
              format: date-time

    SecurityConfiguration:
      type: object
      properties:
        rate_limiting:
          type: object
          properties:
            global_requests_per_minute:
              type: integer
            authentication_attempts:
              type: integer
            api_request_limits:
              type: object
              additionalProperties:
                type: integer
        mfa_configuration:
          type: object
          properties:
            required:
              type: boolean
            methods:
              type: array
              items:
                type: string
                enum: 
                  - TOTP
                  - SMS
                  - EMAIL
        cors_configuration:
          type: object
          properties:
            allowed_origins:
              type: array
              items:
                type: string
            allowed_methods:
              type: array
              items:
                type: string
        content_security_policy:
          type: object
          properties:
            directives:
              type: object
              additionalProperties:
                type: array

    SecurityConfigurationUpdate:
      type: object
      properties:
        rate_limiting:
          type: object
        mfa_configuration:
          type: object
        cors_configuration:
          type: object
        content_security_policy:
          type: object

  responses:
    ValidationError:
      description: Validation failed for input data
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                    message:
                      type: string

    ForbiddenError:
      description: User does not have permission to perform this action
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Insufficient permissions"
              details:
                type: string

    NotFoundError:
      description: Requested resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Resource not found"
              details:
                type: string