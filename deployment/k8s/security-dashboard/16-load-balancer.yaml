# AWS Load Balancer Configuration for Security Dashboard
# Advanced load balancing with SSL termination and routing rules
apiVersion: v1
kind: Service
metadata:
  name: security-dashboard-alb
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: load-balancer
  annotations:
    # AWS Load Balancer Controller annotations
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "300"
    service.beta.kubernetes.io/aws-load-balancer-target-type: "ip"
    
    # SSL Configuration
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:681214184463:certificate/CERTIFICATE_ID"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/aws-load-balancer-ssl-negotiation-policy: "ELBSecurityPolicy-TLS-1-2-2017-01"
    
    # Health Check Configuration
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "30"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "traffic-port"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "HTTP"
    
    # Access Logging
    service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "candlefish-security-dashboard-logs"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-prefix: "nlb"
    
    # Additional configurations
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "Environment=production,Application=security-dashboard,Team=security"
    service.beta.kubernetes.io/aws-load-balancer-subnets: "subnet-12345678,subnet-87654321,subnet-13579246"
    service.beta.kubernetes.io/aws-load-balancer-security-groups: "sg-security-dashboard"
spec:
  type: LoadBalancer
  loadBalancerSourceRanges:
  - "10.0.0.0/8"      # Private networks
  - "172.16.0.0/12"   # Private networks
  - "192.168.0.0/16"  # Private networks
  - "0.0.0.0/0"       # Allow public access (configure based on security requirements)
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: https
    port: 443
    targetPort: 8080
    protocol: TCP
  selector:
    app.kubernetes.io/name: security-dashboard-ingress

---
# Application Load Balancer Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: security-dashboard-alb-ingress
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: ingress
  annotations:
    # AWS Load Balancer Controller
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/load-balancer-name: security-dashboard-alb
    
    # SSL Configuration
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:681214184463:certificate/CERTIFICATE_ID
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    
    # Health Check
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '3'
    
    # Load Balancer Attributes
    alb.ingress.kubernetes.io/load-balancer-attributes: |
      idle_timeout.timeout_seconds=300,
      routing.http.drop_invalid_header_fields.enabled=true,
      routing.http.preserve_host_header.enabled=true,
      routing.http.x_amzn_tls_version_and_cipher_suite.enabled=true,
      routing.http.xff_client_port.enabled=true,
      routing.http2.enabled=true,
      waf.fail_open.enabled=false
    
    # Security Groups
    alb.ingress.kubernetes.io/security-groups: sg-security-dashboard-alb
    
    # Subnets (public subnets for internet-facing ALB)
    alb.ingress.kubernetes.io/subnets: subnet-public-1,subnet-public-2,subnet-public-3
    
    # Tags
    alb.ingress.kubernetes.io/tags: Environment=production,Application=security-dashboard,Team=security
    
    # WAF Association
    alb.ingress.kubernetes.io/wafv2-acl-arn: arn:aws:wafv2:us-east-1:681214184463:regional/webacl/SecurityDashboardWAF/12345678-1234-1234-1234-123456789012
    
    # Access Logs
    alb.ingress.kubernetes.io/load-balancer-attributes: |
      access_logs.s3.enabled=true,
      access_logs.s3.bucket=candlefish-security-dashboard-logs,
      access_logs.s3.prefix=alb
spec:
  rules:
  # Main Security Dashboard
  - host: security.candlefish.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: security-dashboard-frontend
            port:
              number: 3000
  
  # API Endpoints
  - host: api.security.candlefish.ai
    http:
      paths:
      - path: /graphql
        pathType: Exact
        backend:
          service:
            name: security-dashboard-backend
            port:
              number: 4000
      - path: /api/v1
        pathType: Prefix
        backend:
          service:
            name: security-dashboard-backend
            port:
              number: 4001
  
  # WebSocket Endpoints
  - host: ws.security.candlefish.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: websocket-service
            port:
              number: 4002
  
  # Authentication Service
  - host: auth.security.candlefish.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 4004
  
  # Monitoring Endpoints (internal only)
  - host: grafana.security.candlefish.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
  
  tls:
  - hosts:
    - security.candlefish.ai
    - api.security.candlefish.ai
    - ws.security.candlefish.ai
    - auth.security.candlefish.ai
    - grafana.security.candlefish.ai

---
# Internal Load Balancer for Database Access
apiVersion: v1
kind: Service
metadata:
  name: security-dashboard-internal-nlb
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: internal-load-balancer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internal"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-target-type: "ip"
    service.beta.kubernetes.io/aws-load-balancer-subnets: "subnet-private-1,subnet-private-2,subnet-private-3"
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "Environment=production,Application=security-dashboard-internal,Team=security"
spec:
  type: LoadBalancer
  loadBalancerSourceRanges:
  - "10.0.0.0/8"      # Only allow private network access
  - "172.16.0.0/12"
  - "192.168.0.0/16"
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  - name: neo4j-http
    port: 7474
    targetPort: 7474
    protocol: TCP
  - name: neo4j-bolt
    port: 7687
    targetPort: 7687
    protocol: TCP
  selector:
    app.kubernetes.io/component: database

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: security-dashboard-load-balancer
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: security-dashboard
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
  - port: health
    path: /health
    interval: 60s
    scrapeTimeout: 15s

---
# AWS Target Group Binding for direct EKS integration
apiVersion: elbv2.k8s.aws/v1beta1
kind: TargetGroupBinding
metadata:
  name: security-dashboard-backend-tgb
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard-backend
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: load-balancer
spec:
  serviceRef:
    name: security-dashboard-backend
    port: 4000
  targetGroupARN: arn:aws:elasticloadbalancing:us-east-1:681214184463:targetgroup/security-dashboard-backend/1234567890abcdef
  targetType: ip
  vpcID: vpc-12345678
  
---
# Kong API Gateway for Advanced Routing
apiVersion: v1
kind: Service
metadata:
  name: kong-proxy
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: kong
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: api-gateway
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: https
    port: 443
    targetPort: 8443
    protocol: TCP
  - name: admin-api
    port: 8001
    targetPort: 8001
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong-gateway

---
# Ingress Class for multiple ingress controllers
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: security-dashboard-alb
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: ingress-class
spec:
  controller: ingress.k8s.aws/alb
  parameters:
    apiGroup: elbv2.k8s.aws
    kind: IngressClassParams
    name: security-dashboard-alb-params

---
# Ingress Class Parameters for ALB
apiVersion: elbv2.k8s.aws/v1beta1
kind: IngressClassParams
metadata:
  name: security-dashboard-alb-params
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: ingress-params
spec:
  group:
    name: security-dashboard.candlefish.ai
  scheme: internet-facing
  ipAddressType: ipv4
  tags:
    Environment: production
    Application: security-dashboard
    Team: security
    CostCenter: security-operations