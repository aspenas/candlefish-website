# Kong API Gateway Deployment
# Production-ready API gateway with HTTPS enforcement and security plugins
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong-gateway
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: kong-gateway
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: gateway
    app.kubernetes.io/version: "${IMAGE_TAG:-latest}"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: kong-gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kong-gateway
        app.kubernetes.io/part-of: security-dashboard
        app.kubernetes.io/component: gateway
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: kong-gateway
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: kong
        image: ${ECR_REGISTRY}/security-dashboard-kong-gateway:${IMAGE_TAG}
        imagePullPolicy: Always
        ports:
        - name: http-proxy
          containerPort: 8000
          protocol: TCP
        - name: https-proxy
          containerPort: 8443
          protocol: TCP
        - name: admin-api
          containerPort: 8001
          protocol: TCP
        - name: admin-ssl
          containerPort: 8444
          protocol: TCP
        env:
        - name: KONG_DATABASE
          value: "off"
        - name: KONG_DECLARATIVE_CONFIG
          value: "/etc/kong/declarative-config.yml"
        - name: KONG_PROXY_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_ADMIN_ACCESS_LOG
          value: "/dev/stdout"
        - name: KONG_PROXY_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_ADMIN_ERROR_LOG
          value: "/dev/stderr"
        - name: KONG_LOG_LEVEL
          value: "info"
        - name: KONG_PLUGINS
          value: "bundled,cors,rate-limiting,request-transformer,response-transformer,jwt,oauth2,basic-auth"
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 ssl http2"
        - name: KONG_SSL_CERT
          value: "/usr/local/kong/ssl/kong-gateway.crt"
        - name: KONG_SSL_CERT_KEY
          value: "/usr/local/kong/ssl/kong-gateway.key"
        - name: KONG_ADMIN_SSL_CERT
          value: "/usr/local/kong/ssl/kong-gateway.crt"
        - name: KONG_ADMIN_SSL_CERT_KEY
          value: "/usr/local/kong/ssl/kong-gateway.key"
        - name: KONG_TRUSTED_IPS
          value: "0.0.0.0/0,::/0"
        - name: KONG_REAL_IP_HEADER
          value: "X-Forwarded-For"
        - name: KONG_REAL_IP_RECURSIVE
          value: "on"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /status
            port: admin-api
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /status
            port: admin-api
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /status
            port: admin-api
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        volumeMounts:
        - name: kong-config
          mountPath: /etc/kong
          readOnly: true
        - name: ssl-certs
          mountPath: /usr/local/kong/ssl
          readOnly: true
        - name: logs
          mountPath: /usr/local/kong/logs
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: kong-config
        configMap:
          name: kong-config
      - name: ssl-certs
        secret:
          secretName: kong-ssl-certs
          defaultMode: 0600
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - kong-gateway
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: kong-gateway
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: kong-gateway
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: gateway
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8001"
    prometheus.io/path: "/metrics"
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "${SSL_CERTIFICATE_ARN}"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: http-proxy
    protocol: TCP
  - name: https
    port: 443
    targetPort: https-proxy
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong-gateway

---
# Internal service for admin access (ClusterIP only)
apiVersion: v1
kind: Service
metadata:
  name: kong-admin
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: kong-gateway
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: admin
spec:
  type: ClusterIP
  ports:
  - name: admin-api
    port: 8001
    targetPort: admin-api
    protocol: TCP
  - name: admin-ssl
    port: 8444
    targetPort: admin-ssl
    protocol: TCP
  selector:
    app.kubernetes.io/name: kong-gateway

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kong-gateway
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: kong-gateway
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: gateway
automountServiceAccountToken: false

---
# Kong Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-config
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: kong-gateway
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: gateway
data:
  declarative-config.yml: |
    _format_version: "3.0"
    _transform: true

    services:
      - name: security-dashboard-api
        url: http://security-dashboard-backend:4000
        plugins:
          - name: cors
            config:
              origins:
                - "https://security.candlefish.ai"
                - "https://dashboard.candlefish.ai"
              methods:
                - GET
                - POST
                - PUT
                - DELETE
                - OPTIONS
              headers:
                - Authorization
                - Content-Type
                - X-Requested-With
              credentials: true
              max_age: 3600
          - name: rate-limiting
            config:
              minute: 1000
              hour: 10000
              policy: local
          - name: request-transformer
            config:
              add:
                headers:
                  - "X-Forwarded-Proto: https"
                  - "X-Forwarded-Port: 443"
          - name: response-transformer
            config:
              add:
                headers:
                  - "Cache-Control: no-store, no-cache, must-revalidate, private"
                  - "Pragma: no-cache"
                  - "Expires: 0"

      - name: graphql-gateway
        url: http://security-dashboard-graphql:4000
        plugins:
          - name: cors
            config:
              origins:
                - "https://security.candlefish.ai"
                - "https://dashboard.candlefish.ai"
              methods:
                - GET
                - POST
                - OPTIONS
              headers:
                - Authorization
                - Content-Type
                - X-Requested-With
              credentials: true
              max_age: 3600
          - name: rate-limiting
            config:
              minute: 500
              hour: 5000
              policy: local
          - name: request-transformer
            config:
              add:
                headers:
                  - "X-Forwarded-Proto: https"

      - name: frontend-app
        url: http://security-dashboard-frontend:80
        plugins:
          - name: cors
            config:
              origins:
                - "*"
              methods:
                - GET
                - POST
                - OPTIONS
              headers:
                - Authorization
                - Content-Type
                - X-Requested-With
              credentials: false
              max_age: 86400
          - name: response-transformer
            config:
              add:
                headers:
                  - "X-Frame-Options: DENY"
                  - "X-Content-Type-Options: nosniff"
                  - "X-XSS-Protection: 1; mode=block"

    routes:
      - name: api-route
        service: security-dashboard-api
        hosts:
          - api.security.candlefish.ai
          - security.candlefish.ai
        paths:
          - /api
        https_redirect_status_code: 301
        preserve_host: true
        protocols:
          - https
          - http

      - name: graphql-route
        service: graphql-gateway
        hosts:
          - api.security.candlefish.ai
          - security.candlefish.ai
        paths:
          - /graphql
          - /subscriptions
        https_redirect_status_code: 301
        preserve_host: true
        protocols:
          - https
          - http

      - name: frontend-route
        service: frontend-app
        hosts:
          - security.candlefish.ai
          - dashboard.candlefish.ai
        paths:
          - /
        https_redirect_status_code: 301
        preserve_host: true
        protocols:
          - https
          - http

      - name: health-check
        service: security-dashboard-api
        hosts:
          - security.candlefish.ai
          - api.security.candlefish.ai
        paths:
          - /health
          - /.well-known/health
        https_redirect_status_code: 301
        preserve_host: true
        protocols:
          - https
          - http

    plugins:
      # Global HTTPS redirect plugin
      - name: request-transformer
        config:
          add:
            headers:
              - "X-Forwarded-Proto: https"
      
      # Global rate limiting
      - name: rate-limiting
        config:
          minute: 2000
          hour: 20000
          policy: local
          fault_tolerant: true
          hide_client_headers: false

      # Security headers plugin
      - name: response-transformer
        config:
          add:
            headers:
              - "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload"
              - "X-Content-Type-Options: nosniff"
              - "X-Frame-Options: DENY"
              - "X-XSS-Protection: 1; mode=block"
              - "Referrer-Policy: strict-origin-when-cross-origin"
              - "Permissions-Policy: camera=(), microphone=(), geolocation=(), payment=(), usb=()"
          remove:
            headers:
              - "Server"

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: kong-gateway-hpa
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: kong-gateway
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: gateway
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kong-gateway
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      selectPolicy: Max

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: kong-gateway-pdb
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: kong-gateway
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: gateway
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kong-gateway