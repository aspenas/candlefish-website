# Redis Deployment for Security Dashboard
# High-availability Redis with clustering and monitoring
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: redis-cluster
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: cache
    app.kubernetes.io/version: "7.2"
spec:
  serviceName: redis-cluster
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-cluster
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-cluster
        app.kubernetes.io/part-of: security-dashboard
        app.kubernetes.io/component: cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: security-dashboard-redis
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
      - name: init-permissions
        image: busybox:1.35
        command: ['sh', '-c', 'chown -R 999:999 /data && chmod 755 /data']
        volumeMounts:
        - name: redis-data
          mountPath: /data
        securityContext:
          runAsUser: 0
      containers:
      - name: redis
        image: redis:7.2-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        - name: cluster
          containerPort: 16379
          protocol: TCP
        command:
        - redis-server
        - /etc/redis/redis.conf
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis-password
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h localhost -p 6379 -a $REDIS_PASSWORD ping"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h localhost -p 6379 -a $REDIS_PASSWORD ping"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.54.0
        ports:
        - name: metrics
          containerPort: 9121
          protocol: TCP
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: redis-password
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - redis-cluster
              topologyKey: "kubernetes.io/hostname"
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app.kubernetes.io/name: redis-cluster
        app.kubernetes.io/part-of: security-dashboard
        app.kubernetes.io/component: cache
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "gp3-encrypted"
      resources:
        requests:
          storage: 20Gi

---
# Redis Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: redis-cluster
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: cache
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
  - name: cluster
    port: 16379
    targetPort: cluster
    protocol: TCP
  - name: metrics
    port: 9121
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: redis-cluster

---
# Redis Service for client connections
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: redis-cluster
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: cache
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
  selector:
    app.kubernetes.io/name: redis-cluster

---
# Redis Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-dashboard-redis
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: redis-cluster
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: cache
automountServiceAccountToken: false

---
# Redis Configuration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: redis-cluster
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: cache
data:
  redis.conf: |
    # Redis Configuration for Security Dashboard
    
    # Network
    bind 0.0.0.0
    port 6379
    protected-mode yes
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    
    # General
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
    databases 16
    
    # Security
    requirepass ${REDIS_PASSWORD}
    
    # Memory Management
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    maxmemory-samples 5
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    
    # AOF
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    aof-use-rdb-preamble yes
    
    # Slow Log
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    
    # Latency Monitor
    latency-monitor-threshold 100
    
    # Event Notification
    notify-keyspace-events "Ex"
    
    # Advanced Config
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    hll-sparse-max-bytes 3000
    stream-node-max-bytes 4096
    stream-node-max-entries 100
    
    # Active Rehashing
    activerehashing yes
    
    # Client Output Buffer Limits
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    
    # Client Query Buffer Limit
    client-query-buffer-limit 1gb
    
    # Protocol Max Bulk Length
    proto-max-bulk-len 512mb
    
    # Frequency
    hz 10
    
    # Dynamic HZ
    dynamic-hz yes
    
    # AOF Rewrite Incremental Fsync
    aof-rewrite-incremental-fsync yes
    
    # RDB Save Incremental Fsync
    rdb-save-incremental-fsync yes
    
    # LFU Stats
    lfu-log-factor 10
    lfu-decay-time 1

---
# Redis Credentials Secret (template - populate with actual values)
apiVersion: v1
kind: Secret
metadata:
  name: redis-credentials
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: redis-cluster
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: cache
type: Opaque
data:
  # This should be base64 encoded and populated from AWS Secrets Manager
  # redis-password: <base64-encoded-password>
  redis-password: ""