# Security Dashboard Configuration Maps
# Application configuration, environment-specific settings, and feature flags

# Main Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-dashboard-config
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: configuration
data:
  # Environment Configuration
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  PORT: "4000"
  
  # GraphQL Configuration
  GRAPHQL_PLAYGROUND: "false"
  GRAPHQL_INTROSPECTION: "false"
  APOLLO_TELEMETRY_DISABLED: "true"
  APOLLO_SCHEMA_REPORTING: "false"
  
  # Security Configuration
  CORS_ENABLED: "true"
  CSRF_PROTECTION: "true"
  RATE_LIMITING_ENABLED: "true"
  SECURITY_HEADERS_ENABLED: "true"
  
  # Performance Configuration
  CACHE_TTL: "300"
  QUERY_TIMEOUT: "30000"
  CONNECTION_POOL_SIZE: "20"
  MAX_QUERY_DEPTH: "10"
  MAX_QUERY_COMPLEXITY: "1000"
  
  # Monitoring Configuration
  METRICS_ENABLED: "true"
  METRICS_PORT: "9090"
  HEALTH_CHECK_PATH: "/health"
  TRACING_ENABLED: "true"
  TRACING_SAMPLE_RATE: "0.1"
  
  # External Service URLs (non-sensitive)
  FRONTEND_URL: "https://security.candlefish.ai"
  API_BASE_URL: "https://api.security.candlefish.ai"
  WEBSOCKET_URL: "wss://api.security.candlefish.ai/subscriptions"

---
# Database Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-config
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: database
data:
  # PostgreSQL Configuration
  POSTGRES_DB: "security_dashboard"
  POSTGRES_PORT: "5432"
  POSTGRES_MAX_CONNECTIONS: "100"
  POSTGRES_STATEMENT_TIMEOUT: "30000"
  POSTGRES_IDLE_TIMEOUT: "10000"
  
  # Connection Pool Configuration
  DB_POOL_MIN: "5"
  DB_POOL_MAX: "20"
  DB_POOL_IDLE_TIMEOUT: "30000"
  DB_POOL_CONNECTION_TIMEOUT: "5000"
  
  # Migration Configuration
  RUN_MIGRATIONS: "true"
  MIGRATION_TABLE: "knex_migrations"
  
  # TimescaleDB Configuration
  TIMESCALEDB_TELEMETRY: "off"
  TIMESCALEDB_CHUNK_TIME_INTERVAL: "1 hour"
  TIMESCALEDB_RETENTION_POLICY: "7 days"

---
# Redis Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: cache
data:
  # Redis Connection
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  REDIS_MAX_RETRIES: "3"
  REDIS_RETRY_DELAY: "1000"
  REDIS_CONNECTION_TIMEOUT: "5000"
  REDIS_COMMAND_TIMEOUT: "10000"
  
  # Redis Pool Configuration
  REDIS_POOL_MIN: "5"
  REDIS_POOL_MAX: "20"
  
  # Session Configuration
  SESSION_STORE: "redis"
  SESSION_TTL: "86400"
  SESSION_PREFIX: "security-dashboard:session:"
  
  # Cache Configuration
  CACHE_PREFIX: "security-dashboard:cache:"
  CACHE_DEFAULT_TTL: "300"
  CACHE_ENABLED: "true"

---
# Feature Flags Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: feature-flags-config
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: feature-flags
data:
  # Security Features
  ENABLE_2FA: "true"
  ENABLE_SSO: "true"
  ENABLE_RBAC: "true"
  ENABLE_AUDIT_LOGGING: "true"
  ENABLE_THREAT_DETECTION: "true"
  ENABLE_VULNERABILITY_SCANNING: "true"
  
  # Dashboard Features
  ENABLE_REAL_TIME_ALERTS: "true"
  ENABLE_CUSTOM_DASHBOARDS: "true"
  ENABLE_EXPORT_REPORTS: "true"
  ENABLE_MOBILE_NOTIFICATIONS: "true"
  ENABLE_EMAIL_NOTIFICATIONS: "true"
  
  # Integration Features
  ENABLE_SLACK_INTEGRATION: "true"
  ENABLE_PAGERDUTY_INTEGRATION: "true"
  ENABLE_JIRA_INTEGRATION: "false"
  ENABLE_SPLUNK_INTEGRATION: "false"
  ENABLE_SIEM_INTEGRATION: "true"
  
  # Performance Features
  ENABLE_QUERY_CACHING: "true"
  ENABLE_RESPONSE_COMPRESSION: "true"
  ENABLE_CDN_CACHING: "true"
  ENABLE_LAZY_LOADING: "true"
  
  # Development Features (should be false in production)
  ENABLE_DEBUG_MODE: "false"
  ENABLE_MOCK_DATA: "false"
  ENABLE_PROFILING: "false"

---
# Monitoring and Alerting Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-config
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: monitoring
data:
  # Prometheus Configuration
  PROMETHEUS_METRICS_PATH: "/metrics"
  PROMETHEUS_METRICS_INTERVAL: "15s"
  PROMETHEUS_HISTOGRAM_BUCKETS: "0.1,0.5,1,2,5,10,30"
  
  # Alert Thresholds
  CPU_ALERT_THRESHOLD: "80"
  MEMORY_ALERT_THRESHOLD: "85"
  DISK_ALERT_THRESHOLD: "90"
  RESPONSE_TIME_ALERT_THRESHOLD: "1000"
  ERROR_RATE_ALERT_THRESHOLD: "1"
  
  # Health Check Configuration
  HEALTH_CHECK_ENABLED: "true"
  HEALTH_CHECK_INTERVAL: "30s"
  HEALTH_CHECK_TIMEOUT: "5s"
  HEALTH_CHECK_RETRIES: "3"
  
  # Logging Configuration
  LOG_FORMAT: "json"
  LOG_INCLUDE_TIMESTAMP: "true"
  LOG_INCLUDE_CORRELATION_ID: "true"
  LOG_INCLUDE_USER_ID: "true"
  LOG_MAX_SIZE: "100MB"
  LOG_MAX_FILES: "10"
  LOG_ROTATION_INTERVAL: "daily"

---
# Security Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-config
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: security
data:
  # CORS Configuration
  CORS_ORIGINS: "https://security.candlefish.ai,https://dashboard.candlefish.ai"
  CORS_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
  CORS_HEADERS: "Authorization,Content-Type,X-Requested-With"
  CORS_CREDENTIALS: "true"
  CORS_MAX_AGE: "3600"
  
  # Rate Limiting Configuration
  RATE_LIMIT_WINDOW: "900000"
  RATE_LIMIT_MAX_REQUESTS: "100"
  RATE_LIMIT_SKIP_SUCCESSFUL: "false"
  RATE_LIMIT_HEADERS: "true"
  
  # JWT Configuration
  JWT_ALGORITHM: "RS256"
  JWT_EXPIRATION: "1h"
  JWT_REFRESH_EXPIRATION: "7d"
  JWT_ISSUER: "candlefish-security-dashboard"
  JWT_AUDIENCE: "security-dashboard-users"
  
  # Encryption Configuration
  ENCRYPTION_ALGORITHM: "aes-256-gcm"
  HASH_ROUNDS: "12"
  
  # Security Headers
  HSTS_MAX_AGE: "31536000"
  CSP_POLICY: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';"
  X_FRAME_OPTIONS: "DENY"
  X_CONTENT_TYPE_OPTIONS: "nosniff"
  X_XSS_PROTECTION: "1; mode=block"
  REFERRER_POLICY: "strict-origin-when-cross-origin"

---
# Kong Gateway Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-config
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: api-gateway
data:
  # Kong Configuration
  kong.conf: |
    # Basic Configuration
    prefix = /usr/local/kong/
    log_level = info
    
    # Database Configuration
    database = off
    declarative_config = /etc/kong/declarative-config.yml
    
    # Proxy Configuration
    proxy_listen = 0.0.0.0:8000, 0.0.0.0:8443 ssl http2
    admin_listen = 0.0.0.0:8001, 0.0.0.0:8444 ssl
    
    # SSL Configuration
    ssl_protocols = TLSv1.2 TLSv1.3
    ssl_ciphers = ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl_prefer_server_ciphers = on
    
    # Security Configuration
    trusted_ips = 0.0.0.0/0,::/0
    real_ip_header = X-Forwarded-For
    real_ip_recursive = on
    
    # Performance Configuration
    worker_processes = auto
    worker_connections = 1024
    
    # Plugins
    plugins = bundled,cors,rate-limiting,request-transformer,response-transformer,jwt
  
  # Kong Declarative Configuration
  declarative-config.yml: |
    _format_version: "3.0"
    _transform: true
    
    services:
      - name: security-dashboard-api
        url: http://security-dashboard-backend:4000
        plugins:
          - name: cors
            config:
              origins:
                - "https://security.candlefish.ai"
                - "https://dashboard.candlefish.ai"
              methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
              headers: ["Authorization", "Content-Type", "X-Requested-With"]
              credentials: true
              max_age: 3600
          - name: rate-limiting
            config:
              minute: 1000
              hour: 10000
              policy: local
    
    routes:
      - name: api-route
        service: security-dashboard-api
        hosts: ["api.security.candlefish.ai"]
        paths: ["/api", "/graphql", "/subscriptions"]
        https_redirect_status_code: 301
        protocols: ["https"]
    
    plugins:
      - name: rate-limiting
        config:
          minute: 2000
          hour: 20000
          policy: local

---
# Mobile App Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: mobile-config
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: mobile
data:
  # React Native Configuration
  REACT_NATIVE_PACKAGER_HOSTNAME: "0.0.0.0"
  EXPO_PUBLIC_API_URL: "https://api.security.candlefish.ai/graphql"
  EXPO_PUBLIC_WS_URL: "wss://api.security.candlefish.ai/subscriptions"
  EXPO_PUBLIC_ENV: "production"
  
  # App Configuration
  APP_NAME: "Security Dashboard"
  APP_VERSION: "1.0.0"
  APP_BUILD_NUMBER: "1"
  
  # Push Notifications
  PUSH_NOTIFICATIONS_ENABLED: "true"
  PUSH_NOTIFICATION_CHANNELS: "security-alerts,system-updates"
  
  # Offline Configuration
  OFFLINE_MODE_ENABLED: "true"
  OFFLINE_STORAGE_SIZE: "50MB"
  SYNC_INTERVAL: "300000"
  
  # Security Configuration for Mobile
  BIOMETRIC_AUTH_ENABLED: "true"
  PIN_AUTH_ENABLED: "true"
  SESSION_TIMEOUT: "900000"
  AUTO_LOCK_ENABLED: "true"
  AUTO_LOCK_TIMEOUT: "300000"

---
# Nginx Configuration for Frontend
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: frontend
data:
  nginx.conf: |
    user www-data;
    worker_processes auto;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;
        
        # Performance
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 10M;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types text/plain text/css text/xml text/javascript
                   application/javascript application/xml+rss application/json;
        
        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Hide server information
        server_tokens off;
        
        include /etc/nginx/conf.d/*.conf;
    }
  
  default.conf: |
    server {
        listen 8080;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;
        
        # Security headers
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://api.security.candlefish.ai; frame-ancestors 'none';" always;
        
        # Handle React Router
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # API proxy
        location /api/ {
            proxy_pass http://security-dashboard-backend:4000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Static assets caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }