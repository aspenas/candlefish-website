# Security Dashboard Secrets Management
# Uses External Secrets Operator with AWS Secrets Manager integration

# External Secrets Operator - Secret Store for AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: secrets-management
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        secretRef:
          accessKeyId:
            name: aws-credentials
            key: access-key-id
          secretAccessKey:
            name: aws-credentials
            key: secret-access-key

---
# AWS Credentials Secret (created manually or via CI/CD)
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: secrets-management
type: Opaque
data:
  # These values should be base64 encoded and injected via CI/CD
  # DO NOT commit actual credentials to Git
  access-key-id: REPLACE_WITH_BASE64_ENCODED_ACCESS_KEY
  secret-access-key: REPLACE_WITH_BASE64_ENCODED_SECRET_KEY

---
# Database Credentials - External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: database
spec:
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: database-secrets
    creationPolicy: Owner
  data:
    - secretKey: username
      remoteRef:
        key: candlefish/production/security-dashboard/database
        property: username
    - secretKey: password
      remoteRef:
        key: candlefish/production/security-dashboard/database
        property: password
    - secretKey: host
      remoteRef:
        key: candlefish/production/security-dashboard/database
        property: host
    - secretKey: port
      remoteRef:
        key: candlefish/production/security-dashboard/database
        property: port
    - secretKey: database
      remoteRef:
        key: candlefish/production/security-dashboard/database
        property: database
    - secretKey: connection-string
      remoteRef:
        key: candlefish/production/security-dashboard/database
        property: connection_string

---
# Redis Credentials - External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-credentials
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: cache
spec:
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: redis-secrets
    creationPolicy: Owner
  data:
    - secretKey: password
      remoteRef:
        key: candlefish/production/security-dashboard/redis
        property: password
    - secretKey: host
      remoteRef:
        key: candlefish/production/security-dashboard/redis
        property: host
    - secretKey: port
      remoteRef:
        key: candlefish/production/security-dashboard/redis
        property: port
    - secretKey: connection-string
      remoteRef:
        key: candlefish/production/security-dashboard/redis
        property: connection_string

---
# JWT and API Keys - External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: api-credentials
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: authentication
spec:
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: api-secrets
    creationPolicy: Owner
  data:
    - secretKey: jwt-secret
      remoteRef:
        key: candlefish/production/security-dashboard/api
        property: jwt_secret
    - secretKey: jwt-private-key
      remoteRef:
        key: candlefish/production/security-dashboard/api
        property: jwt_private_key
    - secretKey: jwt-public-key
      remoteRef:
        key: candlefish/production/security-dashboard/api
        property: jwt_public_key
    - secretKey: api-key
      remoteRef:
        key: candlefish/production/security-dashboard/api
        property: api_key
    - secretKey: webhook-secret
      remoteRef:
        key: candlefish/production/security-dashboard/api
        property: webhook_secret
    - secretKey: encryption-key
      remoteRef:
        key: candlefish/production/security-dashboard/api
        property: encryption_key

---
# Third-party Service Credentials - External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: external-service-credentials
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: integrations
spec:
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: external-secrets
    creationPolicy: Owner
  data:
    # PagerDuty Integration
    - secretKey: pagerduty-routing-key
      remoteRef:
        key: candlefish/production/security-dashboard/integrations
        property: pagerduty_routing_key
    
    # Slack Integration
    - secretKey: slack-webhook-url
      remoteRef:
        key: candlefish/production/security-dashboard/integrations
        property: slack_webhook_url
    - secretKey: slack-bot-token
      remoteRef:
        key: candlefish/production/security-dashboard/integrations
        property: slack_bot_token
    
    # Email Service (SendGrid/SES)
    - secretKey: sendgrid-api-key
      remoteRef:
        key: candlefish/production/security-dashboard/integrations
        property: sendgrid_api_key
    - secretKey: ses-access-key
      remoteRef:
        key: candlefish/production/security-dashboard/integrations
        property: ses_access_key
    - secretKey: ses-secret-key
      remoteRef:
        key: candlefish/production/security-dashboard/integrations
        property: ses_secret_key
    
    # Monitoring and Observability
    - secretKey: datadog-api-key
      remoteRef:
        key: candlefish/production/security-dashboard/monitoring
        property: datadog_api_key
    - secretKey: newrelic-license-key
      remoteRef:
        key: candlefish/production/security-dashboard/monitoring
        property: newrelic_license_key

---
# SSL/TLS Certificates - External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ssl-certificates
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: ssl-tls
spec:
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: ssl-secrets
    creationPolicy: Owner
    type: kubernetes.io/tls
  data:
    - secretKey: tls.crt
      remoteRef:
        key: candlefish/production/security-dashboard/ssl
        property: certificate
    - secretKey: tls.key
      remoteRef:
        key: candlefish/production/security-dashboard/ssl
        property: private_key
    - secretKey: ca.crt
      remoteRef:
        key: candlefish/production/security-dashboard/ssl
        property: ca_certificate

---
# Mobile App Certificates and Keys - External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mobile-app-credentials
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: mobile
spec:
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: mobile-secrets
    creationPolicy: Owner
  data:
    # iOS Certificates and Provisioning
    - secretKey: ios-certificate
      remoteRef:
        key: candlefish/production/security-dashboard/mobile
        property: ios_certificate
    - secretKey: ios-private-key
      remoteRef:
        key: candlefish/production/security-dashboard/mobile
        property: ios_private_key
    - secretKey: ios-provisioning-profile
      remoteRef:
        key: candlefish/production/security-dashboard/mobile
        property: ios_provisioning_profile
    
    # Android Keystore
    - secretKey: android-keystore
      remoteRef:
        key: candlefish/production/security-dashboard/mobile
        property: android_keystore
    - secretKey: android-keystore-password
      remoteRef:
        key: candlefish/production/security-dashboard/mobile
        property: android_keystore_password
    - secretKey: android-key-alias
      remoteRef:
        key: candlefish/production/security-dashboard/mobile
        property: android_key_alias
    
    # App Store Connect / Google Play
    - secretKey: app-store-connect-key
      remoteRef:
        key: candlefish/production/security-dashboard/mobile
        property: app_store_connect_key
    - secretKey: google-play-service-account
      remoteRef:
        key: candlefish/production/security-dashboard/mobile
        property: google_play_service_account

---
# Kong Gateway Configuration Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: kong-gateway-credentials
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: api-gateway
spec:
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: kong-secrets
    creationPolicy: Owner
  data:
    - secretKey: admin-password
      remoteRef:
        key: candlefish/production/security-dashboard/kong
        property: admin_password
    - secretKey: admin-token
      remoteRef:
        key: candlefish/production/security-dashboard/kong
        property: admin_token
    - secretKey: session-secret
      remoteRef:
        key: candlefish/production/security-dashboard/kong
        property: session_secret

---
# Sealed Secret for Emergency Access (when External Secrets is down)
# This should be created using kubeseal with a backup of critical credentials
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: emergency-access
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: security-dashboard
    app.kubernetes.io/component: emergency-access
spec:
  encryptedData:
    # This would be encrypted using sealed-secrets controller
    # and should contain minimal credentials for emergency access
    emergency-admin-password: AgBy3i4OJSWK+PiTySYZZA9rO43cGDEQAx...
    emergency-database-password: AgAz9g4OJSWK+PiTySYZZA9rO43cGDEQAx...
  template:
    metadata:
      name: emergency-access
      namespace: security-dashboard
    type: Opaque