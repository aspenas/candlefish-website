# PostgreSQL with TimescaleDB Deployment for Security Dashboard
# High-availability database with persistent storage and monitoring
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-timescale
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: postgresql-timescale
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: database
    app.kubernetes.io/version: "15.4"
spec:
  serviceName: postgresql-timescale
  replicas: 2
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql-timescale
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql-timescale
        app.kubernetes.io/part-of: security-dashboard
        app.kubernetes.io/component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: security-dashboard-postgres
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
      - name: init-permissions
        image: busybox:1.35
        command: ['sh', '-c', 'chown -R 999:999 /var/lib/postgresql/data']
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        securityContext:
          runAsUser: 0
      containers:
      - name: postgresql
        image: timescale/timescaledb:2.11.2-pg15
        imagePullPolicy: IfNotPresent
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_DB
          value: security_dashboard
        - name: POSTGRES_USER
          value: security_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=scram-sha-256"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "scram-sha-256"
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            storage: "50Gi"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U security_user -d security_dashboard -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U security_user -d security_dashboard -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 6
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
          readOnly: true
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.13.2
        ports:
        - name: metrics
          containerPort: 9187
          protocol: TCP
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://security_user:$(POSTGRES_PASSWORD)@localhost:5432/security_dashboard?sslmode=disable"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: postgres-password
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-config
        configMap:
          name: postgresql-config
      - name: postgres-init
        configMap:
          name: postgresql-init-scripts
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - postgresql-timescale
            topologyKey: "kubernetes.io/hostname"
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
      labels:
        app.kubernetes.io/name: postgresql-timescale
        app.kubernetes.io/part-of: security-dashboard
        app.kubernetes.io/component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "gp3-encrypted"
      resources:
        requests:
          storage: 100Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgresql-timescale
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: postgresql-timescale
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: database
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
    protocol: TCP
  - name: metrics
    port: 9187
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: postgresql-timescale

---
# PostgreSQL Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-dashboard-postgres
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: postgresql-timescale
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: database
automountServiceAccountToken: false

---
# PostgreSQL Configuration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: postgresql-timescale
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: database
data:
  postgresql.conf: |
    # PostgreSQL Configuration for Security Dashboard
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    
    # Memory Settings
    shared_buffers = 1GB
    effective_cache_size = 3GB
    maintenance_work_mem = 256MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # TimescaleDB Settings
    shared_preload_libraries = 'timescaledb'
    timescaledb.max_background_workers = 8
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_min_messages = warning
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    log_autovacuum_min_duration = 0
    
    # Security
    ssl = on
    ssl_cert_file = '/etc/ssl/certs/ssl-cert-snakeoil.pem'
    ssl_key_file = '/etc/ssl/private/ssl-cert-snakeoil.key'
    
    # Performance
    checkpoint_segments = 64
    checkpoint_timeout = 5min
    archive_mode = on
    archive_command = '/bin/true'
    
    # Replication (for future HA setup)
    wal_level = replica
    max_wal_senders = 3
    wal_keep_segments = 64

---
# PostgreSQL Init Scripts ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-init-scripts
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: postgresql-timescale
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: database
data:
  01-init-database.sql: |
    -- Security Dashboard Database Initialization
    
    -- Create TimescaleDB extension
    CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;
    
    -- Create additional extensions for security dashboard
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    
    -- Create database user if not exists
    DO
    $do$
    BEGIN
       IF NOT EXISTS (
          SELECT FROM pg_catalog.pg_roles
          WHERE  rolname = 'security_app') THEN
    
          CREATE ROLE security_app LOGIN PASSWORD 'change_me_in_production';
       END IF;
    END
    $do$;
    
    -- Grant permissions
    GRANT CONNECT ON DATABASE security_dashboard TO security_app;
    GRANT USAGE ON SCHEMA public TO security_app;
    GRANT CREATE ON SCHEMA public TO security_app;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO security_app;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE ON SEQUENCES TO security_app;
    
    -- Create initial tables (basic structure)
    CREATE TABLE IF NOT EXISTS events (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
        event_type VARCHAR(100) NOT NULL,
        source_ip INET,
        user_id UUID,
        severity VARCHAR(20) NOT NULL DEFAULT 'info',
        message TEXT,
        metadata JSONB,
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
    );
    
    -- Convert to TimescaleDB hypertable
    SELECT create_hypertable('events', 'timestamp', if_not_exists => TRUE);
    
    -- Create indexes for common queries
    CREATE INDEX IF NOT EXISTS idx_events_event_type ON events (event_type);
    CREATE INDEX IF NOT EXISTS idx_events_severity ON events (severity);
    CREATE INDEX IF NOT EXISTS idx_events_source_ip ON events (source_ip);
    CREATE INDEX IF NOT EXISTS idx_events_user_id ON events (user_id);
    CREATE INDEX IF NOT EXISTS idx_events_metadata ON events USING GIN (metadata);
    
    -- Set retention policy (keep data for 90 days)
    SELECT add_retention_policy('events', INTERVAL '90 days', if_not_exists => TRUE);
    
  02-create-kong-database.sql: |
    -- Create Kong database for API Gateway
    CREATE DATABASE kong_security;
    GRANT ALL PRIVILEGES ON DATABASE kong_security TO security_user;

---
# PostgreSQL Credentials Secret (template - populate with actual values)
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-credentials
  namespace: security-dashboard
  labels:
    app.kubernetes.io/name: postgresql-timescale
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: database
type: Opaque
data:
  # These should be base64 encoded and populated from AWS Secrets Manager
  # postgres-password: <base64-encoded-password>
  # security-app-password: <base64-encoded-app-password>
  postgres-password: ""
  security-app-password: ""

---
# Storage Class for encrypted persistent volumes
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: gp3-encrypted
  labels:
    app.kubernetes.io/name: postgresql-timescale
    app.kubernetes.io/part-of: security-dashboard
    app.kubernetes.io/component: database
provisioner: ebs.csi.aws.com
parameters:
  type: gp3
  encrypted: "true"
  iops: "3000"
  throughput: "125"
allowVolumeExpansion: true
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Retain