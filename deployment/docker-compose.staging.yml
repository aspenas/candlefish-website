version: '3.8'

services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: security-dashboard-postgres
    environment:
      POSTGRES_DB: security_dashboard
      POSTGRES_USER: secadmin
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepass123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./k8s/security-dashboard/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - security-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U secadmin -d security_dashboard"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for real-time data
  redis:
    image: redis:7-alpine
    container_name: security-dashboard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - security-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (Go)
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: security-dashboard-backend
    environment:
      DATABASE_URL: postgres://secadmin:${POSTGRES_PASSWORD:-securepass123}@postgres:5432/security_dashboard
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret}
      ENVIRONMENT: staging
      PORT: 4000
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - security-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # GraphQL Gateway
  graphql:
    build:
      context: .
      dockerfile: docker/Dockerfile.graphql-gateway
    container_name: security-dashboard-graphql
    environment:
      BACKEND_URL: http://backend:4000
      REDIS_URL: redis://redis:6379
      PORT: 4001
    ports:
      - "4001:4001"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - security-net

  # React Frontend
  frontend:
    build:
      context: ../brand/website
      dockerfile: ../../deployment/docker/Dockerfile.security-dashboard-frontend
      args:
        NEXT_PUBLIC_API_URL: http://localhost:4001/graphql
        NEXT_PUBLIC_WS_URL: ws://localhost:4001/graphql
    container_name: security-dashboard-frontend
    ports:
      - "3000:3000"
    depends_on:
      - graphql
    networks:
      - security-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong API Gateway (with HTTPS enforcement)
  kong:
    image: kong:3.4-alpine
    container_name: security-dashboard-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001 ssl"
      KONG_ADMIN_SSL_CERT: /kong/certs/admin-cert.pem
      KONG_ADMIN_SSL_CERT_KEY: /kong/certs/admin-key.pem
    volumes:
      - ./k8s/security-dashboard/kong/kong.yml:/kong/declarative/kong.yml
      - ./k8s/security-dashboard/kong/certs:/kong/certs
    ports:
      - "8000:8000"  # HTTP proxy
      - "8443:8443"  # HTTPS proxy
      - "8001:8001"  # HTTPS admin API
    networks:
      - security-net

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: security-dashboard-prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - security-net
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: security-dashboard-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_SECURITY_ADMIN_USER: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - security-net

networks:
  security-net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: