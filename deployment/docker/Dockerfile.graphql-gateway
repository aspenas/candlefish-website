# GraphQL Federation Gateway - Apollo Server with Security Features
# Handles federated GraphQL services with authentication and security

# ============================================================================
# Build Stage - Optimized TypeScript compilation
# ============================================================================
FROM node:20-alpine3.18 AS builder

# Install build dependencies and security updates
RUN apk update && apk upgrade && \
    apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy package files for better caching
COPY package*.json pnpm-lock.yaml* ./
COPY graphql/package*.json ./graphql/

# Install pnpm and dependencies
RUN npm install -g pnpm@8.7.0 && \
    pnpm install --frozen-lockfile --production=false

# Copy source code
COPY graphql ./graphql
COPY shared ./shared

# Build GraphQL gateway
WORKDIR /app/graphql

# Generate federated schema and build
RUN pnpm run codegen && \
    pnpm run build:federation && \
    pnpm run build

# Install production dependencies only
RUN pnpm prune --production

# ============================================================================
# Production Runtime Stage - Minimal Node.js runtime
# ============================================================================
FROM node:20-alpine3.18 AS runtime

# Install runtime dependencies and security updates
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    tzdata && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/graphql/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/graphql/schema.graphql ./schema.graphql
COPY --from=builder --chown=nodejs:nodejs /app/graphql/package*.json ./

# Copy configuration files
COPY --chown=nodejs:nodejs deployment/config/graphql-gateway-config.json ./config/
COPY --chown=nodejs:nodejs deployment/ssl-certs/ca-certificates.crt /etc/ssl/certs/

# Create required directories with proper permissions
RUN mkdir -p /app/logs /app/tmp /app/cache && \
    chown -R nodejs:nodejs /app/logs /app/tmp /app/cache

# Switch to non-root user
USER nodejs

# Health check configuration
HEALTHCHECK --interval=15s --timeout=3s --start-period=45s --retries=3 \
    CMD curl -f http://localhost:4000/.well-known/apollo/server-health || exit 1

# Environment configuration
ENV NODE_ENV=production \
    PORT=4000 \
    APOLLO_GATEWAY_PORT=4000 \
    NODE_OPTIONS="--max-old-space-size=1024 --enable-source-maps" \
    APOLLO_SCHEMA_REPORTING=false \
    APOLLO_TELEMETRY_DISABLED=true \
    GRAPHQL_PLAYGROUND=false \
    GRAPHQL_INTROSPECTION=false \
    LOG_LEVEL=info \
    FEDERATION_POLL_INTERVAL=10s \
    QUERY_CACHE_TTL=300 \
    PERSISTED_QUERIES=true \
    AUTOMATIC_PERSISTED_QUERIES=true

# Performance optimizations
ENV UV_THREADPOOL_SIZE=128 \
    NODE_GC_FLAGS="--gc-global" \
    NODE_TRACE_WARNINGS=1

# Expose port
EXPOSE 4000

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the GraphQL gateway
CMD ["node", "dist/federation/gateway.js"]

# ============================================================================
# Development Stage - For local development
# ============================================================================
FROM builder AS development

# Install development dependencies
RUN pnpm install

# Copy development configuration
COPY --chown=nodejs:nodejs deployment/config/graphql-gateway-dev-config.json ./config/

# Switch to non-root user
USER nodejs

# Enable development features
ENV NODE_ENV=development \
    GRAPHQL_PLAYGROUND=true \
    GRAPHQL_INTROSPECTION=true \
    LOG_LEVEL=debug \
    FEDERATION_POLL_INTERVAL=5s

# Expose development ports
EXPOSE 4000 9229

# Start with hot reload and debugging
CMD ["pnpm", "run", "dev:federation"]

# ============================================================================
# Security Hardened Stage - Additional security measures
# ============================================================================
FROM runtime AS security-hardened

# Install additional security tools
USER root
RUN apk add --no-cache \
    fail2ban \
    logrotate && \
    rm -rf /var/cache/apk/*

# Configure fail2ban for GraphQL rate limiting
COPY deployment/security/fail2ban-graphql.conf /etc/fail2ban/jail.d/graphql.conf

# Set up log rotation
COPY deployment/security/logrotate-graphql.conf /etc/logrotate.d/graphql

# Configure security headers and rate limiting
COPY --chown=nodejs:nodejs deployment/security/security-middleware.js ./middleware/

# Switch back to non-root user
USER nodejs

# Enhanced security environment
ENV SECURITY_HEADERS_ENABLED=true \
    RATE_LIMITING_ENABLED=true \
    CORS_WHITELIST_ONLY=true \
    CSRF_PROTECTION_ENABLED=true \
    REQUEST_SANITIZATION=true

# Start with security middleware
CMD ["node", "dist/federation/gateway.js", "--security-hardened"]

# ============================================================================
# Monitoring Stage - With observability tools
# ============================================================================
FROM runtime AS monitoring

# Install monitoring dependencies
USER root
RUN apk add --no-cache \
    prometheus-node-exporter && \
    rm -rf /var/cache/apk/*

# Copy monitoring configuration
COPY --chown=nodejs:nodejs deployment/monitoring/prometheus-graphql.yml ./monitoring/
COPY --chown=nodejs:nodejs deployment/monitoring/jaeger-config.yml ./monitoring/

# Switch to non-root user
USER nodejs

# Enable monitoring
ENV PROMETHEUS_METRICS=true \
    JAEGER_TRACING=true \
    APOLLO_STUDIO_REPORTING=false \
    METRICS_PORT=9464 \
    TRACING_SAMPLE_RATE=0.1

# Expose metrics port
EXPOSE 9464

# Start with monitoring enabled
CMD ["node", "dist/federation/gateway.js", "--enable-monitoring"]

# ============================================================================
# Build arguments and labels
# ============================================================================
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION
ARG FEDERATION_SERVICES=""

LABEL org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="GraphQL Federation Gateway" \
      org.label-schema.description="Apollo Federation gateway for security dashboard microservices" \
      org.label-schema.url="https://candlefish.ai" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/candlefish-ai/security-dashboard" \
      org.label-schema.vendor="Candlefish AI" \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0" \
      org.label-schema.docker.cmd="docker run -p 4000:4000 -e FEDERATION_SERVICES='$FEDERATION_SERVICES' security-dashboard/graphql-gateway" \
      maintainer="patrick@candlefish.ai"