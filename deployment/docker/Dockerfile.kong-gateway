# Kong Gateway - Security-first API Gateway with HTTPS enforcement
# Addresses HTTP to HTTPS vulnerability from security audit

# ============================================================================
# Base Kong with security plugins
# ============================================================================
FROM kong:3.4-alpine AS base

# Install security updates
USER root
RUN apk update && apk upgrade && \
    apk add --no-cache \
    curl \
    openssl \
    ca-certificates \
    bash && \
    rm -rf /var/cache/apk/*

# Install additional Kong plugins for security
RUN luarocks install kong-plugin-request-transformer && \
    luarocks install kong-plugin-response-transformer && \
    luarocks install kong-plugin-cors && \
    luarocks install kong-plugin-rate-limiting && \
    luarocks install kong-plugin-jwt && \
    luarocks install kong-plugin-oauth2 && \
    luarocks install kong-plugin-basic-auth

# Create Kong user and directories
RUN adduser -D -s /bin/sh kong && \
    mkdir -p /usr/local/kong/logs && \
    mkdir -p /usr/local/kong/ssl && \
    chown -R kong:kong /usr/local/kong

# ============================================================================
# Security Configuration Stage
# ============================================================================
FROM base AS security-config

# Copy security configuration files
COPY --chown=kong:kong deployment/kong/kong.conf /etc/kong/
COPY --chown=kong:kong deployment/kong/declarative-config.yml /etc/kong/
COPY --chown=kong:kong deployment/kong/plugins /usr/local/share/lua/5.1/kong/plugins/

# Copy SSL certificates
COPY --chown=kong:kong deployment/ssl-certs/kong-gateway.crt /usr/local/kong/ssl/
COPY --chown=kong:kong deployment/ssl-certs/kong-gateway.key /usr/local/kong/ssl/
COPY --chown=kong:kong deployment/ssl-certs/ca-certificates.crt /etc/ssl/certs/

# Set proper permissions for SSL files
RUN chmod 644 /usr/local/kong/ssl/kong-gateway.crt && \
    chmod 600 /usr/local/kong/ssl/kong-gateway.key && \
    chown kong:kong /usr/local/kong/ssl/*

# Create custom Kong configuration with HTTPS enforcement
RUN cat > /etc/kong/kong.conf << 'EOF'
# Kong Configuration - Security Dashboard
# Enhanced security configuration with HTTPS enforcement

# Basic Configuration
prefix = /usr/local/kong/
log_level = info
proxy_access_log = /usr/local/kong/logs/access.log
proxy_error_log = /usr/local/kong/logs/error.log
admin_access_log = /usr/local/kong/logs/admin_access.log
admin_error_log = /usr/local/kong/logs/admin_error.log

# Database Configuration (Declarative mode for production)
database = off
declarative_config = /etc/kong/declarative-config.yml

# Proxy Configuration with HTTPS enforcement
proxy_listen = 0.0.0.0:8000, 0.0.0.0:8443 ssl http2
admin_listen = 0.0.0.0:8001, 0.0.0.0:8444 ssl

# Force HTTPS redirects
# This addresses the HTTP to HTTPS vulnerability identified in security audit
trusted_ips = 0.0.0.0/0,::/0
real_ip_header = X-Forwarded-For
real_ip_recursive = on

# SSL Configuration
ssl_cert = /usr/local/kong/ssl/kong-gateway.crt
ssl_cert_key = /usr/local/kong/ssl/kong-gateway.key
ssl_protocols = TLSv1.2 TLSv1.3
ssl_ciphers = ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
ssl_prefer_server_ciphers = on
ssl_session_cache = shared:SSL:10m
ssl_session_timeout = 10m

# Admin SSL Configuration
admin_ssl_cert = /usr/local/kong/ssl/kong-gateway.crt
admin_ssl_cert_key = /usr/local/kong/ssl/kong-gateway.key

# Security Headers
headers = Server, X-Kong-Response-Latency

# Performance and Security
worker_processes = auto
worker_connections = 1024
upstream_keepalive_pool_size = 60
upstream_keepalive_max_requests = 100
upstream_keepalive_idle_timeout = 60s

# Plugins
plugins = bundled, request-transformer, response-transformer, cors, rate-limiting, jwt, oauth2, basic-auth, https-redirect

# NGINX directives for additional security
nginx_http_large_client_header_buffers = 4 16k
nginx_http_client_max_body_size = 10m
nginx_http_client_body_buffer_size = 128k

# Custom NGINX template for HTTPS redirects
nginx_http_include = /etc/kong/nginx-custom.conf
EOF

# Create custom NGINX configuration for HTTPS redirects
RUN cat > /etc/kong/nginx-custom.conf << 'EOF'
# Custom NGINX configuration for HTTPS enforcement
# Addresses security vulnerability: Kong HTTP to HTTPS redirect

# Security headers for all responses
more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
more_set_headers "X-Content-Type-Options: nosniff";
more_set_headers "X-Frame-Options: DENY";
more_set_headers "X-XSS-Protection: 1; mode=block";
more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';";

# Hide server information
more_clear_headers 'Server';
server_tokens off;

# Rate limiting by IP
limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=admin:10m rate=10r/m;

# Apply rate limiting
limit_req zone=api burst=50 nodelay;

# HTTPS redirect for port 8000 (HTTP)
server {
    listen 8000;
    server_name _;
    return 301 https://$host:8443$request_uri;
}

# HTTPS redirect for admin port 8001 (HTTP)
server {
    listen 8001;
    server_name _;
    return 301 https://$host:8444$request_uri;
}
EOF

# Create declarative configuration with security services
RUN cat > /etc/kong/declarative-config.yml << 'EOF'
_format_version: "3.0"
_transform: true

services:
  - name: security-dashboard-api
    url: http://security-dashboard-backend:4000
    plugins:
      - name: cors
        config:
          origins:
            - "https://security.candlefish.ai"
            - "https://dashboard.candlefish.ai"
          methods:
            - GET
            - POST
            - PUT
            - DELETE
            - OPTIONS
          headers:
            - Authorization
            - Content-Type
            - X-Requested-With
          credentials: true
          max_age: 3600
      - name: rate-limiting
        config:
          minute: 1000
          hour: 10000
          policy: local
      - name: request-transformer
        config:
          add:
            headers:
              - "X-Forwarded-Proto: https"
              - "X-Forwarded-Port: 8443"
      - name: response-transformer
        config:
          add:
            headers:
              - "Cache-Control: no-store, no-cache, must-revalidate, private"
              - "Pragma: no-cache"
              - "Expires: 0"

  - name: graphql-gateway
    url: http://graphql-gateway:4000
    plugins:
      - name: cors
        config:
          origins:
            - "https://security.candlefish.ai"
            - "https://dashboard.candlefish.ai"
          methods:
            - GET
            - POST
            - OPTIONS
          headers:
            - Authorization
            - Content-Type
            - X-Requested-With
          credentials: true
          max_age: 3600
      - name: rate-limiting
        config:
          minute: 500
          hour: 5000
          policy: local
      - name: request-transformer
        config:
          add:
            headers:
              - "X-Forwarded-Proto: https"

routes:
  - name: api-route
    service: security-dashboard-api
    hosts:
      - api.security.candlefish.ai
    paths:
      - /api
    https_redirect_status_code: 301
    preserve_host: true
    protocols:
      - https

  - name: graphql-route
    service: graphql-gateway
    hosts:
      - api.security.candlefish.ai
    paths:
      - /graphql
      - /subscriptions
    https_redirect_status_code: 301
    preserve_host: true
    protocols:
      - https

  - name: health-check
    service: security-dashboard-api
    hosts:
      - api.security.candlefish.ai
    paths:
      - /health
      - /.well-known/health
    https_redirect_status_code: 301
    preserve_host: true
    protocols:
      - https

plugins:
  - name: https-redirect
    config:
      https_redirect_status_code: 301

# Global rate limiting
  - name: rate-limiting
    config:
      minute: 2000
      hour: 20000
      policy: local
      fault_tolerant: true
      hide_client_headers: false

# Security headers plugin
  - name: response-transformer
    config:
      add:
        headers:
          - "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload"
          - "X-Content-Type-Options: nosniff"
          - "X-Frame-Options: DENY"
          - "X-XSS-Protection: 1; mode=block"
          - "Referrer-Policy: strict-origin-when-cross-origin"
EOF

# ============================================================================
# Production Runtime Stage
# ============================================================================
FROM security-config AS production

# Switch to Kong user
USER kong

# Health check with HTTPS validation
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -k -f https://localhost:8443/health || \
        curl -f http://localhost:8000/health || exit 1

# Environment variables for production
ENV KONG_DATABASE=off \
    KONG_DECLARATIVE_CONFIG=/etc/kong/declarative-config.yml \
    KONG_PROXY_ACCESS_LOG=/dev/stdout \
    KONG_ADMIN_ACCESS_LOG=/dev/stdout \
    KONG_PROXY_ERROR_LOG=/dev/stderr \
    KONG_ADMIN_ERROR_LOG=/dev/stderr \
    KONG_LOG_LEVEL=info \
    KONG_PLUGINS="bundled,cors,rate-limiting,request-transformer,response-transformer,jwt,oauth2,basic-auth" \
    KONG_ADMIN_LISTEN="0.0.0.0:8001, 0.0.0.0:8444 ssl" \
    KONG_PROXY_LISTEN="0.0.0.0:8000, 0.0.0.0:8443 ssl http2"

# Expose ports
EXPOSE 8000 8443 8001 8444

# Start Kong with security configuration
ENTRYPOINT ["kong", "start"]

# ============================================================================
# Development Stage - With admin GUI
# ============================================================================
FROM security-config AS development

# Install Kong Manager (Admin GUI)
USER root
RUN luarocks install kong-manager

USER kong

# Enable development features
ENV KONG_ADMIN_GUI_LISTEN="0.0.0.0:8002" \
    KONG_ADMIN_GUI_URL="http://localhost:8002" \
    KONG_LOG_LEVEL=debug

# Expose additional ports for development
EXPOSE 8002

# Start with development configuration
ENTRYPOINT ["kong", "start", "--run-migrations"]

# ============================================================================
# Build arguments and metadata
# ============================================================================
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

LABEL org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="Kong Gateway - Security Dashboard" \
      org.label-schema.description="API Gateway with HTTPS enforcement and security hardening" \
      org.label-schema.url="https://candlefish.ai" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/candlefish-ai/security-dashboard" \
      org.label-schema.vendor="Candlefish AI" \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0" \
      org.label-schema.docker.cmd="docker run -p 8000:8000 -p 8443:8443 -p 8001:8001 -p 8444:8444 security-dashboard/kong-gateway" \
      maintainer="patrick@candlefish.ai" \
      security.vulnerability-fix="HTTP-to-HTTPS-redirect" \
      security.audit-compliant="true"