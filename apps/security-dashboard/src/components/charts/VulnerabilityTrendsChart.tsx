import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  Typography,
  Box,
  ToggleButtonGroup,
  ToggleButton,
  IconButton,
  Tooltip,
} from '@mui/material';
import {
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  FullscreenOutlined as FullscreenIcon,
} from '@mui/icons-material';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  Legend,
  ResponsiveContainer,
  Area,
  AreaChart,
} from 'recharts';
import { getSeverityColor } from '@/theme/theme';

interface VulnerabilityTrend {
  date: string;
  critical: number;
  high: number;
  medium: number;
  low: number;
  total: number;
}

type TimeRange = '7d' | '30d' | '90d' | '1y';
type ChartType = 'line' | 'area';

const VulnerabilityTrendsChart: React.FC = () => {
  const [timeRange, setTimeRange] = useState<TimeRange>('30d');
  const [chartType, setChartType] = useState<ChartType>('area');
  const [data, setData] = useState<VulnerabilityTrend[]>([]);

  // Generate mock data based on time range
  useEffect(() => {
    const generateData = (range: TimeRange): VulnerabilityTrend[] => {
      const days = {
        '7d': 7,
        '30d': 30,
        '90d': 90,
        '1y': 365,
      }[range];

      const mockData: VulnerabilityTrend[] = [];
      const now = new Date();

      for (let i = days - 1; i >= 0; i--) {
        const date = new Date(now);
        date.setDate(date.getDate() - i);
        
        // Generate realistic vulnerability trends
        const critical = Math.floor(Math.random() * 15) + 5;
        const high = Math.floor(Math.random() * 25) + 15;
        const medium = Math.floor(Math.random() * 40) + 30;
        const low = Math.floor(Math.random() * 60) + 40;
        
        mockData.push({
          date: date.toISOString().split('T')[0],
          critical,
          high,
          medium,
          low,
          total: critical + high + medium + low,
        });
      }

      return mockData;
    };

    setData(generateData(timeRange));
  }, [timeRange]);

  const handleTimeRangeChange = (_: React.MouseEvent<HTMLElement>, newTimeRange: TimeRange | null) => {
    if (newTimeRange !== null) {
      setTimeRange(newTimeRange);
    }
  };

  const handleChartTypeChange = (_: React.MouseEvent<HTMLElement>, newChartType: ChartType | null) => {
    if (newChartType !== null) {
      setChartType(newChartType);
    }
  };

  // Calculate trend
  const calculateTrend = () => {
    if (data.length < 2) return { direction: 'neutral', percentage: 0 };
    
    const recent = data.slice(-7).reduce((sum, item) => sum + item.total, 0) / 7;
    const previous = data.slice(-14, -7).reduce((sum, item) => sum + item.total, 0) / 7;
    
    const change = ((recent - previous) / previous) * 100;
    
    return {
      direction: change > 0 ? 'up' : change < 0 ? 'down' : 'neutral',
      percentage: Math.abs(change),
    };
  };

  const trend = calculateTrend();

  const formatXAxisTick = (tickItem: string) => {
    const date = new Date(tickItem);
    if (timeRange === '7d') {
      return date.toLocaleDateString('en', { weekday: 'short', day: 'numeric' });
    } else if (timeRange === '30d') {
      return date.toLocaleDateString('en', { month: 'short', day: 'numeric' });
    } else {
      return date.toLocaleDateString('en', { month: 'short', year: '2-digit' });
    }
  };

  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <Box
          sx={{
            backgroundColor: 'background.paper',
            border: '1px solid #333',
            borderRadius: 1,
            p: 2,
            boxShadow: 2,
          }}
        >
          <Typography variant="subtitle2" sx={{ mb: 1 }}>
            {new Date(label).toLocaleDateString()}
          </Typography>
          {payload.map((entry: any, index: number) => (
            <Box key={index} sx={{ display: 'flex', alignItems: 'center', mb: 0.5 }}>
              <Box
                sx={{
                  width: 12,
                  height: 12,
                  backgroundColor: entry.color,
                  borderRadius: '50%',
                  mr: 1,
                }}
              />
              <Typography variant="body2">
                {entry.dataKey}: {entry.value}
              </Typography>
            </Box>
          ))}
          <Box sx={{ borderTop: '1px solid #333', pt: 1, mt: 1 }}>
            <Typography variant="body2" fontWeight="bold">
              Total: {payload.reduce((sum: number, entry: any) => sum + entry.value, 0)}
            </Typography>
          </Box>
        </Box>
      );
    }
    return null;
  };

  const renderChart = () => {
    const commonProps = {
      data,
      margin: { top: 5, right: 30, left: 20, bottom: 5 },
    };

    if (chartType === 'area') {
      return (
        <AreaChart {...commonProps}>
          <CartesianGrid strokeDasharray="3 3" stroke="#333" />
          <XAxis
            dataKey="date"
            tickFormatter={formatXAxisTick}
            stroke="#666"
            fontSize={12}
          />
          <YAxis stroke="#666" fontSize={12} />
          <RechartsTooltip content={<CustomTooltip />} />
          <Legend />
          <Area
            type="monotone"
            dataKey="critical"
            stackId="1"
            stroke={getSeverityColor('CRITICAL')}
            fill={getSeverityColor('CRITICAL')}
            fillOpacity={0.8}
          />
          <Area
            type="monotone"
            dataKey="high"
            stackId="1"
            stroke={getSeverityColor('HIGH')}
            fill={getSeverityColor('HIGH')}
            fillOpacity={0.8}
          />
          <Area
            type="monotone"
            dataKey="medium"
            stackId="1"
            stroke={getSeverityColor('MEDIUM')}
            fill={getSeverityColor('MEDIUM')}
            fillOpacity={0.8}
          />
          <Area
            type="monotone"
            dataKey="low"
            stackId="1"
            stroke={getSeverityColor('LOW')}
            fill={getSeverityColor('LOW')}
            fillOpacity={0.8}
          />
        </AreaChart>
      );
    }

    return (
      <LineChart {...commonProps}>
        <CartesianGrid strokeDasharray="3 3" stroke="#333" />
        <XAxis
          dataKey="date"
          tickFormatter={formatXAxisTick}
          stroke="#666"
          fontSize={12}
        />
        <YAxis stroke="#666" fontSize={12} />
        <RechartsTooltip content={<CustomTooltip />} />
        <Legend />
        <Line
          type="monotone"
          dataKey="critical"
          stroke={getSeverityColor('CRITICAL')}
          strokeWidth={2}
          dot={{ fill: getSeverityColor('CRITICAL'), strokeWidth: 2, r: 4 }}
        />
        <Line
          type="monotone"
          dataKey="high"
          stroke={getSeverityColor('HIGH')}
          strokeWidth={2}
          dot={{ fill: getSeverityColor('HIGH'), strokeWidth: 2, r: 4 }}
        />
        <Line
          type="monotone"
          dataKey="medium"
          stroke={getSeverityColor('MEDIUM')}
          strokeWidth={2}
          dot={{ fill: getSeverityColor('MEDIUM'), strokeWidth: 2, r: 4 }}
        />
        <Line
          type="monotone"
          dataKey="low"
          stroke={getSeverityColor('LOW')}
          strokeWidth={2}
          dot={{ fill: getSeverityColor('LOW'), strokeWidth: 2, r: 4 }}
        />
      </LineChart>
    );
  };

  return (
    <Card sx={{ height: 400 }}>
      <CardContent sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Box>
            <Typography variant="h6">Vulnerability Trends</Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', mt: 0.5 }}>
              {trend.direction === 'up' ? (
                <TrendingUpIcon sx={{ color: 'error.main', fontSize: 16, mr: 0.5 }} />
              ) : trend.direction === 'down' ? (
                <TrendingDownIcon sx={{ color: 'success.main', fontSize: 16, mr: 0.5 }} />
              ) : null}
              <Typography
                variant="caption"
                color={trend.direction === 'up' ? 'error.main' : 'success.main'}
              >
                {trend.direction === 'up' ? '+' : trend.direction === 'down' ? '-' : ''}
                {trend.percentage.toFixed(1)}% from last period
              </Typography>
            </Box>
          </Box>
          <Tooltip title="Fullscreen">
            <IconButton size="small">
              <FullscreenIcon />
            </IconButton>
          </Tooltip>
        </Box>

        {/* Controls */}
        <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
          <ToggleButtonGroup
            value={timeRange}
            exclusive
            onChange={handleTimeRangeChange}
            size="small"
          >
            <ToggleButton value="7d">7D</ToggleButton>
            <ToggleButton value="30d">30D</ToggleButton>
            <ToggleButton value="90d">90D</ToggleButton>
            <ToggleButton value="1y">1Y</ToggleButton>
          </ToggleButtonGroup>

          <ToggleButtonGroup
            value={chartType}
            exclusive
            onChange={handleChartTypeChange}
            size="small"
          >
            <ToggleButton value="line">Line</ToggleButton>
            <ToggleButton value="area">Area</ToggleButton>
          </ToggleButtonGroup>
        </Box>

        {/* Chart */}
        <Box sx={{ flex: 1, minHeight: 0 }}>
          <ResponsiveContainer width="100%" height="100%">
            {renderChart()}
          </ResponsiveContainer>
        </Box>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityTrendsChart;