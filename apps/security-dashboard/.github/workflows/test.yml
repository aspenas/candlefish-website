name: Security Dashboard Test Suite

on:
  push:
    branches: [main, develop, feature/*]
    paths:
      - 'apps/security-dashboard/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/security-dashboard/**'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - 'unit'
          - 'integration'
          - 'e2e'
          - 'performance'
          - 'security'
          - 'all'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  WORKING_DIRECTORY: 'apps/security-dashboard'

jobs:
  # Quality Gate - Fast feedback
  quality-gate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm install --frozen-lockfile
        
      - name: Type check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm run type-check
        
      - name: Lint
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm run lint
        
      - name: Format check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm run format:check

  # Unit Tests - Fast execution
  unit-tests:
    runs-on: ubuntu-latest
    needs: quality-gate
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: ['16', '18', '20']
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm install --frozen-lockfile
        
      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm run test:unit --coverage
        env:
          CI: true
          
      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-${{ matrix.node-version }}
          path: |
            ${{ env.WORKING_DIRECTORY }}/coverage/
            ${{ env.WORKING_DIRECTORY }}/test-results/
          retention-days: 7
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18'
        with:
          file: ${{ env.WORKING_DIRECTORY }}/coverage/lcov.info
          flags: unit-tests
          name: unit-tests-coverage
          fail_ci_if_error: false

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: quality-gate
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test-password
          POSTGRES_USER: test-user
          POSTGRES_DB: security-dashboard-test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm install --frozen-lockfile
        
      - name: Setup test database
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          psql -h localhost -U test-user -d security-dashboard-test -f schema.sql || true
        env:
          PGPASSWORD: test-password
          
      - name: Run integration tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm run test:integration --coverage
        env:
          CI: true
          DATABASE_URL: postgresql://test-user:test-password@localhost:5432/security-dashboard-test
          REDIS_URL: redis://localhost:6379
          
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            ${{ env.WORKING_DIRECTORY }}/coverage/
            ${{ env.WORKING_DIRECTORY }}/test-results/
          retention-days: 7

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    timeout-minutes: 30
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm install --frozen-lockfile
        
      - name: Install Playwright Browsers
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm exec playwright install --with-deps ${{ matrix.browser }}
        
      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm run build
        
      - name: Start test server
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          pnpm run preview &
          echo "SERVER_PID=$!" >> $GITHUB_ENV
          npx wait-on http://localhost:3000
        
      - name: Run E2E tests - Playwright
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm exec playwright test --project=${{ matrix.browser }}
        env:
          CI: true
          
      - name: Run E2E tests - Cypress
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm run test:e2e:cypress:headless
        env:
          CI: true
          CYPRESS_BROWSER: ${{ matrix.browser == 'chromium' && 'chrome' || matrix.browser == 'webkit' && 'webkit' || 'firefox' }}
        if: matrix.browser != 'webkit' # Cypress doesn't support WebKit
        
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            ${{ env.WORKING_DIRECTORY }}/test-results/
            ${{ env.WORKING_DIRECTORY }}/playwright-report/
            ${{ env.WORKING_DIRECTORY }}/cypress/videos/
            ${{ env.WORKING_DIRECTORY }}/cypress/screenshots/
          retention-days: 7

  # Accessibility Tests
  accessibility-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm install --frozen-lockfile
        
      - name: Install Playwright
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm exec playwright install --with-deps chromium
        
      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm run build
        
      - name: Start test server
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          pnpm run preview &
          npx wait-on http://localhost:3000
        
      - name: Run accessibility tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm run test:accessibility
        
      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: |
            ${{ env.WORKING_DIRECTORY }}/accessibility-report/
          retention-days: 7

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    timeout-minutes: 45
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm install --frozen-lockfile
        
      - name: Install K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm run build
        
      - name: Start application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          pnpm run preview &
          npx wait-on http://localhost:3000
        
      - name: Run performance tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          k6 run __tests__/performance/k6/comprehensive-load-test.js --out json=performance-results.json
          k6 run __tests__/performance/k6/websocket-stress-test.js --out json=websocket-results.json
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:4000
          
      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            ${{ env.WORKING_DIRECTORY }}/performance-results.json
            ${{ env.WORKING_DIRECTORY }}/websocket-results.json
          retention-days: 14

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    timeout-minutes: 60
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'security' || github.event.inputs.test_type == 'all'
    services:
      zap:
        image: owasp/zap2docker-stable
        options: >-
          --user root
          -v /tmp:/zap/wrk/:rw
        ports:
          - 8080:8080
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm install --frozen-lockfile
        
      - name: Install K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm run build
        
      - name: Start application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          pnpm run preview &
          npx wait-on http://localhost:3000
        
      - name: Wait for OWASP ZAP
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:8080; do sleep 2; done'
        
      - name: Run security vulnerability tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          k6 run __tests__/security/vulnerability-scanner.js --out json=security-results.json
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:4000
          
      - name: Run OWASP ZAP security scan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          k6 run __tests__/security/owasp-zap-integration.js --out json=zap-results.json
        env:
          TARGET_URL: http://localhost:3000
          ZAP_API_URL: http://localhost:8080
          ZAP_API_KEY: security-dashboard-test-key
          
      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            ${{ env.WORKING_DIRECTORY }}/security-results.json
            ${{ env.WORKING_DIRECTORY }}/zap-results.json
            /tmp/zap-report.html
          retention-days: 30

  # Coverage Merge and Report
  coverage-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          pattern: unit-test-results-*
          path: coverage/unit/
          merge-multiple: true
          
      - name: Download integration test coverage
        uses: actions/download-artifact@v4
        with:
          name: integration-test-results
          path: coverage/integration/
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm install --frozen-lockfile
        
      - name: Merge coverage reports
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npx nyc merge coverage/unit/ coverage/merged-unit.json
          npx nyc merge coverage/integration/ coverage/merged-integration.json
          npx nyc merge coverage/ coverage/final.json
          npx nyc report --reporter=html --reporter=lcov --reporter=text --reporter=json-summary
          
      - name: Generate coverage badge
        uses: codecov/codecov-action@v3
        with:
          file: ${{ env.WORKING_DIRECTORY }}/coverage/lcov.info
          flags: merged-coverage
          name: merged-coverage
          
      - name: Upload merged coverage
        uses: actions/upload-artifact@v4
        with:
          name: merged-coverage-report
          path: ${{ env.WORKING_DIRECTORY }}/coverage/
          retention-days: 30
          
      - name: Coverage threshold check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          COVERAGE=$(node -pe "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.lines.pct")
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 80% threshold"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets 80% threshold"
          fi

  # Test Summary and Notification
  test-summary:
    runs-on: ubuntu-latest
    needs: [quality-gate, unit-tests, integration-tests, e2e-tests, accessibility-tests, coverage-report]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Test Results Summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate | ${{ needs.quality-gate.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility Tests | ${{ needs.accessibility-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage Report | ${{ needs.coverage-report.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.performance-tests.result }}" != "" ]]; then
            echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.security-tests.result }}" != "" ]]; then
            echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View detailed test reports in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 Security Dashboard tests failed!
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Failed jobs:
            ${{ needs.quality-gate.result != 'success' && '• Quality Gate\n' || '' }}
            ${{ needs.unit-tests.result != 'success' && '• Unit Tests\n' || '' }}
            ${{ needs.integration-tests.result != 'success' && '• Integration Tests\n' || '' }}
            ${{ needs.e2e-tests.result != 'success' && '• E2E Tests\n' || '' }}
            ${{ needs.accessibility-tests.result != 'success' && '• Accessibility Tests\n' || '' }}
            ${{ needs.coverage-report.result != 'success' && '• Coverage Report\n' || '' }}
            
            View details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.SLACK_WEBHOOK_URL != ''