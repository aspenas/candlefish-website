# Production Dockerfile for RTPM API Service
# Multi-stage build for optimal image size and security

# Build arguments for metadata
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Stage 1: Base image with security updates
FROM python:3.11-slim AS base

# Install system dependencies and security updates
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
        curl \
        dumb-init \
        gcc \
        libc6-dev \
        libpq-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    pip install --upgrade pip setuptools wheel

# Stage 2: Dependencies installation
FROM base AS deps
WORKDIR /app

# Create virtual environment for isolation
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy dependency files
COPY requirements.txt requirements-production.txt* ./

# Install Python dependencies with optimizations
RUN pip install --no-cache-dir --compile \
        -r requirements.txt && \
    if [ -f requirements-production.txt ]; then \
        pip install --no-cache-dir --compile -r requirements-production.txt; \
    fi && \
    pip cache purge

# Stage 3: Builder stage
FROM deps AS builder
WORKDIR /app

# Copy source code
COPY . .

# Run security checks and linting
RUN pip install --no-cache-dir ruff bandit safety && \
    ruff check . || echo "Linting issues found" && \
    bandit -r . -f json -o bandit-report.json || echo "Security issues found" && \
    safety check || echo "Vulnerability issues found"

# Compile Python files for better performance
RUN python -m compileall . -q

# Stage 4: Runner stage - final production image
FROM base AS runner
WORKDIR /app

# Create non-root user for security
RUN groupadd --gid 1001 apiuser && \
    useradd --uid 1001 --gid apiuser --shell /bin/sh --create-home apiuser

# Copy virtual environment and dependencies
COPY --from=deps --chown=apiuser:apiuser /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy application code
COPY --from=builder --chown=apiuser:apiuser /app /app

# Create necessary directories
RUN mkdir -p /app/logs /app/tmp && \
    chown -R apiuser:apiuser /app

# Set security-focused environment variables
ENV PYTHONPATH=/app
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONHASHSEED=random
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Create healthcheck script
RUN echo '#!/bin/sh\ncurl -f http://localhost:8000/health || exit 1' > /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh && \
    chown apiuser:apiuser /app/healthcheck.sh

# Switch to non-root user
USER apiuser

# Expose port
EXPOSE 8000

# Add labels for metadata
LABEL maintainer="Candlefish.ai <dev@candlefish.ai>"
LABEL org.opencontainers.image.title="RTPM API Service"
LABEL org.opencontainers.image.description="Real-time Performance Monitoring API"
LABEL org.opencontainers.image.version=${VERSION}
LABEL org.opencontainers.image.created=${BUILD_DATE}
LABEL org.opencontainers.image.revision=${VCS_REF}
LABEL org.opencontainers.image.source="https://github.com/candlefish-ai/brand"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD /app/healthcheck.sh

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]