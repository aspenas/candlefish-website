# Nginx reverse proxy configuration for candlefish.ai subdomains
# Development and production ready configuration

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=analytics_limit:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=config_limit:10m rate=2r/s;

# Upstream definitions
upstream api_backend {
    least_conn;
    server 127.0.0.1:8000 max_fails=3 fail_timeout=30s;
    # Add more servers for production
    # server 10.0.1.10:8000 max_fails=3 fail_timeout=30s;
    # server 10.0.1.11:8000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream analytics_backend {
    least_conn;
    server 127.0.0.1:8001 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream router_backend {
    least_conn;
    server 127.0.0.1:8002 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream monitor_backend {
    least_conn;
    server 127.0.0.1:8003 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream config_backend {
    least_conn;
    server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# Security headers map
map $sent_http_content_type $content_type_csp {
    ~text/html "default-src 'self'; script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' https://fonts.gstatic.com; connect-src 'self' wss: https:; frame-ancestors 'none';";
    default "";
}

# API Server - api.candlefish.ai
server {
    listen 80;
    listen 443 ssl http2;
    server_name api.candlefish.ai;

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/api.candlefish.ai/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.candlefish.ai/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy $content_type_csp always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # CORS headers for API
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
    add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;

    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
        add_header Access-Control-Max-Age 1728000;
        add_header Content-Type 'text/plain; charset=utf-8';
        add_header Content-Length 0;
        return 204;
    }

    # Rate limiting
    limit_req zone=api_limit burst=20 nodelay;
    limit_req_status 429;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Metrics endpoint (restricted access)
    location /metrics {
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        proxy_pass http://api_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # API routes
    location / {
        proxy_pass http://api_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
    }

    # Redirect HTTP to HTTPS
    if ($scheme != "https") {
        return 301 https://$server_name$request_uri;
    }

    # Logging
    access_log /var/log/nginx/api.candlefish.ai.access.log combined;
    error_log /var/log/nginx/api.candlefish.ai.error.log warn;
}

# Analytics Engine - analytics.candlefish.ai
server {
    listen 80;
    listen 443 ssl http2;
    server_name analytics.candlefish.ai;

    # SSL Configuration (shared certificate)
    ssl_certificate /etc/letsencrypt/live/api.candlefish.ai/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.candlefish.ai/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Rate limiting
    limit_req zone=analytics_limit burst=10 nodelay;

    location / {
        proxy_pass http://analytics_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Redirect HTTP to HTTPS
    if ($scheme != "https") {
        return 301 https://$server_name$request_uri;
    }

    access_log /var/log/nginx/analytics.candlefish.ai.access.log combined;
    error_log /var/log/nginx/analytics.candlefish.ai.error.log warn;
}

# Model Router - router.candlefish.ai
server {
    listen 80;
    listen 443 ssl http2;
    server_name router.candlefish.ai;

    ssl_certificate /etc/letsencrypt/live/api.candlefish.ai/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.candlefish.ai/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        proxy_pass http://router_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Longer timeouts for AI model requests
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 120s;
    }

    if ($scheme != "https") {
        return 301 https://$server_name$request_uri;
    }

    access_log /var/log/nginx/router.candlefish.ai.access.log combined;
    error_log /var/log/nginx/router.candlefish.ai.error.log warn;
}

# Error Monitor - monitor.candlefish.ai
server {
    listen 80;
    listen 443 ssl http2;
    server_name monitor.candlefish.ai;

    ssl_certificate /etc/letsencrypt/live/api.candlefish.ai/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.candlefish.ai/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        proxy_pass http://monitor_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    if ($scheme != "https") {
        return 301 https://$server_name$request_uri;
    }

    access_log /var/log/nginx/monitor.candlefish.ai.access.log combined;
    error_log /var/log/nginx/monitor.candlefish.ai.error.log warn;
}

# Web Dashboard - config.candlefish.ai
server {
    listen 80;
    listen 443 ssl http2;
    server_name config.candlefish.ai;

    ssl_certificate /etc/letsencrypt/live/api.candlefish.ai/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.candlefish.ai/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    # Security headers for web application
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Rate limiting for dashboard
    limit_req zone=config_limit burst=5 nodelay;

    # Static assets caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Cache-Status "STATIC";
    }

    location / {
        proxy_pass http://config_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    if ($scheme != "https") {
        return 301 https://$server_name$request_uri;
    }

    access_log /var/log/nginx/config.candlefish.ai.access.log combined;
    error_log /var/log/nginx/config.candlefish.ai.error.log warn;
}