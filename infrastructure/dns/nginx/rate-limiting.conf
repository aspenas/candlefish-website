# Rate limiting configuration for candlefish.ai services
# Include this in the http block of nginx.conf

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_global:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api_burst:10m rate=50r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=2r/s;
limit_req_zone $binary_remote_addr zone=analytics_limit:10m rate=20r/m;
limit_req_zone $binary_remote_addr zone=config_limit:10m rate=30r/m;

# Rate limiting by API key
limit_req_zone $http_x_api_key zone=api_key_limit:10m rate=100r/s;

# Rate limiting by user ID (requires custom header)
limit_req_zone $http_x_user_id zone=user_limit:10m rate=60r/m;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
limit_conn_zone $server_name zone=conn_limit_per_server:10m;

# Map for rate limit exemptions
geo $rate_limit_exempt {
    default 0;
    
    # Internal networks
    10.0.0.0/8 1;
    172.16.0.0/12 1;
    192.168.0.0/16 1;
    127.0.0.1/32 1;
    
    # Monitoring services
    # Add specific monitoring IPs here
    # 1.2.3.4/32 1;
}

# Map for API endpoints
map $request_uri $api_rate_zone {
    default "api_global";
    
    ~^/api/v1/auth/ "auth_limit";
    ~^/api/v1/upload/ "upload_limit";
    ~^/api/v1/analytics/ "analytics_limit";
    ~\.(jpg|jpeg|png|gif|css|js|ico|svg)$ "static_limit";
}

# Rate limiting rules for API endpoints
location /api/ {
    # Skip rate limiting for exempt IPs
    if ($rate_limit_exempt) {
        set $skip_limit 1;
    }
    
    # Global API rate limiting
    limit_req zone=api_global burst=20 nodelay;
    limit_req_status 429;
    
    # Connection limiting
    limit_conn conn_limit_per_ip 10;
    limit_conn conn_limit_per_server 100;
    
    # Add rate limit headers
    add_header X-RateLimit-Limit "600" always;
    add_header X-RateLimit-Window "60" always;
    
    # Custom rate limiting based on endpoint
    location ~ ^/api/v1/auth/(login|register|reset) {
        limit_req zone=auth_limit burst=2 nodelay;
        limit_req_status 429;
        
        add_header X-RateLimit-Limit "5" always;
        add_header X-RateLimit-Window "60" always;
        
        proxy_pass http://api_backend;
    }
    
    location ~ ^/api/v1/upload/ {
        # Stricter limits for upload endpoints
        limit_req zone=upload_limit burst=5 nodelay;
        limit_req_status 429;
        
        # Larger body size for uploads
        client_max_body_size 100m;
        client_body_timeout 300s;
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        
        add_header X-RateLimit-Limit "2" always;
        add_header X-RateLimit-Window "1" always;
        
        proxy_pass http://api_backend;
    }
    
    location ~ ^/api/v1/analytics/ {
        limit_req zone=analytics_limit burst=5 nodelay;
        limit_req_status 429;
        
        add_header X-RateLimit-Limit "20" always;
        add_header X-RateLimit-Window "60" always;
        
        proxy_pass http://analytics_backend;
    }
    
    # Default API handling
    proxy_pass http://api_backend;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

# Rate limiting for config/admin interface
location /admin/ {
    limit_req zone=config_limit burst=10 nodelay;
    limit_req_status 429;
    
    # Additional security for admin
    limit_conn conn_limit_per_ip 3;
    
    add_header X-RateLimit-Limit "30" always;
    add_header X-RateLimit-Window "60" always;
    
    proxy_pass http://config_backend;
}

# WebSocket rate limiting
location /ws {
    # Limit WebSocket connections per IP
    limit_conn conn_limit_per_ip 5;
    
    proxy_pass http://api_backend;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
}

# Custom error page for rate limiting
error_page 429 @rate_limit_error;

location @rate_limit_error {
    internal;
    
    add_header Content-Type application/json always;
    add_header Retry-After 60 always;
    add_header X-RateLimit-Limit "600" always;
    add_header X-RateLimit-Window "60" always;
    
    return 429 '{
        "error": "rate_limit_exceeded",
        "message": "Too many requests. Please try again later.",
        "retry_after": 60,
        "timestamp": "$time_iso8601"
    }';
}

# Rate limiting for static assets (more lenient)
limit_req_zone $binary_remote_addr zone=static_limit:10m rate=30r/s;

location ~* \.(jpg|jpeg|png|gif|css|js|ico|svg|woff|woff2|ttf|eot)$ {
    limit_req zone=static_limit burst=50 nodelay;
    
    # Cache static assets
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header X-Cache-Status "STATIC";
    
    try_files $uri =404;
}

# Monitoring endpoint (no rate limiting)
location /nginx-status {
    stub_status on;
    access_log off;
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    deny all;
}

# Health check (no rate limiting)
location /health {
    access_log off;
    return 200 "healthy\n";
    add_header Content-Type text/plain;
}