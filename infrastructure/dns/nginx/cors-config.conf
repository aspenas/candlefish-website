# CORS configuration for candlefish.ai API endpoints
# Include this file in server blocks that need CORS

# Map to determine CORS origin
map $http_origin $cors_origin {
    default "";
    
    # Production domains
    "https://candlefish.ai" "https://candlefish.ai";
    "https://www.candlefish.ai" "https://www.candlefish.ai";
    "https://app.candlefish.ai" "https://app.candlefish.ai";
    "https://config.candlefish.ai" "https://config.candlefish.ai";
    
    # Development domains
    "http://localhost:3000" "http://localhost:3000";
    "http://localhost:5173" "http://localhost:5173";
    "http://127.0.0.1:3000" "http://127.0.0.1:3000";
    "http://127.0.0.1:5173" "http://127.0.0.1:5173";
    
    # Netlify preview domains
    "~^https://[a-zA-Z0-9-]+--candlefish\.netlify\.app$" $http_origin;
    "~^https://deploy-preview-[0-9]+--candlefish\.netlify\.app$" $http_origin;
    
    # Vercel preview domains
    "~^https://candlefish-[a-zA-Z0-9-]+\.vercel\.app$" $http_origin;
}

# CORS headers for API endpoints
location ~ ^/(api|v1)/ {
    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-API-Key,X-Client-Version' always;
        add_header Access-Control-Allow-Credentials 'true' always;
        add_header Access-Control-Max-Age 86400 always;
        add_header Content-Type 'text/plain; charset=utf-8';
        add_header Content-Length 0;
        return 204;
    }
    
    # Regular CORS headers
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
    add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-API-Key,X-Client-Version' always;
    add_header Access-Control-Allow-Credentials 'true' always;
    add_header Access-Control-Expose-Headers 'Content-Length,Content-Range,X-RateLimit-Limit,X-RateLimit-Remaining,X-RateLimit-Reset' always;
    
    # Continue with normal proxy pass
    try_files $uri @backend;
}

# CORS headers for WebSocket connections
location /ws {
    # WebSocket specific CORS
    add_header Access-Control-Allow-Origin $cors_origin always;
    add_header Access-Control-Allow-Credentials 'true' always;
    
    proxy_pass http://backend;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # WebSocket timeouts
    proxy_read_timeout 86400;
    proxy_send_timeout 86400;
}

# Relaxed CORS for public endpoints (read-only)
location ~ ^/(docs|openapi|swagger)/ {
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods 'GET, OPTIONS' always;
    add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
    add_header Access-Control-Max-Age 86400 always;
    
    if ($request_method = 'OPTIONS') {
        add_header Content-Type 'text/plain; charset=utf-8';
        add_header Content-Length 0;
        return 204;
    }
    
    try_files $uri @backend;
}

# No CORS for admin endpoints (same-origin only)
location ~ ^/(admin|internal)/ {
    # Explicitly deny CORS
    add_header Access-Control-Allow-Origin "" always;
    
    # Additional security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    
    try_files $uri @backend;
}