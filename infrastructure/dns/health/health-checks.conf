# Health check configuration for candlefish.ai services
# Include this in nginx configuration

# Health check endpoints for each service
location /health {
    access_log off;
    
    # Allow health checks from load balancers and monitoring
    allow 10.0.0.0/8;        # Private networks
    allow 172.16.0.0/12;     # Private networks
    allow 192.168.0.0/16;    # Private networks
    allow 127.0.0.1;         # Localhost
    allow ::1;               # IPv6 localhost
    
    # AWS health check IP ranges
    allow 54.239.98.0/24;    # US-East-1
    allow 54.239.100.0/24;   # US-East-1
    allow 54.240.155.0/24;   # US-East-1
    
    # Cloudflare IP ranges (for proxy health checks)
    include /etc/nginx/cloudflare-ips.conf;
    
    deny all;
    
    # Return simple health status
    return 200 '{"status":"healthy","timestamp":"$time_iso8601","service":"$server_name"}\n';
    add_header Content-Type application/json;
    add_header Cache-Control "no-cache, no-store, must-revalidate";
}

# Detailed health check with service metrics
location /health/detailed {
    access_log off;
    
    # Restrict to internal monitoring only
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    allow 127.0.0.1;
    deny all;
    
    proxy_pass http://localhost:$backend_port/health;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_connect_timeout 5s;
    proxy_read_timeout 5s;
    proxy_send_timeout 5s;
}

# Readiness probe for Kubernetes
location /ready {
    access_log off;
    
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    allow 127.0.0.1;
    deny all;
    
    # Check if backend service is responding
    proxy_pass http://localhost:$backend_port/ready;
    proxy_connect_timeout 2s;
    proxy_read_timeout 2s;
    proxy_send_timeout 2s;
    
    # Return 503 if backend is not ready
    error_page 502 503 504 = @service_unavailable;
}

# Liveness probe for Kubernetes
location /live {
    access_log off;
    
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    allow 127.0.0.1;
    deny all;
    
    return 200 '{"status":"alive","service":"$server_name"}\n';
    add_header Content-Type application/json;
}

# Service unavailable handler
location @service_unavailable {
    return 503 '{"status":"unavailable","service":"$server_name","timestamp":"$time_iso8601"}\n';
    add_header Content-Type application/json;
    add_header Retry-After 30;
}

# Nginx status for monitoring (restricted)
location /nginx-status {
    access_log off;
    
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    deny all;
    
    stub_status on;
}

# Service-specific health endpoints
location ~ ^/health/(api|analytics|router|monitor|config)$ {
    access_log off;
    
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    allow 127.0.0.1;
    deny all;
    
    set $service_name $1;
    set $service_port 8000;
    
    # Map service names to ports
    if ($service_name = "analytics") {
        set $service_port 8001;
    }
    if ($service_name = "router") {
        set $service_port 8002;
    }
    if ($service_name = "monitor") {
        set $service_port 8003;
    }
    if ($service_name = "config") {
        set $service_port 3000;
    }
    
    proxy_pass http://127.0.0.1:$service_port/health;
    proxy_set_header Host $host;
    proxy_connect_timeout 5s;
    proxy_read_timeout 5s;
    proxy_send_timeout 5s;
}