[0m[1mrandom_password.redis_password: Refreshing state... [id=none][0m
[0m[1mrandom_password.database_password: Refreshing state... [id=none][0m
[0m[1mdata.aws_availability_zones.available: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks_admins_iam_role.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["general"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.candlefish_irsa.data.aws_region.current: Reading...[0m[0m
[0m[1mdata.aws_region.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["general"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["general"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.candlefish_irsa.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.eks.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mdata.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1maws_kms_key.eks: Refreshing state... [id=97320723-812f-4e6f-8e6d-e1b42dea5a04][0m
[0m[1mmodule.candlefish_irsa.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.candlefish_irsa.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.vpc.aws_vpc.this[0]: Refreshing state... [id=vpc-0f32ba017bb5a6504][0m
[0m[1mmodule.candlefish_irsa.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks_admins_iam_role.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks_admins_iam_role.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["general"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["general"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2764486067][0m
[0m[1mmodule.eks.module.eks_managed_node_group["general"].data.aws_caller_identity.current: Read complete after 0s [id=681214184463][0m
[0m[1mmodule.eks.data.aws_caller_identity.current: Read complete after 0s [id=681214184463][0m
[0m[1mmodule.eks.data.aws_iam_session_context.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_session_context.current: Read complete after 0s [id=arn:aws:iam::681214184463:user/patrick-smith][0m
[0m[1mmodule.eks_admins_iam_role.data.aws_caller_identity.current: Read complete after 1s [id=681214184463][0m
[0m[1mmodule.candlefish_irsa.data.aws_caller_identity.current: Read complete after 1s [id=681214184463][0m
[0m[1mdata.aws_caller_identity.current: Read complete after 1s [id=681214184463][0m
[0m[1mmodule.eks_admins_iam_role.data.aws_iam_policy_document.assume_role_with_mfa[0]: Reading...[0m[0m
[0m[1mmodule.eks_admins_iam_role.data.aws_iam_policy_document.assume_role_with_mfa[0]: Read complete after 0s [id=1656284658][0m
[0m[1mdata.aws_availability_zones.available: Read complete after 1s [id=us-east-1][0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current[0]: Read complete after 0s [id=681214184463][0m
[0m[1mmodule.vpc.aws_default_route_table.default[0]: Refreshing state... [id=rtb-07444d7720a336740][0m
[0m[1mmodule.vpc.aws_default_security_group.this[0]: Refreshing state... [id=sg-09fd74e5133251def][0m
[0m[1maws_security_group.rds: Refreshing state... [id=sg-0a1b45d7a8c2a76b7][0m
[0m[1maws_security_group.elasticache: Refreshing state... [id=sg-0f9a63be6d815a9bf][0m
[0m[1mmodule.vpc.aws_default_network_acl.this[0]: Refreshing state... [id=acl-00e39419b28caaf4d][0m
[0m[1mmodule.vpc.aws_route_table.private[0]: Refreshing state... [id=rtb-0fad9b20db08f9abe][0m
[0m[1mmodule.vpc.aws_subnet.public[0]: Refreshing state... [id=subnet-072a0551ff74b2252][0m
[0m[1mmodule.vpc.aws_subnet.public[1]: Refreshing state... [id=subnet-0c6c8b6ca885adea5][0m
[0m[1mmodule.vpc.aws_subnet.public[2]: Refreshing state... [id=subnet-0621274286c54c0c1][0m
[0m[1mmodule.vpc.aws_route_table.public[0]: Refreshing state... [id=rtb-0eb199393a56d9a4f][0m
[0m[1mmodule.vpc.aws_subnet.private[0]: Refreshing state... [id=subnet-095589df6a9b86584][0m
[0m[1mmodule.vpc.aws_subnet.private[1]: Refreshing state... [id=subnet-0a18da8ca4dd2f0f5][0m
[0m[1mmodule.vpc.aws_subnet.private[2]: Refreshing state... [id=subnet-08973640d552da4b5][0m
[0m[1mmodule.vpc.aws_subnet.database[2]: Refreshing state... [id=subnet-068b8822b5a3711e5][0m
[0m[1mmodule.vpc.aws_subnet.database[1]: Refreshing state... [id=subnet-0cae6a33089a80e45][0m
[0m[1mmodule.vpc.aws_subnet.database[0]: Refreshing state... [id=subnet-072b7957ad952eb44][0m
[0m[1mmodule.vpc.aws_internet_gateway.this[0]: Refreshing state... [id=igw-00e1867503b5c0b5c][0m
[0m[1mmodule.vpc.aws_route_table_association.public[2]: Refreshing state... [id=rtbassoc-01af13930c40870c6][0m
[0m[1mmodule.vpc.aws_route_table_association.public[1]: Refreshing state... [id=rtbassoc-013f1dc1b9a1e2542][0m
[0m[1mmodule.vpc.aws_route_table_association.public[0]: Refreshing state... [id=rtbassoc-031a2b144beae69fe][0m
[0m[1mmodule.vpc.aws_route_table_association.private[2]: Refreshing state... [id=rtbassoc-03df5dc0a8edd756b][0m
[0m[1mmodule.vpc.aws_route_table_association.private[0]: Refreshing state... [id=rtbassoc-05d901fd2883c311e][0m
[0m[1mmodule.vpc.aws_route_table_association.private[1]: Refreshing state... [id=rtbassoc-0da31c8aa8fcf9d3a][0m
[0m[1mmodule.vpc.aws_route.public_internet_gateway[0]: Refreshing state... [id=r-rtb-0eb199393a56d9a4f1080289494][0m
[0m[1mmodule.vpc.aws_eip.nat[0]: Refreshing state... [id=eipalloc-08fb6f91c4494fcb4][0m
[0m[1mmodule.vpc.aws_route_table_association.database[0]: Refreshing state... [id=rtbassoc-031e21f187eba0cb9][0m
[0m[1mmodule.vpc.aws_route_table_association.database[2]: Refreshing state... [id=rtbassoc-014f5c3e2354296f7][0m
[0m[1mmodule.vpc.aws_route_table_association.database[1]: Refreshing state... [id=rtbassoc-05698b8677720503f][0m
[0m[1mmodule.vpc.aws_db_subnet_group.database[0]: Refreshing state... [id=candlefish-vpc-production][0m
[0m[1maws_db_subnet_group.main: Refreshing state... [id=candlefish-db-subnet-group-production][0m
[0m[1maws_elasticache_subnet_group.main: Refreshing state... [id=candlefish-cache-subnet-group-production][0m
[0m[1mmodule.vpc.aws_nat_gateway.this[0]: Refreshing state... [id=nat-06d512f76c76145d1][0m
[0m[1mmodule.vpc.aws_route.private_nat_gateway[0]: Refreshing state... [id=r-rtb-0fad9b20db08f9abe1080289494][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform planned the following actions, but then encountered a problem:

[1m  # aws_cloudwatch_log_group.application[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "application" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/candlefish/production/application"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 30
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
    }

[1m  # aws_cloudwatch_log_group.eks_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "eks_cluster" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/eks/candlefish-production/cluster"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 30
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
    }

[1m  # aws_cloudwatch_metric_alarm.high_cpu[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "high_cpu" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This metric monitors EKS cluster CPU utilization"
      [32m+[0m[0m alarm_name                            = "candlefish-production-high-cpu"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "ClusterName" = "candlefish-production"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 2
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "CPUUtilization"
      [32m+[0m[0m namespace                             = "AWS/EKS"
      [32m+[0m[0m period                                = 300
      [32m+[0m[0m statistic                             = "Average"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m threshold                             = 80
      [32m+[0m[0m treat_missing_data                    = "missing"
    }

[1m  # aws_db_instance.postgresql[0m will be created
[0m  [32m+[0m[0m resource "aws_db_instance" "postgresql" {
      [32m+[0m[0m address                               = (known after apply)
      [32m+[0m[0m allocated_storage                     = 100
      [32m+[0m[0m apply_immediately                     = false
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m auto_minor_version_upgrade            = true
      [32m+[0m[0m availability_zone                     = (known after apply)
      [32m+[0m[0m backup_retention_period               = 7
      [32m+[0m[0m backup_target                         = (known after apply)
      [32m+[0m[0m backup_window                         = "03:00-04:00"
      [32m+[0m[0m ca_cert_identifier                    = (known after apply)
      [32m+[0m[0m character_set_name                    = (known after apply)
      [32m+[0m[0m copy_tags_to_snapshot                 = false
      [32m+[0m[0m database_insights_mode                = (known after apply)
      [32m+[0m[0m db_name                               = "candlefish"
      [32m+[0m[0m db_subnet_group_name                  = "candlefish-db-subnet-group-production"
      [32m+[0m[0m dedicated_log_volume                  = false
      [32m+[0m[0m delete_automated_backups              = true
      [32m+[0m[0m deletion_protection                   = true
      [32m+[0m[0m domain_fqdn                           = (known after apply)
      [32m+[0m[0m enabled_cloudwatch_logs_exports       = [
          [32m+[0m[0m "postgresql",
        ]
      [32m+[0m[0m endpoint                              = (known after apply)
      [32m+[0m[0m engine                                = "postgres"
      [32m+[0m[0m engine_lifecycle_support              = (known after apply)
      [32m+[0m[0m engine_version                        = "16.1"
      [32m+[0m[0m engine_version_actual                 = (known after apply)
      [32m+[0m[0m hosted_zone_id                        = (known after apply)
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m identifier                            = "candlefish-postgres-production"
      [32m+[0m[0m identifier_prefix                     = (known after apply)
      [32m+[0m[0m instance_class                        = "db.r6g.xlarge"
      [32m+[0m[0m iops                                  = (known after apply)
      [32m+[0m[0m kms_key_id                            = "arn:aws:kms:us-east-1:681214184463:key/97320723-812f-4e6f-8e6d-e1b42dea5a04"
      [32m+[0m[0m latest_restorable_time                = (known after apply)
      [32m+[0m[0m license_model                         = (known after apply)
      [32m+[0m[0m listener_endpoint                     = (known after apply)
      [32m+[0m[0m maintenance_window                    = "sun:04:00-sun:05:00"
      [32m+[0m[0m master_user_secret                    = (known after apply)
      [32m+[0m[0m master_user_secret_kms_key_id         = (known after apply)
      [32m+[0m[0m max_allocated_storage                 = 1000
      [32m+[0m[0m monitoring_interval                   = 60
      [32m+[0m[0m monitoring_role_arn                   = (known after apply)
      [32m+[0m[0m multi_az                              = true
      [32m+[0m[0m nchar_character_set_name              = (known after apply)
      [32m+[0m[0m network_type                          = (known after apply)
      [32m+[0m[0m option_group_name                     = (known after apply)
      [32m+[0m[0m parameter_group_name                  = (known after apply)
      [32m+[0m[0m password                              = (sensitive value)
      [32m+[0m[0m password_wo                           = (write-only attribute)
      [32m+[0m[0m performance_insights_enabled          = true
      [32m+[0m[0m performance_insights_kms_key_id       = (known after apply)
      [32m+[0m[0m performance_insights_retention_period = (known after apply)
      [32m+[0m[0m port                                  = 5432
      [32m+[0m[0m publicly_accessible                   = false
      [32m+[0m[0m replica_mode                          = (known after apply)
      [32m+[0m[0m replicas                              = (known after apply)
      [32m+[0m[0m resource_id                           = (known after apply)
      [32m+[0m[0m skip_final_snapshot                   = false
      [32m+[0m[0m snapshot_identifier                   = (known after apply)
      [32m+[0m[0m status                                = (known after apply)
      [32m+[0m[0m storage_encrypted                     = true
      [32m+[0m[0m storage_throughput                    = (known after apply)
      [32m+[0m[0m storage_type                          = "gp3"
      [32m+[0m[0m tags                                  = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all                              = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m timezone                              = (known after apply)
      [32m+[0m[0m username                              = "candlefish"
      [32m+[0m[0m vpc_security_group_ids                = [
          [32m+[0m[0m "sg-0a1b45d7a8c2a76b7",
        ]
    }

[1m  # aws_eks_addon.aws_load_balancer_controller[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "aws_load_balancer_controller" {
      [32m+[0m[0m addon_name           = "aws-load-balancer-controller"
      [32m+[0m[0m addon_version        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m cluster_name         = "candlefish-production"
      [32m+[0m[0m configuration_values = (known after apply)
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m modified_at          = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # aws_eks_addon.coredns[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "coredns" {
      [32m+[0m[0m addon_name           = "coredns"
      [32m+[0m[0m addon_version        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m cluster_name         = "candlefish-production"
      [32m+[0m[0m configuration_values = (known after apply)
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m modified_at          = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # aws_eks_addon.ebs_csi_driver[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "ebs_csi_driver" {
      [32m+[0m[0m addon_name           = "aws-ebs-csi-driver"
      [32m+[0m[0m addon_version        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m cluster_name         = "candlefish-production"
      [32m+[0m[0m configuration_values = (known after apply)
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m modified_at          = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # aws_eks_addon.kube_proxy[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "kube_proxy" {
      [32m+[0m[0m addon_name           = "kube-proxy"
      [32m+[0m[0m addon_version        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m cluster_name         = "candlefish-production"
      [32m+[0m[0m configuration_values = (known after apply)
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m modified_at          = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # aws_eks_addon.vpc_cni[0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "vpc_cni" {
      [32m+[0m[0m addon_name           = "vpc-cni"
      [32m+[0m[0m addon_version        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m cluster_name         = "candlefish-production"
      [32m+[0m[0m configuration_values = (known after apply)
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m modified_at          = (known after apply)
      [32m+[0m[0m tags_all             = (known after apply)
    }

[1m  # aws_elasticache_parameter_group.redis[0m will be created
[0m  [32m+[0m[0m resource "aws_elasticache_parameter_group" "redis" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "Managed by Terraform"
      [32m+[0m[0m family      = "redis7"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "candlefish-redis-params-production"
      [32m+[0m[0m tags_all    = (known after apply)

      [32m+[0m[0m parameter {
          [32m+[0m[0m name  = "maxmemory-policy"
          [32m+[0m[0m value = "allkeys-lru"
        }
      [32m+[0m[0m parameter {
          [32m+[0m[0m name  = "timeout"
          [32m+[0m[0m value = "300"
        }
    }

[1m  # aws_elasticache_replication_group.redis[0m will be created
[0m  [32m+[0m[0m resource "aws_elasticache_replication_group" "redis" {
      [32m+[0m[0m apply_immediately              = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m at_rest_encryption_enabled     = "true"
      [32m+[0m[0m auth_token                     = (sensitive value)
      [32m+[0m[0m auth_token_update_strategy     = "ROTATE"
      [32m+[0m[0m auto_minor_version_upgrade     = (known after apply)
      [32m+[0m[0m automatic_failover_enabled     = true
      [32m+[0m[0m cluster_enabled                = (known after apply)
      [32m+[0m[0m cluster_mode                   = (known after apply)
      [32m+[0m[0m configuration_endpoint_address = (known after apply)
      [32m+[0m[0m data_tiering_enabled           = (known after apply)
      [32m+[0m[0m description                    = "Redis cluster for candlefish production"
      [32m+[0m[0m engine                         = "redis"
      [32m+[0m[0m engine_version                 = (known after apply)
      [32m+[0m[0m engine_version_actual          = (known after apply)
      [32m+[0m[0m global_replication_group_id    = (known after apply)
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m ip_discovery                   = (known after apply)
      [32m+[0m[0m maintenance_window             = (known after apply)
      [32m+[0m[0m member_clusters                = (known after apply)
      [32m+[0m[0m multi_az_enabled               = true
      [32m+[0m[0m network_type                   = (known after apply)
      [32m+[0m[0m node_type                      = "cache.t3.medium"
      [32m+[0m[0m num_cache_clusters             = 2
      [32m+[0m[0m num_node_groups                = (known after apply)
      [32m+[0m[0m parameter_group_name           = "candlefish-redis-params-production"
      [32m+[0m[0m port                           = 6379
      [32m+[0m[0m primary_endpoint_address       = (known after apply)
      [32m+[0m[0m reader_endpoint_address        = (known after apply)
      [32m+[0m[0m replicas_per_node_group        = (known after apply)
      [32m+[0m[0m replication_group_id           = "candlefish-redis-production"
      [32m+[0m[0m security_group_ids             = [
          [32m+[0m[0m "sg-0f9a63be6d815a9bf",
        ]
      [32m+[0m[0m security_group_names           = (known after apply)
      [32m+[0m[0m snapshot_retention_limit       = 5
      [32m+[0m[0m snapshot_window                = "03:00-05:00"
      [32m+[0m[0m subnet_group_name              = "candlefish-cache-subnet-group-production"
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m transit_encryption_enabled     = true
      [32m+[0m[0m transit_encryption_mode        = (known after apply)
    }

[1m  # aws_kms_alias.eks[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "eks" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/candlefish-eks-production"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = "97320723-812f-4e6f-8e6d-e1b42dea5a04"
    }

[1m  # aws_s3_bucket.assets[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "assets" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = (known after apply)
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # aws_s3_bucket_lifecycle_configuration.assets[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_lifecycle_configuration" "assets" {
      [32m+[0m[0m bucket                                 = (known after apply)
      [32m+[0m[0m expected_bucket_owner                  = (known after apply)
      [32m+[0m[0m id                                     = (known after apply)
      [32m+[0m[0m transition_default_minimum_object_size = "all_storage_classes_128K"

      [32m+[0m[0m rule {
          [32m+[0m[0m id     = "cost_optimization"
          [32m+[0m[0m status = "Enabled"
            [90m# (1 unchanged attribute hidden)[0m[0m

          [32m+[0m[0m filter {
                [90m# (1 unchanged attribute hidden)[0m[0m
            }

          [32m+[0m[0m noncurrent_version_expiration {
              [32m+[0m[0m noncurrent_days = 90
            }

          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 30
              [32m+[0m[0m storage_class = "STANDARD_IA"
            }
          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 365
              [32m+[0m[0m storage_class = "DEEP_ARCHIVE"
            }
          [32m+[0m[0m transition {
              [32m+[0m[0m days          = 90
              [32m+[0m[0m storage_class = "GLACIER"
            }
        }
    }

[1m  # aws_s3_bucket_public_access_block.assets[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_public_access_block" "assets" {
      [32m+[0m[0m block_public_acls       = true
      [32m+[0m[0m block_public_policy     = true
      [32m+[0m[0m bucket                  = (known after apply)
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m ignore_public_acls      = true
      [32m+[0m[0m restrict_public_buckets = true
    }

[1m  # aws_s3_bucket_server_side_encryption_configuration.assets[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "assets" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m bucket_key_enabled = true

          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m kms_master_key_id = "arn:aws:kms:us-east-1:681214184463:key/97320723-812f-4e6f-8e6d-e1b42dea5a04"
              [32m+[0m[0m sse_algorithm     = "aws:kms"
            }
        }
    }

[1m  # aws_s3_bucket_versioning.assets[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_versioning" "assets" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m versioning_configuration {
          [32m+[0m[0m mfa_delete = (known after apply)
          [32m+[0m[0m status     = "Enabled"
        }
    }

[1m  # aws_secretsmanager_secret.app_secrets[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret" "app_secrets" {
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m description                    = "Application secrets for candlefish production"
      [32m+[0m[0m force_overwrite_replica_secret = false
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m kms_key_id                     = "arn:aws:kms:us-east-1:681214184463:key/97320723-812f-4e6f-8e6d-e1b42dea5a04"
      [32m+[0m[0m name                           = "candlefish/app/production"
      [32m+[0m[0m name_prefix                    = (known after apply)
      [32m+[0m[0m policy                         = (known after apply)
      [32m+[0m[0m recovery_window_in_days        = 30
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }

      [32m+[0m[0m replica {
          [32m+[0m[0m kms_key_id         = (known after apply)
          [32m+[0m[0m last_accessed_date = (known after apply)
          [32m+[0m[0m region             = "us-east-1"
          [32m+[0m[0m status             = (known after apply)
          [32m+[0m[0m status_message     = (known after apply)
        }
    }

[1m  # aws_secretsmanager_secret_version.app_secrets[0m will be created
[0m  [32m+[0m[0m resource "aws_secretsmanager_secret_version" "app_secrets" {
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m has_secret_string_wo = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m secret_id            = (known after apply)
      [32m+[0m[0m secret_string        = (sensitive value)
      [32m+[0m[0m secret_string_wo     = (write-only attribute)
      [32m+[0m[0m version_id           = (known after apply)
      [32m+[0m[0m version_stages       = (known after apply)
    }

[1m  # aws_security_group.eks_cluster[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "eks_cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Managed by Terraform"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
                [90m# (1 unchanged attribute hidden)[0m[0m
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = "HTTPS"
              [32m+[0m[0m from_port        = 443
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 443
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "candlefish-eks-cluster-production-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "candlefish-eks-cluster-sg-production"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "candlefish-eks-cluster-sg-production"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0f32ba017bb5a6504"
    }

[1m  # aws_sns_topic.alerts[0][0m will be created
[0m  [32m+[0m[0m resource "aws_sns_topic" "alerts" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m beginning_archive_time      = (known after apply)
      [32m+[0m[0m content_based_deduplication = false
      [32m+[0m[0m fifo_throughput_scope       = (known after apply)
      [32m+[0m[0m fifo_topic                  = false
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m name                        = "candlefish-production-alerts"
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m owner                       = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m signature_version           = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tracing_config              = (known after apply)
    }

[1m  # random_password.encryption_key[0m will be created
[0m  [32m+[0m[0m resource "random_password" "encryption_key" {
      [32m+[0m[0m bcrypt_hash = (sensitive value)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m length      = 32
      [32m+[0m[0m lower       = true
      [32m+[0m[0m min_lower   = 0
      [32m+[0m[0m min_numeric = 0
      [32m+[0m[0m min_special = 0
      [32m+[0m[0m min_upper   = 0
      [32m+[0m[0m number      = true
      [32m+[0m[0m numeric     = true
      [32m+[0m[0m result      = (sensitive value)
      [32m+[0m[0m special     = false
      [32m+[0m[0m upper       = true
    }

[1m  # random_password.jwt_secret[0m will be created
[0m  [32m+[0m[0m resource "random_password" "jwt_secret" {
      [32m+[0m[0m bcrypt_hash = (sensitive value)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m length      = 64
      [32m+[0m[0m lower       = true
      [32m+[0m[0m min_lower   = 0
      [32m+[0m[0m min_numeric = 0
      [32m+[0m[0m min_special = 0
      [32m+[0m[0m min_upper   = 0
      [32m+[0m[0m number      = true
      [32m+[0m[0m numeric     = true
      [32m+[0m[0m result      = (sensitive value)
      [32m+[0m[0m special     = true
      [32m+[0m[0m upper       = true
    }

[1m  # random_string.suffix[0m will be created
[0m  [32m+[0m[0m resource "random_string" "suffix" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m length      = 8
      [32m+[0m[0m lower       = true
      [32m+[0m[0m min_lower   = 0
      [32m+[0m[0m min_numeric = 0
      [32m+[0m[0m min_special = 0
      [32m+[0m[0m min_upper   = 0
      [32m+[0m[0m number      = true
      [32m+[0m[0m numeric     = true
      [32m+[0m[0m result      = (known after apply)
      [32m+[0m[0m special     = false
      [32m+[0m[0m upper       = false
    }

[1m  # module.candlefish_irsa.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m json          = (known after apply)
      [32m+[0m[0m minified_json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions = [
              [32m+[0m[0m "sts:AssumeRoleWithWebIdentity",
            ]
          [32m+[0m[0m effect  = "Allow"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "sts.amazonaws.com",
                ]
              [32m+[0m[0m variable = (known after apply)
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "system:serviceaccount:candlefish-production:candlefish-service-account",
                ]
              [32m+[0m[0m variable = (known after apply)
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "Federated"
            }
        }
    }

[1m  # module.candlefish_irsa.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "candlefish-app-production"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.candlefish_irsa.aws_iam_role_policy_attachment.this["AmazonS3ReadOnlyAccess"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      [32m+[0m[0m role       = "candlefish-app-production"
    }

[1m  # module.candlefish_irsa.aws_iam_role_policy_attachment.this["SecretsManagerRead"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
      [32m+[0m[0m role       = "candlefish-app-production"
    }

[1m  # module.eks.data.tls_certificate.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "this" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.eks.aws_cloudwatch_log_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/eks/candlefish-production/cluster"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 90
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "/aws/eks/candlefish-production/cluster"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "/aws/eks/candlefish-production/cluster"
          [32m+[0m[0m "Project"     = "candlefish"
        }
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["CostCenter"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "CostCenter"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "engineering"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["Environment"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Environment"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "production"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["ManagedBy"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "ManagedBy"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "terraform"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["Project"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Project"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "candlefish"
    }

[1m  # module.eks.aws_eks_cluster.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "this" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = true
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types     = [
          [32m+[0m[0m "api",
          [32m+[0m[0m "audit",
          [32m+[0m[0m "authenticator",
        ]
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "candlefish-production"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags                          = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all                      = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m version                       = "1.28"

      [32m+[0m[0m access_config (known after apply)

      [32m+[0m[0m encryption_config {
          [32m+[0m[0m resources = [
              [32m+[0m[0m "secrets",
            ]

          [32m+[0m[0m provider {
              [32m+[0m[0m key_arn = (known after apply)
            }
        }

      [32m+[0m[0m kubernetes_network_config {
          [32m+[0m[0m ip_family         = (known after apply)
          [32m+[0m[0m service_ipv4_cidr = (known after apply)
          [32m+[0m[0m service_ipv6_cidr = (known after apply)

          [32m+[0m[0m elastic_load_balancing (known after apply)
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m upgrade_policy (known after apply)

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = true
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = [
              [32m+[0m[0m "subnet-08973640d552da4b5",
              [32m+[0m[0m "subnet-095589df6a9b86584",
              [32m+[0m[0m "subnet-0a18da8ca4dd2f0f5",
            ]
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.aws_iam_openid_connect_provider.oidc_provider[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "oidc_provider" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "candlefish-production-eks-irsa"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "candlefish-production-eks-irsa"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cluster_encryption" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Cluster encryption policy to allow cluster role to utilize CMK provided"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "candlefish-production-cluster-ClusterEncryption"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
    }

[1m  # module.eks.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSClusterAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "candlefish-production-cluster-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy {
          [32m+[0m[0m name   = "candlefish-production-cluster"
          [32m+[0m[0m policy = jsonencode(
                {
                  [32m+[0m[0m Statement = [
                      [32m+[0m[0m {
                          [32m+[0m[0m Action   = [
                              [32m+[0m[0m "logs:CreateLogGroup",
                            ]
                          [32m+[0m[0m Effect   = "Deny"
                          [32m+[0m[0m Resource = "*"
                        },
                    ]
                  [32m+[0m[0m Version   = "2012-10-17"
                }
            )
        }
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_encryption" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_security_group.cluster[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS cluster security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "candlefish-production-cluster-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "candlefish-production-cluster"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Name"        = "candlefish-production-cluster"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0f32ba017bb5a6504"
    }

[1m  # module.eks.aws_security_group.node[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "node" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS node shared security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "candlefish-production-node-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "CostCenter"                                  = "engineering"
          [32m+[0m[0m "Environment"                                 = "production"
          [32m+[0m[0m "ManagedBy"                                   = "terraform"
          [32m+[0m[0m "Name"                                        = "candlefish-production-node"
          [32m+[0m[0m "Project"                                     = "candlefish"
          [32m+[0m[0m "kubernetes.io/cluster/candlefish-production" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "CostCenter"                                  = "engineering"
          [32m+[0m[0m "Environment"                                 = "production"
          [32m+[0m[0m "ManagedBy"                                   = "terraform"
          [32m+[0m[0m "Name"                                        = "candlefish-production-node"
          [32m+[0m[0m "Project"                                     = "candlefish"
          [32m+[0m[0m "kubernetes.io/cluster/candlefish-production" = "owned"
        }
      [32m+[0m[0m vpc_id                 = "vpc-0f32ba017bb5a6504"
    }

[1m  # module.eks.aws_security_group_rule.cluster["ingress_nodes_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Node groups to cluster API"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["egress_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow all egress"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node groups"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 4443/tcp webhook"
      [32m+[0m[0m from_port                = 4443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 4443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 6443/tcp webhook"
      [32m+[0m[0m from_port                = 6443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 6443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 8443/tcp webhook"
      [32m+[0m[0m from_port                = 8443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 9443/tcp webhook"
      [32m+[0m[0m from_port                = 9443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 9443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node kubelets"
      [32m+[0m[0m from_port                = 10250
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 10250
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node ingress on ephemeral ports"
      [32m+[0m[0m from_port                = 1025
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 65535
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS UDP"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "udp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.kubernetes_config_map_v1_data.aws_auth[0][0m will be created
[0m  [32m+[0m[0m resource "kubernetes_config_map_v1_data" "aws_auth" {
      [32m+[0m[0m data          = (known after apply)
      [32m+[0m[0m field_manager = "Terraform"
      [32m+[0m[0m force         = true
      [32m+[0m[0m id            = (known after apply)

      [32m+[0m[0m metadata {
          [32m+[0m[0m name      = "aws-auth"
          [32m+[0m[0m namespace = "kube-system"
        }
    }

[1m  # module.eks.time_sleep.this[0][0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "this" {
      [32m+[0m[0m create_duration = "30s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "cluster_certificate_authority_data" = (known after apply)
          [32m+[0m[0m "cluster_endpoint"                   = (known after apply)
          [32m+[0m[0m "cluster_name"                       = "candlefish-production"
          [32m+[0m[0m "cluster_version"                    = "1.28"
        }
    }

[1m  # module.eks_admins_iam_role.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "sts:TagSession",
                          [32m+[0m[0m "sts:AssumeRole",
                        ]
                      [32m+[0m[0m Condition = {
                          [32m+[0m[0m Bool            = {
                              [32m+[0m[0m "aws:MultiFactorAuthPresent" = "true"
                            }
                          [32m+[0m[0m NumericLessThan = {
                              [32m+[0m[0m "aws:MultiFactorAuthAge" = "86400"
                            }
                        }
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS     = "arn:aws:iam::681214184463:root"
                          [32m+[0m[0m Service = []
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "candlefish-eks-admins-production"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m unique_id             = (known after apply)
        [90m# (2 unchanged attributes hidden)[0m[0m

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks_admins_iam_role.aws_iam_role_policy_attachment.custom[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "custom" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = "candlefish-eks-admins-production"
    }

[1m  # module.eks.module.eks_managed_node_group["general"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = "AL2_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "ON_DEMAND"
      [32m+[0m[0m cluster_name           = "candlefish-production"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.medium",
          [32m+[0m[0m "t3.large",
        ]
      [32m+[0m[0m labels                 = {
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "NodeGroup"   = "general"
        }
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "general-production-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = [
          [32m+[0m[0m "subnet-08973640d552da4b5",
          [32m+[0m[0m "subnet-095589df6a9b86584",
          [32m+[0m[0m "subnet-0a18da8ca4dd2f0f5",
        ]
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "CostCenter"                                      = "engineering"
          [32m+[0m[0m "Environment"                                     = "production"
          [32m+[0m[0m "ManagedBy"                                       = "terraform"
          [32m+[0m[0m "Name"                                            = "general-production"
          [32m+[0m[0m "Project"                                         = "candlefish"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/candlefish-production" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"               = "true"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "CostCenter"                                      = "engineering"
          [32m+[0m[0m "Environment"                                     = "production"
          [32m+[0m[0m "ManagedBy"                                       = "terraform"
          [32m+[0m[0m "Name"                                            = "general-production"
          [32m+[0m[0m "Project"                                         = "candlefish"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/candlefish-production" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"               = "true"
        }
      [32m+[0m[0m version                = "1.28"

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = (known after apply)
        }

      [32m+[0m[0m node_repair_config (known after apply)

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 6
          [32m+[0m[0m max_size     = 20
          [32m+[0m[0m min_size     = 3
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.eks.module.eks_managed_node_group["general"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "general-production-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "CostCenter"                                      = "engineering"
          [32m+[0m[0m "Environment"                                     = "production"
          [32m+[0m[0m "ManagedBy"                                       = "terraform"
          [32m+[0m[0m "Project"                                         = "candlefish"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/candlefish-production" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"               = "true"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "CostCenter"                                      = "engineering"
          [32m+[0m[0m "Environment"                                     = "production"
          [32m+[0m[0m "ManagedBy"                                       = "terraform"
          [32m+[0m[0m "Project"                                         = "candlefish"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/candlefish-production" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"               = "true"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["general"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["general"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["general"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["general"].aws_launch_template.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m description            = "Custom launch template for general-production EKS managed node group"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "general-"
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "CostCenter"                                      = "engineering"
          [32m+[0m[0m "Environment"                                     = "production"
          [32m+[0m[0m "ManagedBy"                                       = "terraform"
          [32m+[0m[0m "Project"                                         = "candlefish"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/candlefish-production" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"               = "true"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "CostCenter"                                      = "engineering"
          [32m+[0m[0m "Environment"                                     = "production"
          [32m+[0m[0m "ManagedBy"                                       = "terraform"
          [32m+[0m[0m "Project"                                         = "candlefish"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/candlefish-production" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"               = "true"
        }
      [32m+[0m[0m update_default_version = true
      [32m+[0m[0m user_data              = "IyEvYmluL2Jhc2gKc2V0IC1leAoKIyBFS1MgQm9vdHN0cmFwIHNjcmlwdCBmb3IgQ2FuZGxlZmlzaCBub2RlcwojIFRoaXMgc2NyaXB0IGNvbmZpZ3VyZXMgRUMyIGluc3RhbmNlcyB0byBqb2luIHRoZSBFS1MgY2x1c3RlcgoKIyBMb2cgYWxsIG91dHB1dApleGVjID4gPih0ZWUgL3Zhci9sb2cvdXNlci1kYXRhLmxvZykKZXhlYyAyPiYxCgplY2hvICJTdGFydGluZyBFS1Mgbm9kZSBib290c3RyYXAgYXQgJChkYXRlKSIKCiMgVXBkYXRlIHBhY2thZ2VzCnl1bSB1cGRhdGUgLXkKCiMgQ29uZmlndXJlIGRvY2tlciBkYWVtb24KY2F0IDw8RU9GID4gL2V0Yy9kb2NrZXIvZGFlbW9uLmpzb24KewogICJicmlkZ2UiOiAibm9uZSIsCiAgImxvZy1kcml2ZXIiOiAianNvbi1maWxlIiwKICAibG9nLW9wdHMiOiB7CiAgICAibWF4LXNpemUiOiAiMTBtIiwKICAgICJtYXgtZmlsZSI6ICIzIgogIH0sCiAgImxpdmUtcmVzdG9yZSI6IHRydWUsCiAgIm1heC1jb25jdXJyZW50LWRvd25sb2FkcyI6IDEwCn0KRU9GCgpzeXN0ZW1jdGwgcmVzdGFydCBkb2NrZXIKCiMgU2V0IHVwIGt1YmVsZXQgZXh0cmEgYXJncyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlCmNhdCA8PEVPRiA+IC9ldGMvc3lzY29uZmlnL2t1YmVsZXQtZXh0cmEtYXJncwpLVUJFTEVUX0VYVFJBX0FSR1M9Ii0tbWF4LXBvZHM9MTEwIC0tY2x1c3Rlci1kbnM9MTY5LjI1NC4yMC4xMCIKRU9GCgojIEluc3RhbGwgU1NNIGFnZW50IGZvciBlYXNpZXIgbWFuYWdlbWVudAp5dW0gaW5zdGFsbCAteSBhbWF6b24tc3NtLWFnZW50CnN5c3RlbWN0bCBlbmFibGUgYW1hem9uLXNzbS1hZ2VudApzeXN0ZW1jdGwgc3RhcnQgYW1hem9uLXNzbS1hZ2VudAoKIyBJbnN0YWxsIENsb3VkV2F0Y2ggYWdlbnQgZm9yIG1vbml0b3JpbmcKd2dldCBodHRwczovL3MzLmFtYXpvbmF3cy5jb20vYW1hem9uY2xvdWR3YXRjaC1hZ2VudC9hbWF6b25fbGludXgvYW1kNjQvbGF0ZXN0L2FtYXpvbi1jbG91ZHdhdGNoLWFnZW50LnJwbQpycG0gLVUgLi9hbWF6b24tY2xvdWR3YXRjaC1hZ2VudC5ycG0KCiMgQ29uZmlndXJlIENsb3VkV2F0Y2ggYWdlbnQKY2F0IDw8RU9GID4gL29wdC9hd3MvYW1hem9uLWNsb3Vkd2F0Y2gtYWdlbnQvZXRjL2FtYXpvbi1jbG91ZHdhdGNoLWFnZW50Lmpzb24KewogICJtZXRyaWNzIjogewogICAgIm5hbWVzcGFjZSI6ICJDYW5kbGVmaXNoRUtTIiwKICAgICJtZXRyaWNzX2NvbGxlY3RlZCI6IHsKICAgICAgImNwdSI6IHsKICAgICAgICAibWVhc3VyZW1lbnQiOiBbCiAgICAgICAgICB7Im5hbWUiOiAiY3B1X3VzYWdlX2lkbGUiLCAicmVuYW1lIjogIkNQVV9JRExFIiwgInVuaXQiOiAiUGVyY2VudCJ9LAogICAgICAgICAgeyJuYW1lIjogImNwdV91c2FnZV9pb3dhaXQiLCAicmVuYW1lIjogIkNQVV9JT1dBSVQiLCAidW5pdCI6ICJQZXJjZW50In0KICAgICAgICBdLAogICAgICAgICJtZXRyaWNzX2NvbGxlY3Rpb25faW50ZXJ2YWwiOiA2MAogICAgICB9LAogICAgICAiZGlzayI6IHsKICAgICAgICAibWVhc3VyZW1lbnQiOiBbCiAgICAgICAgICB7Im5hbWUiOiAidXNlZF9wZXJjZW50IiwgInJlbmFtZSI6ICJESVNLX1VTRUQiLCAidW5pdCI6ICJQZXJjZW50In0KICAgICAgICBdLAogICAgICAgICJtZXRyaWNzX2NvbGxlY3Rpb25faW50ZXJ2YWwiOiA2MCwKICAgICAgICAicmVzb3VyY2VzIjogWyIvIl0KICAgICAgfSwKICAgICAgIm1lbSI6IHsKICAgICAgICAibWVhc3VyZW1lbnQiOiBbCiAgICAgICAgICB7Im5hbWUiOiAibWVtX3VzZWRfcGVyY2VudCIsICJyZW5hbWUiOiAiTUVNX1VTRUQiLCAidW5pdCI6ICJQZXJjZW50In0KICAgICAgICBdLAogICAgICAgICJtZXRyaWNzX2NvbGxlY3Rpb25faW50ZXJ2YWwiOiA2MAogICAgICB9CiAgICB9CiAgfQp9CkVPRgoKIyBTdGFydCBDbG91ZFdhdGNoIGFnZW50Ci9vcHQvYXdzL2FtYXpvbi1jbG91ZHdhdGNoLWFnZW50L2Jpbi9hbWF6b24tY2xvdWR3YXRjaC1hZ2VudC1jdGwgXAogIC1hIGZldGNoLWNvbmZpZyBcCiAgLW0gZWMyIFwKICAtcyBcCiAgLWMgZmlsZTovb3B0L2F3cy9hbWF6b24tY2xvdWR3YXRjaC1hZ2VudC9ldGMvYW1hem9uLWNsb3Vkd2F0Y2gtYWdlbnQuanNvbgoKIyBTZXQgdXAgbG9nIHJvdGF0aW9uCmNhdCA8PEVPRiA+IC9ldGMvbG9ncm90YXRlLmQva3ViZXJuZXRlcwovdmFyL2xvZy9wb2RzLyovKi5sb2cgewogICAgZGFpbHkKICAgIHJvdGF0ZSA1CiAgICBjb21wcmVzcwogICAgZGVsYXljb21wcmVzcwogICAgbWlzc2luZ29rCiAgICBub3RpZmVtcHR5CiAgICBtYXhhZ2UgMzAKfQpFT0YKCmVjaG8gIkJvb3RzdHJhcCBjb21wbGV0ZSBhdCAkKGRhdGUpIg=="
      [32m+[0m[0m vpc_security_group_ids = (known after apply)
        [90m# (1 unchanged attribute hidden)[0m[0m

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = (known after apply)
          [32m+[0m[0m http_put_response_hop_limit = 2
          [32m+[0m[0m http_tokens                 = "required"
          [32m+[0m[0m instance_metadata_tags      = "disabled"
        }

      [32m+[0m[0m monitoring {
          [32m+[0m[0m enabled = true
        }

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "CostCenter"                                      = "engineering"
              [32m+[0m[0m "Environment"                                     = "production"
              [32m+[0m[0m "ManagedBy"                                       = "terraform"
              [32m+[0m[0m "Name"                                            = "general-production"
              [32m+[0m[0m "Project"                                         = "candlefish"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/candlefish-production" = "owned"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"               = "true"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "network-interface"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "CostCenter"                                      = "engineering"
              [32m+[0m[0m "Environment"                                     = "production"
              [32m+[0m[0m "ManagedBy"                                       = "terraform"
              [32m+[0m[0m "Name"                                            = "general-production"
              [32m+[0m[0m "Project"                                         = "candlefish"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/candlefish-production" = "owned"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"               = "true"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "volume"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "CostCenter"                                      = "engineering"
              [32m+[0m[0m "Environment"                                     = "production"
              [32m+[0m[0m "ManagedBy"                                       = "terraform"
              [32m+[0m[0m "Name"                                            = "general-production"
              [32m+[0m[0m "Project"                                         = "candlefish"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/candlefish-production" = "owned"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"               = "true"
            }
        }
    }

[1m  # module.eks.module.kms.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m json                      = (known after apply)
      [32m+[0m[0m minified_json             = (known after apply)
      [32m+[0m[0m override_policy_documents = []
      [32m+[0m[0m source_policy_documents   = []

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:CancelKeyDeletion",
              [32m+[0m[0m "kms:Create*",
              [32m+[0m[0m "kms:Delete*",
              [32m+[0m[0m "kms:Describe*",
              [32m+[0m[0m "kms:Disable*",
              [32m+[0m[0m "kms:Enable*",
              [32m+[0m[0m "kms:Get*",
              [32m+[0m[0m "kms:ImportKeyMaterial",
              [32m+[0m[0m "kms:List*",
              [32m+[0m[0m "kms:Put*",
              [32m+[0m[0m "kms:ReplicateKey",
              [32m+[0m[0m "kms:Revoke*",
              [32m+[0m[0m "kms:ScheduleKeyDeletion",
              [32m+[0m[0m "kms:TagResource",
              [32m+[0m[0m "kms:UntagResource",
              [32m+[0m[0m "kms:Update*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyAdministration"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::681214184463:user/patrick-smith",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:Decrypt",
              [32m+[0m[0m "kms:DescribeKey",
              [32m+[0m[0m "kms:Encrypt",
              [32m+[0m[0m "kms:GenerateDataKey*",
              [32m+[0m[0m "kms:ReEncrypt*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyUsage"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
    }

[1m  # module.eks.module.kms.aws_kms_alias.this["cluster"][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/eks/candlefish-production"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.eks.module.kms.aws_kms_key.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "this" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "candlefish-production cluster encryption key"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = false
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m rotation_period_in_days            = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "CostCenter"  = "engineering"
          [32m+[0m[0m "Environment" = "production"
          [32m+[0m[0m "ManagedBy"   = "terraform"
          [32m+[0m[0m "Project"     = "candlefish"
        }
    }

[1mPlan:[0m 64 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m application_urls                   = {
      [32m+[0m[0m analytics    = "https://analytics.candlefish.ai"
      [32m+[0m[0m api_endpoint = "https://api.candlefish.ai"
      [32m+[0m[0m brand_portal = "https://brand.candlefish.ai"
      [32m+[0m[0m main_website = "https://candlefish.ai"
      [32m+[0m[0m paintbox     = "https://paintbox.candlefish.ai"
    }
  [32m+[0m[0m aws_region                         = "us-east-1"
  [32m+[0m[0m cloudwatch_log_group_arn           = (known after apply)
  [32m+[0m[0m cloudwatch_log_group_name          = "/candlefish/production/application"
  [32m+[0m[0m cluster_certificate_authority_data = (known after apply)
  [32m+[0m[0m cluster_endpoint                   = (sensitive value)
  [32m+[0m[0m cluster_iam_role_arn               = (known after apply)
  [32m+[0m[0m cluster_iam_role_name              = (known after apply)
  [32m+[0m[0m cluster_name                       = "candlefish-production"
  [32m+[0m[0m cluster_oidc_issuer_url            = (known after apply)
  [32m+[0m[0m cluster_platform_version           = (known after apply)
  [32m+[0m[0m cluster_primary_security_group_id  = (known after apply)
  [32m+[0m[0m cluster_security_group_id          = (known after apply)
  [32m+[0m[0m cluster_status                     = (known after apply)
  [32m+[0m[0m cluster_version                    = "1.28"
  [32m+[0m[0m database_arn                       = (known after apply)
  [32m+[0m[0m database_connection_string         = (sensitive value)
  [32m+[0m[0m database_endpoint                  = (sensitive value)
  [32m+[0m[0m database_engine_version            = (known after apply)
  [32m+[0m[0m deployment_info                    = {
      [32m+[0m[0m cluster_name         = "candlefish-production"
      [32m+[0m[0m helm_chart_name      = "candlefish"
      [32m+[0m[0m image_registry       = "ghcr.io/candlefish-ai"
      [32m+[0m[0m namespace            = "candlefish-production"
      [32m+[0m[0m service_account_name = "candlefish-service-account"
    }
  [32m+[0m[0m eks_admins_role_arn                = (known after apply)
  [32m+[0m[0m environment                        = "production"
  [32m+[0m[0m estimated_monthly_cost             = {
      [32m+[0m[0m data_transfer  = "$10-50"
      [32m+[0m[0m ec2_instances  = "$200-400"
      [32m+[0m[0m eks_cluster    = "$75"
      [32m+[0m[0m elasticache    = "$50-100"
      [32m+[0m[0m load_balancer  = "$25"
      [32m+[0m[0m other_services = "$20-50"
      [32m+[0m[0m rds_database   = "$100-200"
      [32m+[0m[0m storage        = "$20-100"
      [32m+[0m[0m total_estimate = "$500-1000"
    }
  [32m+[0m[0m kubectl_config_command             = "aws eks update-kubeconfig --region us-east-1 --name candlefish-production"
  [32m+[0m[0m node_groups                        = (sensitive value)
  [32m+[0m[0m node_security_group_arn            = (known after apply)
  [32m+[0m[0m node_security_group_id             = (known after apply)
  [32m+[0m[0m oidc_provider_arn                  = (known after apply)
  [32m+[0m[0m redis_arn                          = (known after apply)
  [32m+[0m[0m redis_connection_string            = (sensitive value)
  [32m+[0m[0m redis_endpoint                     = (sensitive value)
  [32m+[0m[0m redis_reader_endpoint              = (sensitive value)
  [32m+[0m[0m s3_bucket_arn                      = (known after apply)
  [32m+[0m[0m s3_bucket_domain_name              = (known after apply)
  [32m+[0m[0m s3_bucket_name                     = (known after apply)
  [32m+[0m[0m s3_bucket_regional_domain_name     = (known after apply)
  [32m+[0m[0m secrets_manager_secret_arn         = (known after apply)
  [32m+[0m[0m security_group_ids                 = {
      [32m+[0m[0m eks_cluster = (known after apply)
      [32m+[0m[0m elasticache = "sg-0f9a63be6d815a9bf"
      [32m+[0m[0m rds         = "sg-0a1b45d7a8c2a76b7"
    }
  [32m+[0m[0m service_account_role_arn           = (known after apply)
  [32m+[0m[0m service_account_role_name          = "candlefish-app-production"
  [32m+[0m[0m sns_topic_arn                      = (known after apply)
[33m╷[0m[0m
[33m│[0m [0m[1m[33mWarning: [0m[0m[1mValue for undeclared variable[0m
[33m│[0m [0m
[33m│[0m [0m[0mThe root module does not declare a variable named "common_tags" but a value
[33m│[0m [0mwas found in file "terraform.tfvars". If you meant to use this value, add a
[33m│[0m [0m"variable" block to the configuration.
[33m│[0m [0m
[33m│[0m [0mTo silence these warnings, use TF_VAR_... environment variables to provide
[33m│[0m [0mcertain "global" settings to all configurations in your organization. To
[33m│[0m [0mreduce the verbosity of these warnings, use the -compact-warnings option.
[33m╵[0m[0m
[33m╷[0m[0m
[33m│[0m [0m[1m[33mWarning: [0m[0m[1mValue for undeclared variable[0m
[33m│[0m [0m
[33m│[0m [0m[0mThe root module does not declare a variable named "monitoring_interval" but
[33m│[0m [0ma value was found in file "terraform.tfvars". If you meant to use this
[33m│[0m [0mvalue, add a "variable" block to the configuration.
[33m│[0m [0m
[33m│[0m [0mTo silence these warnings, use TF_VAR_... environment variables to provide
[33m│[0m [0mcertain "global" settings to all configurations in your organization. To
[33m│[0m [0mreduce the verbosity of these warnings, use the -compact-warnings option.
[33m╵[0m[0m
[33m╷[0m[0m
[33m│[0m [0m[1m[33mWarning: [0m[0m[1mValues for undeclared variables[0m
[33m│[0m [0m
[33m│[0m [0m[0mIn addition to the other similar warnings shown, 3 other variable(s)
[33m│[0m [0mdefined without being declared.
[33m╵[0m[0m
[33m╷[0m[0m
[33m│[0m [0m[1m[33mWarning: [0m[0m[1mArgument is deprecated[0m
[33m│[0m [0m
[33m│[0m [0m[0m  with module.eks.aws_iam_role.this[0],
[33m│[0m [0m  on .terraform/modules/eks/main.tf line 293, in resource "aws_iam_role" "this":
[33m│[0m [0m 293: resource "aws_iam_role" "this" [4m{[0m[0m
[33m│[0m [0m
[33m│[0m [0minline_policy is deprecated. Use the aws_iam_role_policy resource instead.
[33m│[0m [0mIf Terraform should exclusively manage all inline policy associations (the
[33m│[0m [0mcurrent behavior of this argument), use the aws_iam_role_policies_exclusive
[33m│[0m [0mresource as well.
[33m╵[0m[0m
[31m╷[0m[0m
[31m│[0m [0m[1m[31mError: [0m[0m[1mInvalid value for input variable[0m
[31m│[0m [0m
[31m│[0m [0m[0m  on terraform.tfvars line 53:
[31m│[0m [0m  53: backup_retention_days = [4m30[0m[0m
[31m│[0m [0m
[31m│[0m [0mThe given value is not suitable for var.backup_retention_days declared at
[31m│[0m [0mvariables.tf:328,1-33: map of number required.
[31m╵[0m[0m
