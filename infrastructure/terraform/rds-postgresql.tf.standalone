# RDS PostgreSQL Configuration with Multi-AZ and Read Replicas
# Path B: Performance & Scale Focus - Week 2

terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Variables
variable "environment" {
  description = "Environment name"
  type        = string
  default     = "production"
}

variable "db_name" {
  description = "Database name"
  type        = string
  default     = "candlefish"
}

variable "db_username" {
  description = "Database master username"
  type        = string
  default     = "candlefish_admin"
}

# KMS key for encryption
resource "aws_kms_key" "rds" {
  description             = "KMS key for RDS encryption"
  deletion_window_in_days = 7
  enable_key_rotation     = true

  tags = {
    Name        = "candlefish-rds-kms"
    Environment = var.environment
  }
}

resource "aws_kms_alias" "rds" {
  name          = "alias/candlefish-rds"
  target_key_id = aws_kms_key.rds.key_id
}

# DB Subnet Group
resource "aws_db_subnet_group" "main" {
  name       = "candlefish-db-subnet-group"
  subnet_ids = data.aws_subnets.private.ids

  tags = {
    Name        = "Candlefish DB subnet group"
    Environment = var.environment
  }
}

# DB Parameter Group for optimizations
resource "aws_db_parameter_group" "optimized" {
  name   = "candlefish-pg15-optimized"
  family = "postgres15"

  # Connection pooling optimizations
  parameter {
    name  = "max_connections"
    value = "500"
  }

  # Memory optimizations
  parameter {
    name  = "shared_buffers"
    value = "{DBInstanceClassMemory/4}"
  }

  parameter {
    name  = "effective_cache_size"
    value = "{DBInstanceClassMemory*3/4}"
  }

  parameter {
    name  = "maintenance_work_mem"
    value = "2097152" # 2GB
  }

  parameter {
    name  = "work_mem"
    value = "32768" # 32MB
  }

  # Query optimizations
  parameter {
    name  = "random_page_cost"
    value = "1.1" # SSD optimized
  }

  parameter {
    name  = "effective_io_concurrency"
    value = "200" # SSD optimized
  }

  # Checkpoint optimizations
  parameter {
    name  = "checkpoint_completion_target"
    value = "0.9"
  }

  parameter {
    name  = "wal_buffers"
    value = "16384" # 16MB
  }

  parameter {
    name  = "max_wal_size"
    value = "4096" # 4GB
  }

  # Statement timeout for runaway queries
  parameter {
    name  = "statement_timeout"
    value = "300000" # 5 minutes
  }

  # Enable query performance insights
  parameter {
    name  = "shared_preload_libraries"
    value = "pg_stat_statements,auto_explain"
  }

  parameter {
    name  = "pg_stat_statements.track"
    value = "all"
  }

  parameter {
    name  = "auto_explain.log_min_duration"
    value = "1000" # Log queries over 1 second
  }

  tags = {
    Name        = "Candlefish optimized parameters"
    Environment = var.environment
  }
}

# Security group for RDS
resource "aws_security_group" "rds" {
  name        = "candlefish-rds-sg"
  description = "Security group for Candlefish RDS"
  vpc_id      = data.aws_vpc.main.id

  ingress {
    from_port       = 5432
    to_port         = 5432
    protocol        = "tcp"
    security_groups = [aws_security_group.app.id]
    description     = "PostgreSQL from app servers"
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name        = "Candlefish RDS security group"
    Environment = var.environment
  }
}

# Generate random password
resource "random_password" "db_password" {
  length  = 32
  special = true
}

# Store password in Secrets Manager
resource "aws_secretsmanager_secret" "db_password" {
  name                    = "candlefish-rds-password"
  recovery_window_in_days = 7

  tags = {
    Name        = "Candlefish RDS password"
    Environment = var.environment
  }
}

resource "aws_secretsmanager_secret_version" "db_password" {
  secret_id     = aws_secretsmanager_secret.db_password.id
  secret_string = jsonencode({
    username = var.db_username
    password = random_password.db_password.result
    engine   = "postgres"
    host     = aws_db_instance.main.address
    port     = 5432
    dbname   = var.db_name
  })
}

# Main RDS Instance with Multi-AZ
resource "aws_db_instance" "main" {
  identifier     = "candlefish-postgres-main"
  engine         = "postgres"
  engine_version = "15.4"
  
  # Instance sizing - adjust based on needs
  instance_class       = "db.r6g.xlarge" # 4 vCPU, 32 GB RAM, Graviton2
  allocated_storage    = 100
  storage_type         = "gp3"
  storage_encrypted    = true
  kms_key_id          = aws_kms_key.rds.arn
  iops                = 3000
  storage_throughput  = 125

  # High Availability
  multi_az               = true
  publicly_accessible    = false
  db_subnet_group_name   = aws_db_subnet_group.main.name
  vpc_security_group_ids = [aws_security_group.rds.id]

  # Database configuration
  db_name  = var.db_name
  username = var.db_username
  password = random_password.db_password.result
  port     = 5432

  # Parameter and option groups
  parameter_group_name = aws_db_parameter_group.optimized.name
  
  # Backup configuration
  backup_retention_period = 30
  backup_window          = "03:00-04:00"
  maintenance_window     = "sun:04:00-sun:05:00"
  
  # Monitoring
  enabled_cloudwatch_logs_exports = ["postgresql"]
  performance_insights_enabled    = true
  performance_insights_retention_period = 7
  monitoring_interval             = 60
  monitoring_role_arn            = aws_iam_role.rds_monitoring.arn

  # Deletion protection
  deletion_protection      = true
  skip_final_snapshot      = false
  final_snapshot_identifier = "candlefish-postgres-final-${formatdate("YYYY-MM-DD-hhmm", timestamp())}"
  
  # Auto minor version upgrade
  auto_minor_version_upgrade = true
  
  tags = {
    Name        = "Candlefish PostgreSQL Main"
    Environment = var.environment
    Backup      = "true"
  }
}

# Read Replica 1 - Same Region
resource "aws_db_instance" "read_replica_1" {
  identifier             = "candlefish-postgres-read-1"
  replicate_source_db    = aws_db_instance.main.identifier
  
  # Instance sizing - can be different from master
  instance_class = "db.r6g.large" # 2 vCPU, 16 GB RAM
  
  # No Multi-AZ for read replicas to save costs
  multi_az = false
  
  # Performance monitoring
  performance_insights_enabled = true
  monitoring_interval         = 60
  monitoring_role_arn        = aws_iam_role.rds_monitoring.arn
  
  # Auto minor version upgrade
  auto_minor_version_upgrade = true
  
  tags = {
    Name        = "Candlefish PostgreSQL Read Replica 1"
    Environment = var.environment
    Role        = "read-replica"
  }
}

# Read Replica 2 - Different AZ
resource "aws_db_instance" "read_replica_2" {
  identifier             = "candlefish-postgres-read-2"
  replicate_source_db    = aws_db_instance.main.identifier
  
  # Instance sizing
  instance_class = "db.r6g.large"
  
  # Different AZ for better availability
  availability_zone = data.aws_availability_zones.available.names[1]
  
  # Performance monitoring
  performance_insights_enabled = true
  monitoring_interval         = 60
  monitoring_role_arn        = aws_iam_role.rds_monitoring.arn
  
  tags = {
    Name        = "Candlefish PostgreSQL Read Replica 2"
    Environment = var.environment
    Role        = "read-replica"
  }
}

# IAM role for enhanced monitoring
resource "aws_iam_role" "rds_monitoring" {
  name = "candlefish-rds-monitoring-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "monitoring.rds.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "rds_monitoring" {
  role       = aws_iam_role.rds_monitoring.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"
}

# CloudWatch Alarms
resource "aws_cloudwatch_metric_alarm" "database_cpu" {
  alarm_name          = "candlefish-rds-high-cpu"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name        = "CPUUtilization"
  namespace          = "AWS/RDS"
  period             = "300"
  statistic          = "Average"
  threshold          = "80"
  alarm_description  = "This metric monitors RDS CPU utilization"
  alarm_actions      = [aws_sns_topic.alerts.arn]

  dimensions = {
    DBInstanceIdentifier = aws_db_instance.main.id
  }
}

resource "aws_cloudwatch_metric_alarm" "database_storage" {
  alarm_name          = "candlefish-rds-low-storage"
  comparison_operator = "LessThanThreshold"
  evaluation_periods  = "1"
  metric_name        = "FreeStorageSpace"
  namespace          = "AWS/RDS"
  period             = "300"
  statistic          = "Average"
  threshold          = "10737418240" # 10GB in bytes
  alarm_description  = "This metric monitors RDS free storage"
  alarm_actions      = [aws_sns_topic.alerts.arn]

  dimensions = {
    DBInstanceIdentifier = aws_db_instance.main.id
  }
}

resource "aws_cloudwatch_metric_alarm" "database_connections" {
  alarm_name          = "candlefish-rds-high-connections"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name        = "DatabaseConnections"
  namespace          = "AWS/RDS"
  period             = "300"
  statistic          = "Average"
  threshold          = "400" # 80% of max_connections
  alarm_description  = "This metric monitors RDS connection count"
  alarm_actions      = [aws_sns_topic.alerts.arn]

  dimensions = {
    DBInstanceIdentifier = aws_db_instance.main.id
  }
}

resource "aws_cloudwatch_metric_alarm" "read_replica_lag" {
  for_each = {
    replica1 = aws_db_instance.read_replica_1.id
    replica2 = aws_db_instance.read_replica_2.id
  }

  alarm_name          = "candlefish-rds-replica-lag-${each.key}"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name        = "ReplicaLag"
  namespace          = "AWS/RDS"
  period             = "60"
  statistic          = "Average"
  threshold          = "1000" # 1 second in milliseconds
  alarm_description  = "This metric monitors replica lag"
  alarm_actions      = [aws_sns_topic.alerts.arn]

  dimensions = {
    DBInstanceIdentifier = each.value
  }
}

# SNS Topic for alerts
resource "aws_sns_topic" "alerts" {
  name = "candlefish-rds-alerts"

  tags = {
    Name        = "Candlefish RDS Alerts"
    Environment = var.environment
  }
}

# Outputs
output "db_instance_endpoint" {
  description = "The connection endpoint for the RDS instance"
  value       = aws_db_instance.main.endpoint
}

output "db_instance_address" {
  description = "The address of the RDS instance"
  value       = aws_db_instance.main.address
}

output "read_replica_endpoints" {
  description = "The connection endpoints for read replicas"
  value = {
    replica1 = aws_db_instance.read_replica_1.endpoint
    replica2 = aws_db_instance.read_replica_2.endpoint
  }
}

output "db_password_secret_arn" {
  description = "The ARN of the secret containing the database password"
  value       = aws_secretsmanager_secret.db_password.arn
}

# Data sources
data "aws_vpc" "main" {
  filter {
    name   = "tag:Name"
    values = ["candlefish-vpc"]
  }
}

data "aws_subnets" "private" {
  filter {
    name   = "vpc-id"
    values = [data.aws_vpc.main.id]
  }

  filter {
    name   = "tag:Type"
    values = ["private"]
  }
}

data "aws_security_group" "app" {
  filter {
    name   = "tag:Name"
    values = ["candlefish-app-sg"]
  }
}

data "aws_availability_zones" "available" {
  state = "available"
}