# Development environment with Docker Compose
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    container_name: inventory-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-inventory_system}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/migrations:ro
      - ./scripts:/app/scripts:ro
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    build:
      context: .
      dockerfile: Dockerfile.redis
    container_name: inventory-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "changeme", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Go Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: inventory-backend
    environment:
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      DB_NAME: ${POSTGRES_DB:-inventory_system}
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: changeme
      
      # API configuration
      PORT: 8080
      GIN_MODE: debug
      
      # File upload configuration
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: 10MB
      
      # External services
      AWS_REGION: ${AWS_REGION:-us-east-1}
    ports:
      - "${API_PORT:-8080}:8080"
    volumes:
      - uploads_data:/app/uploads
    networks:
      - backend
      - frontend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WebSocket Server
  websocket:
    build:
      context: ./websocket
      dockerfile: Dockerfile
    container_name: inventory-websocket
    environment:
      PORT: 8081
      NODE_ENV: development
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: changeme
    ports:
      - "${WS_PORT:-8081}:8081"
    networks:
      - backend
      - frontend
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:8080
        REACT_APP_WS_URL: ws://localhost:8081
        REACT_APP_CDN_URL: ${CDN_URL:-}
    container_name: inventory-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - frontend
    depends_on:
      - backend
      - websocket
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (optional for development)
  nginx:
    image: nginx:1.25-alpine
    container_name: inventory-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - frontend
    depends_on:
      - frontend
    restart: unless-stopped
    profiles:
      - with-nginx

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local