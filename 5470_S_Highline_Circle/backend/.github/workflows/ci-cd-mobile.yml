name: Mobile App CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/mobile-*' ]
    paths:
      - 'mobile/**'
      - '.github/workflows/ci-cd-mobile.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'mobile/**'

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '17'

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mobile
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm run test -- --coverage --watchAll=false

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./mobile/coverage
        flags: mobile
        name: mobile-coverage

  build-android:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install dependencies
      working-directory: ./mobile
      run: npm ci

    - name: Create .env file
      working-directory: ./mobile
      run: |
        echo "API_URL=https://api.inventory.example.com" > .env
        echo "WS_URL=wss://ws.inventory.example.com" >> .env
        echo "ENVIRONMENT=production" >> .env

    - name: Build Android APK
      working-directory: ./mobile
      run: |
        cd android
        ./gradlew assembleRelease
      env:
        SIGNING_KEY_ALIAS: ${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}
        SIGNING_STORE_PASSWORD: ${{ secrets.ANDROID_SIGNING_STORE_PASSWORD }}

    - name: Upload Android APK
      uses: actions/upload-artifact@v3
      with:
        name: android-apk
        path: mobile/android/app/build/outputs/apk/release/app-release.apk
        retention-days: 30

    - name: Build Android Bundle
      if: github.ref == 'refs/heads/main'
      working-directory: ./mobile
      run: |
        cd android
        ./gradlew bundleRelease

    - name: Upload Android Bundle
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: android-bundle
        path: mobile/android/app/build/outputs/bundle/release/app-release.aab
        retention-days: 30

  build-ios:
    needs: test
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true

    - name: Install dependencies
      working-directory: ./mobile
      run: npm ci

    - name: Install CocoaPods dependencies
      working-directory: ./mobile/ios
      run: |
        gem install cocoapods
        pod install

    - name: Create .env file
      working-directory: ./mobile
      run: |
        echo "API_URL=https://api.inventory.example.com" > .env
        echo "WS_URL=wss://ws.inventory.example.com" >> .env
        echo "ENVIRONMENT=production" >> .env

    - name: Build iOS App
      working-directory: ./mobile
      run: |
        npx react-native build-ios --configuration Release
      env:
        CODE_SIGNING_IDENTITY: ${{ secrets.IOS_CODE_SIGNING_IDENTITY }}
        PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}

    - name: Create IPA
      working-directory: ./mobile/ios
      run: |
        xcodebuild -workspace InventoryApp.xcworkspace \
          -scheme InventoryApp \
          -configuration Release \
          -archivePath build/InventoryApp.xcarchive \
          archive
        
        xcodebuild -exportArchive \
          -archivePath build/InventoryApp.xcarchive \
          -exportPath build \
          -exportOptionsPlist ExportOptions.plist

    - name: Upload iOS IPA
      uses: actions/upload-artifact@v3
      with:
        name: ios-ipa
        path: mobile/ios/build/InventoryApp.ipa
        retention-days: 30

  deploy-android-internal:
    needs: build-android
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Android APK
      uses: actions/download-artifact@v3
      with:
        name: android-apk
        path: ./

    - name: Deploy to Google Play Internal Testing
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.inventory.app
        releaseFiles: app-release.apk
        track: internal
        status: completed

  deploy-android-production:
    needs: build-android
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: google-play
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Android Bundle
      uses: actions/download-artifact@v3
      with:
        name: android-bundle
        path: ./

    - name: Deploy to Google Play Production
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.inventory.app
        releaseFiles: app-release.aab
        track: production
        status: completed
        whatsNewDirectory: mobile/metadata/android
        mappingFile: mobile/android/app/build/outputs/mapping/release/mapping.txt

  deploy-ios-testflight:
    needs: build-ios
    runs-on: macos-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download iOS IPA
      uses: actions/download-artifact@v3
      with:
        name: ios-ipa
        path: ./

    - name: Upload to TestFlight
      uses: Apple-Actions/upload-testflight-build@v1
      with:
        app-path: InventoryApp.ipa
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

  deploy-ios-production:
    needs: build-ios
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: app-store
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download iOS IPA
      uses: actions/download-artifact@v3
      with:
        name: ios-ipa
        path: ./

    - name: Upload to App Store
      uses: Apple-Actions/upload-testflight-build@v1
      with:
        app-path: InventoryApp.ipa
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

    - name: Submit for Review
      run: |
        # Use App Store Connect API to submit for review
        # This would typically be done through a custom script
        echo "App submitted to App Store for review"

  notify-deployment:
    needs: [deploy-android-production, deploy-ios-production]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify team
      run: |
        echo "ðŸš€ Mobile app deployment completed!"
        echo "âœ… Android: ${{ needs.deploy-android-production.result }}"
        echo "âœ… iOS: ${{ needs.deploy-ios-production.result }}"