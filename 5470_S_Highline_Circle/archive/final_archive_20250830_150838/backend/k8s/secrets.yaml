# Secrets Management Configuration for Item Valuation System
# Uses AWS Secrets Manager with Kubernetes integration

apiVersion: v1
kind: ServiceAccount
metadata:
  name: secrets-manager
  namespace: inventory-system
  annotations:
    # Associate service account with IAM role for AWS Secrets Manager access
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT-ID:role/inventory-secrets-manager-role
---
# AWS Secrets Store CSI Driver SecretProviderClass
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: inventory-secrets
  namespace: inventory-system
spec:
  provider: aws
  parameters:
    region: us-east-1
    objects: |
      - objectName: "production/inventory/database"
        objectType: "secretsmanager"
        jmesPath:
          - path: "username"
            objectAlias: "db-username"
          - path: "password"  
            objectAlias: "db-password"
          - path: "host"
            objectAlias: "db-host"
          - path: "port"
            objectAlias: "db-port"
          - path: "database"
            objectAlias: "db-name"
      - objectName: "production/inventory/redis"
        objectType: "secretsmanager"
        jmesPath:
          - path: "password"
            objectAlias: "redis-password"
          - path: "host"
            objectAlias: "redis-host"
      - objectName: "production/inventory/jwt"
        objectType: "secretsmanager" 
        jmesPath:
          - path: "secret"
            objectAlias: "jwt-secret"
          - path: "issuer"
            objectAlias: "jwt-issuer"
      - objectName: "production/inventory/smtp"
        objectType: "secretsmanager"
        jmesPath:
          - path: "username"
            objectAlias: "smtp-username"
          - path: "password"
            objectAlias: "smtp-password"
          - path: "host"
            objectAlias: "smtp-host"
      - objectName: "production/inventory/s3"
        objectType: "secretsmanager"
        jmesPath:
          - path: "bucket"
            objectAlias: "s3-bucket"
          - path: "region"
            objectAlias: "s3-region"
          - path: "access-key-id"
            objectAlias: "s3-access-key"
          - path: "secret-access-key"
            objectAlias: "s3-secret-key"
      - objectName: "production/inventory/monitoring"
        objectType: "secretsmanager"
        jmesPath:
          - path: "datadog-api-key"
            objectAlias: "datadog-api-key"
          - path: "slack-webhook"
            objectAlias: "slack-webhook"
      - objectName: "production/inventory/external-apis"
        objectType: "secretsmanager"
        jmesPath:
          - path: "stripe-secret"
            objectAlias: "stripe-secret"
          - path: "sendgrid-api-key"
            objectAlias: "sendgrid-api-key"
          - path: "twilio-auth-token"
            objectAlias: "twilio-auth-token"
  # Create Kubernetes secrets from AWS Secrets Manager
  secretObjects:
  - secretName: inventory-database-secret
    type: Opaque
    data:
    - objectName: db-username
      key: username
    - objectName: db-password
      key: password
    - objectName: db-host
      key: host
    - objectName: db-port
      key: port
    - objectName: db-name
      key: database
  - secretName: inventory-redis-secret
    type: Opaque
    data:
    - objectName: redis-password
      key: password
    - objectName: redis-host
      key: host
  - secretName: inventory-jwt-secret
    type: Opaque
    data:
    - objectName: jwt-secret
      key: secret
    - objectName: jwt-issuer
      key: issuer
  - secretName: inventory-smtp-secret
    type: Opaque
    data:
    - objectName: smtp-username
      key: username
    - objectName: smtp-password
      key: password
    - objectName: smtp-host
      key: host
  - secretName: inventory-s3-secret
    type: Opaque
    data:
    - objectName: s3-bucket
      key: bucket
    - objectName: s3-region
      key: region
    - objectName: s3-access-key
      key: access-key-id
    - objectName: s3-secret-key
      key: secret-access-key
  - secretName: inventory-monitoring-secret
    type: Opaque
    data:
    - objectName: datadog-api-key
      key: api-key
    - objectName: slack-webhook
      key: webhook-url
  - secretName: inventory-external-apis-secret
    type: Opaque
    data:
    - objectName: stripe-secret
      key: stripe-secret-key
    - objectName: sendgrid-api-key
      key: sendgrid-api-key
    - objectName: twilio-auth-token
      key: twilio-auth-token
---
# IAM Role for Secrets Manager Access (to be created via Terraform)
apiVersion: v1
kind: ConfigMap
metadata:
  name: secrets-manager-iam-policy
  namespace: inventory-system
data:
  policy.json: |
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue",
            "secretsmanager:DescribeSecret"
          ],
          "Resource": [
            "arn:aws:secretsmanager:us-east-1:ACCOUNT-ID:secret:production/inventory/*"
          ]
        },
        {
          "Effect": "Allow", 
          "Action": [
            "kms:Decrypt"
          ],
          "Resource": [
            "arn:aws:kms:us-east-1:ACCOUNT-ID:key/inventory-secrets-key"
          ]
        }
      ]
    }
---
# Secret for Grafana admin credentials
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin-secret
  namespace: monitoring
type: Opaque
data:
  # These should be rotated regularly and stored in AWS Secrets Manager
  admin-user: YWRtaW4=  # admin
  admin-password: ""  # To be populated from AWS Secrets Manager
---
# TLS Certificate Secret (managed by cert-manager)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: inventory-tls-cert
  namespace: inventory-system
spec:
  secretName: inventory-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: api.inventory.example.com
  dnsNames:
  - api.inventory.example.com
  - inventory.example.com
  - ws.inventory.example.com
---
# ClusterIssuer for Let's Encrypt certificates
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@inventory.example.com
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: alb
    - dns01:
        route53:
          region: us-east-1
          accessKeyID: ROUTE53_ACCESS_KEY_ID  # From secret
          secretAccessKeySecretRef:
            name: route53-credentials
            key: secret-access-key
---
# Route53 credentials for DNS challenges
apiVersion: v1
kind: Secret
metadata:
  name: route53-credentials
  namespace: cert-manager
type: Opaque
data:
  secret-access-key: ""  # To be populated from AWS Secrets Manager
---
# External Secrets Operator configuration
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: inventory-system
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: secrets-manager
---
# External Secret for database credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: inventory-system
spec:
  refreshInterval: 300s  # Refresh every 5 minutes
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: database-secret
    creationPolicy: Owner
  data:
  - secretKey: username
    remoteRef:
      key: production/inventory/database
      property: username
  - secretKey: password
    remoteRef:
      key: production/inventory/database
      property: password
  - secretKey: host
    remoteRef:
      key: production/inventory/database
      property: host
  - secretKey: port
    remoteRef:
      key: production/inventory/database
      property: port
  - secretKey: database
    remoteRef:
      key: production/inventory/database
      property: database
---
# External Secret for application secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: application-secrets
  namespace: inventory-system
spec:
  refreshInterval: 600s  # Refresh every 10 minutes
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: application-secret
    creationPolicy: Owner
  data:
  - secretKey: jwt-secret
    remoteRef:
      key: production/inventory/jwt
      property: secret
  - secretKey: redis-password
    remoteRef:
      key: production/inventory/redis
      property: password
  - secretKey: smtp-username
    remoteRef:
      key: production/inventory/smtp
      property: username
  - secretKey: smtp-password
    remoteRef:
      key: production/inventory/smtp
      property: password
---
# Secret rotation policy
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-rotation-policy
  namespace: inventory-system
data:
  policy.yaml: |
    rotation_policies:
      database_password:
        frequency: "monthly"
        notification: "7_days_before"
        auto_rotate: false
      jwt_secret:
        frequency: "quarterly"
        notification: "14_days_before"
        auto_rotate: true
      api_keys:
        frequency: "monthly"
        notification: "3_days_before"
        auto_rotate: false
      tls_certificates:
        frequency: "60_days_before_expiry"
        notification: "30_days_before"
        auto_rotate: true
---
# Network Policy for secrets access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: secrets-network-policy
  namespace: inventory-system
spec:
  podSelector:
    matchLabels:
      app: backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: inventory-system
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 443  # AWS API access
  - to: []  # Allow all outbound for AWS Secrets Manager
    ports:
    - protocol: TCP
      port: 443
---
# RBAC for secrets access
apiVersion: v1
kind: ServiceAccount
metadata:
  name: inventory-app
  namespace: inventory-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-reader
  namespace: inventory-system
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
  resourceNames:
  - "database-secret"
  - "application-secret"
  - "inventory-tls-secret"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: inventory-app-secret-reader
  namespace: inventory-system
subjects:
- kind: ServiceAccount
  name: inventory-app
  namespace: inventory-system
roleRef:
  kind: Role
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io
---
# Security scanning for secrets
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-scanning-config
  namespace: inventory-system
data:
  scan-config.yaml: |
    secret_scanning:
      enabled: true
      schedule: "0 2 * * *"  # Daily at 2 AM
      patterns:
        - "password"
        - "secret"
        - "key"
        - "token"
        - "credential"
      exclude_patterns:
        - "example"
        - "placeholder"
        - "template"
      notify_on_detection: true
      webhook_url: "${SLACK_SECURITY_WEBHOOK}"
---
# Vault integration (optional alternative to AWS Secrets Manager)
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  namespace: inventory-system
data:
  vault-config.json: |
    {
      "vault_addr": "https://vault.inventory.example.com",
      "vault_namespace": "inventory",
      "auth_method": "kubernetes",
      "role": "inventory-app",
      "secret_paths": {
        "database": "secret/data/production/database",
        "redis": "secret/data/production/redis",
        "jwt": "secret/data/production/jwt",
        "smtp": "secret/data/production/smtp"
      },
      "renewal_threshold": "24h",
      "retry_attempts": 3,
      "retry_interval": "30s"
    }