name: Comprehensive Test Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Go Backend Tests
  backend-tests:
    name: Backend Tests (Go)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          go test -v -race -coverprofile=unit_coverage.out -covermode=atomic ./tests/unit/...

      - name: Run integration tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
          REDIS_URL: redis://localhost:6379
        run: |
          go test -v -race -coverprofile=integration_coverage.out -covermode=atomic ./tests/integration/...

      - name: Run performance tests
        run: |
          go test -v -race -bench=. -benchmem ./tests/performance/...

      - name: Merge coverage reports
        run: |
          go install github.com/wadey/gocovmerge@latest
          gocovmerge unit_coverage.out integration_coverage.out > backend_coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend_coverage.out
          flags: backend
          name: backend-coverage

      - name: Generate coverage report
        run: |
          go tool cover -html=backend_coverage.out -o backend_coverage.html

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: |
            backend_coverage.out
            backend_coverage.html

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests (React)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run type checking
        working-directory: ./frontend
        run: npm run type-check

      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Run component tests
        working-directory: ./frontend
        run: npm run test:components

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/test-results/

  # Mobile App Tests
  mobile-tests:
    name: Mobile Tests (React Native)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Install mobile dependencies
        working-directory: ./mobile
        run: npm ci

      - name: Run mobile unit tests
        working-directory: ./mobile
        run: npm run test:coverage

      - name: Run offline sync tests
        working-directory: ./mobile
        run: npm run test:offline

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./mobile/coverage/lcov.info
          flags: mobile
          name: mobile-coverage

      - name: Upload mobile test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mobile-test-results
          path: |
            mobile/coverage/
            mobile/test-results/

  # E2E Tests
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: e2e_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && go mod download

      - name: Build application
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/e2e_test_db?sslmode=disable
        run: |
          cd backend && go build -o ../frontend/backend-server
          cd ../frontend && npm run build

      - name: Install Playwright
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Start test servers
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/e2e_test_db?sslmode=disable
        run: |
          cd frontend
          ./backend-server &
          npm run preview &
          sleep 10

      - name: Run E2E tests
        working-directory: ./frontend
        run: npx playwright test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit (Frontend)
        working-directory: ./frontend
        run: |
          npm ci
          npm audit --audit-level moderate

      - name: Run npm audit (Mobile)
        working-directory: ./mobile
        run: |
          npm ci
          npm audit --audit-level moderate

      - name: Run Go security check
        working-directory: ./backend
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt sarif -out gosec-results.sarif ./...

      - name: Upload GoSec results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: backend/gosec-results.sarif

  # Load Testing
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[load-test]')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: load_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Build application
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/load_test_db?sslmode=disable
        run: |
          cd backend
          go build -o server
          ./server &
          sleep 5

      - name: Run load tests
        run: |
          k6 run tests/load/valuation-load-test.js

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: load-test-results.json

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, mobile-tests, e2e-tests, security-tests]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Backend coverage
          if [ -f backend-coverage/backend_coverage.out ]; then
            BACKEND_COVERAGE=$(go tool cover -func=backend-coverage/backend_coverage.out | grep total | awk '{print $3}')
            echo "- **Backend Coverage**: $BACKEND_COVERAGE" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Frontend coverage
          if [ -f frontend-test-results/coverage/coverage-summary.json ]; then
            FRONTEND_COVERAGE=$(cat frontend-test-results/coverage/coverage-summary.json | jq -r '.total.lines.pct')
            echo "- **Frontend Coverage**: ${FRONTEND_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Mobile coverage
          if [ -f mobile-test-results/coverage/coverage-summary.json ]; then
            MOBILE_COVERAGE=$(cat mobile-test-results/coverage/coverage-summary.json | jq -r '.total.lines.pct')
            echo "- **Mobile Coverage**: ${MOBILE_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Mobile Tests: ${{ needs.mobile-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Check coverage thresholds
        run: |
          # Set minimum coverage thresholds
          MIN_BACKEND_COVERAGE=80
          MIN_FRONTEND_COVERAGE=75
          MIN_MOBILE_COVERAGE=70
          
          # Extract actual coverage percentages
          if [ -f backend-coverage/backend_coverage.out ]; then
            BACKEND_COVERAGE=$(go tool cover -func=backend-coverage/backend_coverage.out | grep total | awk '{print $3}' | sed 's/%//')
            if [ $(echo "$BACKEND_COVERAGE < $MIN_BACKEND_COVERAGE" | bc) -eq 1 ]; then
              echo "Backend coverage ($BACKEND_COVERAGE%) is below threshold ($MIN_BACKEND_COVERAGE%)"
              exit 1
            fi
          fi
          
          echo "All coverage thresholds met!"

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Test pipeline failed! Please check the test results and fix any failing tests before merging.'
            });

      - name: Notify on success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ All tests passed! Coverage thresholds met. Ready for merge.'
            });

# Workflow dispatch for manual testing
  manual-test:
    name: Manual Test Trigger
    if: github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/test-pipeline.yml