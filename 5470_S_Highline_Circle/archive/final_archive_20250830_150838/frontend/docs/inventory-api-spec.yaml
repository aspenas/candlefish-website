openapi: 3.1.0
info:
  title: Highline Inventory Management API
  version: 1.0.0
  description: |
    Comprehensive API for managing inventory at Highline.
    
    ## Authentication
    This API uses JWT authentication with httpOnly cookies and CSRF protection.
    
    ## Rate Limiting
    - Global rate limit: 100 requests per minute per user
    - Burst limit: 200 requests in 5 minutes
    
    ## Error Handling
    Standardized error responses with detailed error codes and messages.

  contact:
    name: Highline Inventory Support
    email: support@highline.work
    url: https://inventory.highline.work/support

servers:
  - url: https://5470-inventory.fly.dev/api/v1
    description: Production API Server

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JSON Web Token authentication. 
        Obtain by logging in via /auth/login endpoint.
        Include token in Authorization header.

  schemas:
    Item:
      type: object
      required:
        - id
        - name
        - category
        - quantity
        - value
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        category:
          type: string
        quantity:
          type: integer
          minimum: 0
        value:
          type: number
          format: float
          minimum: 0
        room:
          type: string
        tags:
          type: array
          items:
            type: string
        photos:
          type: array
          items:
            type: string
            format: uri

    Room:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'

    AuthUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum:
            - admin
            - editor
            - viewer

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: string

  parameters:
    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number for paginated results

    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
      description: Number of items per page

    SortParam:
      name: sort
      in: query
      schema:
        type: string
      description: Field to sort results by (e.g., "value", "name")

    FilterParam:
      name: filter
      in: query
      schema:
        type: string
      description: JSON-encoded filter criteria

  responses:
    Unauthorized:
      description: Authentication required or token invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Requested resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                name:
                  type: string
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'
        '400':
          description: Invalid registration details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successful login
          headers:
            Set-Cookie:
              schema:
                type: string
                description: HttpOnly JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      summary: Refresh authentication token
      tags:
        - Authentication
      security:
        - jwt: []
      responses:
        '200':
          description: Token refreshed successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                description: New HttpOnly JWT token

  /items:
    get:
      summary: List inventory items
      tags:
        - Inventory
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/FilterParam'
      responses:
        '200':
          description: Successfully retrieved items
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer

    post:
      summary: Create a new inventory item
      tags:
        - Inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Item successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

  /items/{itemId}:
    get:
      summary: Get a specific inventory item
      tags:
        - Inventory
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update an existing inventory item
      tags:
        - Inventory
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Item successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

    delete:
      summary: Delete an inventory item
      tags:
        - Inventory
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Item successfully deleted

  /photos/upload:
    post:
      summary: Upload item photos
      tags:
        - Photos
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                itemId:
                  type: string
                  format: uuid
                photos:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Photos uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  urls:
                    type: array
                    items:
                      type: string
                      format: uri

  /rooms:
    get:
      summary: List rooms
      tags:
        - Rooms
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Successfully retrieved rooms
          content:
            application/json:
              schema:
                type: object
                properties:
                  rooms:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
                  total:
                    type: integer

    post:
      summary: Create a new room
      tags:
        - Rooms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '201':
          description: Room successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'

  /analytics/summary:
    get:
      summary: Get inventory summary
      tags:
        - Analytics
      responses:
        '200':
          description: Inventory summary retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalItems:
                    type: integer
                  totalValue:
                    type: number
                    format: float
                  categorySummary:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        count:
                          type: integer
                        value:
                          type: number
                          format: float

  /batch/items:
    post:
      summary: Batch create or update items
      tags:
        - Batch Operations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/Item'
                mode:
                  type: string
                  enum:
                    - create
                    - update
                    - upsert
      responses:
        '200':
          description: Batch operation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    type: integer
                  updated:
                    type: integer
                  failed:
                    type: integer

security:
  - jwt: []

tags:
  - name: Authentication
    description: User registration and login operations
  - name: Inventory
    description: Manage inventory items
  - name: Rooms
    description: Manage room locations
  - name: Photos
    description: Upload and manage item photos
  - name: Analytics
    description: Inventory insights and summaries
  - name: Batch Operations
    description: Bulk create, update, or delete operations