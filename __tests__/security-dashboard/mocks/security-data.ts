// Mock data for security dashboard tests

export const mockSecurityOverview = {
  totalAssets: 25,
  criticalVulnerabilities: 3,
  activeAlerts: 7,
  complianceScore: 87.5,
  threatLevel: 'high' as const,
  vulnerabilitiesBySeverity: [
    { severity: 'critical', count: 3 },
    { severity: 'high', count: 8 },
    { severity: 'medium', count: 15 },
    { severity: 'low', count: 22 },
  ],
  recentEvents: 45,
  responseTime: '2.3h',
  uptime: '99.9%',
};

export const mockSecurityEvents = [
  {
    id: 'event-1',
    title: 'Failed Login Attempt',
    description: 'Multiple failed login attempts from suspicious IP',
    severity: 'high' as const,
    eventType: 'failed_login',
    source: 'authentication_service',
    sourceIp: '192.168.1.100',
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
    assetId: 'asset-1',
    assetName: 'Web Application',
    acknowledged: false,
    resolved: false,
    createdAt: '2024-01-15T10:30:00Z',
    metadata: {
      attemptCount: 5,
      targetUser: 'admin',
    },
  },
  {
    id: 'event-2',
    title: 'SQL Injection Attempt',
    description: 'Malicious SQL query detected in API endpoint',
    severity: 'critical' as const,
    eventType: 'sql_injection_attempt',
    source: 'api_gateway',
    sourceIp: '203.0.113.1',
    userAgent: 'curl/7.68.0',
    assetId: 'asset-2',
    assetName: 'API Gateway',
    acknowledged: false,
    resolved: false,
    createdAt: '2024-01-15T09:45:00Z',
    metadata: {
      endpoint: '/api/users',
      payload: "'; DROP TABLE users; --",
    },
  },
  {
    id: 'event-3',
    title: 'Unusual Network Traffic',
    description: 'Abnormal traffic pattern detected',
    severity: 'medium' as const,
    eventType: 'anomalous_network_traffic',
    source: 'network_monitor',
    sourceIp: '10.0.0.50',
    userAgent: null,
    assetId: 'asset-3',
    assetName: 'Load Balancer',
    acknowledged: true,
    resolved: false,
    createdAt: '2024-01-15T08:15:00Z',
    metadata: {
      trafficVolume: '150GB',
      duration: '30 minutes',
    },
  },
];

export const mockThreats = [
  {
    id: 'threat-1',
    title: 'Brute Force Attack',
    description: 'Coordinated brute force attack against login endpoints',
    severity: 'critical' as const,
    status: 'active' as const,
    confidence: 0.95,
    riskScore: 85,
    affectedAssets: ['asset-1', 'asset-2'],
    relatedEvents: ['event-1'],
    source: 'ml_threat_detection',
    detectedAt: '2024-01-15T10:00:00Z',
    lastUpdated: '2024-01-15T10:30:00Z',
    indicators: [
      'Multiple failed login attempts',
      'Requests from suspicious IP ranges',
      'Coordinated timing pattern',
    ],
  },
  {
    id: 'threat-2',
    title: 'Data Exfiltration Pattern',
    description: 'Suspicious data access pattern detected',
    severity: 'high' as const,
    status: 'investigating' as const,
    confidence: 0.78,
    riskScore: 72,
    affectedAssets: ['asset-2'],
    relatedEvents: ['event-2'],
    source: 'behavioral_analysis',
    detectedAt: '2024-01-15T09:30:00Z',
    lastUpdated: '2024-01-15T11:00:00Z',
    indicators: [
      'Large volume data queries',
      'Unusual access times',
      'Multiple database table access',
    ],
  },
  {
    id: 'threat-3',
    title: 'Malware Communication',
    description: 'Potential malware C&C communication detected',
    severity: 'medium' as const,
    status: 'resolved' as const,
    confidence: 0.65,
    riskScore: 45,
    affectedAssets: ['asset-3'],
    relatedEvents: ['event-3'],
    source: 'network_analysis',
    detectedAt: '2024-01-15T08:00:00Z',
    lastUpdated: '2024-01-15T12:00:00Z',
    resolvedAt: '2024-01-15T12:00:00Z',
    indicators: [
      'DNS queries to suspicious domains',
      'Encrypted traffic to unknown servers',
    ],
  },
];

export const mockIncidents = [
  {
    id: 'incident-1',
    incidentNumber: 'INC-2024-001',
    title: 'Security Breach Investigation',
    description: 'Investigating potential data breach following suspicious access patterns',
    severity: 'critical' as const,
    priority: 'critical' as const,
    status: 'investigating' as const,
    category: 'data_breach',
    source: 'automated_detection',
    confidenceLevel: 'high' as const,
    businessImpact: 'high' as const,
    customerImpact: true,
    dataInvolved: true,
    dataClassification: 'confidential',
    estimatedAffectedRecords: 10000,
    affectedAssets: ['asset-1', 'asset-2'],
    relatedEvents: ['event-1', 'event-2'],
    assignedTo: 'user-1',
    assignedToName: 'John Security',
    reporterId: 'system',
    investigationTeam: ['user-1', 'user-2', 'user-3'],
    createdAt: '2024-01-15T10:00:00Z',
    updatedAt: '2024-01-15T11:30:00Z',
    timeline: [
      {
        timestamp: '2024-01-15T10:00:00Z',
        action: 'Incident created',
        user: 'system',
        details: 'Automatically created from threat detection',
      },
      {
        timestamp: '2024-01-15T10:15:00Z',
        action: 'Assigned to security team',
        user: 'admin',
        details: 'Assigned to John Security for investigation',
      },
      {
        timestamp: '2024-01-15T11:30:00Z',
        action: 'Investigation started',
        user: 'user-1',
        details: 'Initial analysis of affected systems',
      },
    ],
  },
  {
    id: 'incident-2',
    incidentNumber: 'INC-2024-002',
    title: 'DDoS Attack Mitigation',
    description: 'Large-scale DDoS attack targeting web services',
    severity: 'high' as const,
    priority: 'high' as const,
    status: 'contained' as const,
    category: 'ddos',
    source: 'network_monitoring',
    confidenceLevel: 'high' as const,
    businessImpact: 'medium' as const,
    customerImpact: true,
    dataInvolved: false,
    affectedAssets: ['asset-3', 'asset-4'],
    relatedEvents: ['event-3'],
    assignedTo: 'user-2',
    assignedToName: 'Jane Network',
    reporterId: 'user-3',
    investigationTeam: ['user-2', 'user-4'],
    createdAt: '2024-01-15T08:00:00Z',
    updatedAt: '2024-01-15T12:00:00Z',
    resolvedAt: '2024-01-15T12:00:00Z',
    timeline: [
      {
        timestamp: '2024-01-15T08:00:00Z',
        action: 'Incident reported',
        user: 'user-3',
        details: 'High traffic volume detected',
      },
      {
        timestamp: '2024-01-15T08:30:00Z',
        action: 'Mitigation started',
        user: 'user-2',
        details: 'Rate limiting and traffic filtering enabled',
      },
      {
        timestamp: '2024-01-15T12:00:00Z',
        action: 'Attack contained',
        user: 'user-2',
        details: 'Traffic normalized, services restored',
      },
    ],
  },
  {
    id: 'incident-3',
    incidentNumber: 'INC-2024-003',
    title: 'Certificate Expiry Warning',
    description: 'SSL certificates expiring within 7 days',
    severity: 'low' as const,
    priority: 'medium' as const,
    status: 'open' as const,
    category: 'configuration',
    source: 'automated_check',
    confidenceLevel: 'high' as const,
    businessImpact: 'low' as const,
    customerImpact: false,
    dataInvolved: false,
    affectedAssets: ['asset-5'],
    relatedEvents: [],
    assignedTo: null,
    reporterId: 'system',
    investigationTeam: [],
    createdAt: '2024-01-15T06:00:00Z',
    updatedAt: '2024-01-15T06:00:00Z',
    timeline: [
      {
        timestamp: '2024-01-15T06:00:00Z',
        action: 'Incident created',
        user: 'system',
        details: 'Automated certificate expiry check',
      },
    ],
  },
];

export const mockAssets = [
  {
    id: 'asset-1',
    name: 'Main Web Application',
    assetType: 'web_application' as const,
    environment: 'production' as const,
    platform: 'vercel' as const,
    criticality: 'critical' as const,
    endpointUrl: 'https://app.candlefish.ai',
    healthCheckUrl: 'https://app.candlefish.ai/health',
    description: 'Main customer-facing web application',
    tags: ['frontend', 'customer-facing', 'react'],
    ownerTeam: 'Frontend Team',
    technicalContactEmail: 'frontend-team@candlefish.ai',
    businessContactEmail: 'product@candlefish.ai',
    complianceScope: ['PCI-DSS', 'GDPR'],
    lastSecurityScan: '2024-01-14T12:00:00Z',
    nextSecurityScan: '2024-01-21T12:00:00Z',
    securityScore: 85,
    monitoringEnabled: true,
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-14T12:00:00Z',
  },
  {
    id: 'asset-2',
    name: 'API Gateway',
    assetType: 'api_gateway' as const,
    environment: 'production' as const,
    platform: 'kong' as const,
    criticality: 'critical' as const,
    endpointUrl: 'https://api.candlefish.ai',
    healthCheckUrl: 'https://api.candlefish.ai/status',
    description: 'Main API gateway for all services',
    tags: ['api', 'gateway', 'kong'],
    ownerTeam: 'Platform Team',
    technicalContactEmail: 'platform-team@candlefish.ai',
    businessContactEmail: 'engineering@candlefish.ai',
    complianceScope: ['SOC2', 'ISO27001'],
    lastSecurityScan: '2024-01-13T18:00:00Z',
    nextSecurityScan: '2024-01-20T18:00:00Z',
    securityScore: 92,
    monitoringEnabled: true,
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-13T18:00:00Z',
  },
];

export const mockVulnerabilities = [
  {
    id: 'vuln-1',
    assetId: 'asset-1',
    assetName: 'Main Web Application',
    cveId: 'CVE-2024-12345',
    title: 'Cross-Site Scripting (XSS) Vulnerability',
    description: 'Reflected XSS vulnerability in search functionality allows execution of arbitrary JavaScript',
    severity: 'high' as const,
    status: 'open' as const,
    cvssScore: 7.2,
    cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N',
    affectedComponent: 'Search Component',
    affectedVersions: ['1.2.0', '1.2.1'],
    fixAvailable: true,
    fixVersion: '1.2.2',
    fixComplexity: 'low' as const,
    patchUrl: 'https://github.com/candlefish-ai/app/releases/tag/v1.2.2',
    workaround: 'Input validation can be temporarily implemented',
    exploitAvailable: false,
    exploitMaturity: 'proof_of_concept' as const,
    priority: 'high' as const,
    assignedTo: 'user-1',
    assignedToName: 'John Security',
    dueDate: '2024-01-22T00:00:00Z',
    businessImpact: 'Could allow attackers to steal user session cookies',
    technicalImpact: 'Execution of arbitrary JavaScript in user context',
    remediationEffortHours: 8,
    tags: ['xss', 'frontend', 'security'],
    firstDetected: '2024-01-15T09:00:00Z',
    lastSeen: '2024-01-15T09:00:00Z',
    createdAt: '2024-01-15T09:00:00Z',
    updatedAt: '2024-01-15T09:30:00Z',
  },
  {
    id: 'vuln-2',
    assetId: 'asset-2',
    assetName: 'API Gateway',
    cveId: 'CVE-2024-67890',
    title: 'SQL Injection in User Authentication',
    description: 'SQL injection vulnerability in login endpoint allows unauthorized access to user data',
    severity: 'critical' as const,
    status: 'in_progress' as const,
    cvssScore: 9.8,
    cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
    affectedComponent: 'Authentication Service',
    affectedVersions: ['2.1.0'],
    fixAvailable: true,
    fixVersion: '2.1.1',
    fixComplexity: 'medium' as const,
    patchUrl: 'https://github.com/candlefish-ai/api-gateway/releases/tag/v2.1.1',
    workaround: 'Use prepared statements for all database queries',
    exploitAvailable: true,
    exploitMaturity: 'functional' as const,
    priority: 'critical' as const,
    assignedTo: 'user-2',
    assignedToName: 'Jane Developer',
    dueDate: '2024-01-16T00:00:00Z',
    businessImpact: 'Complete compromise of user authentication system',
    technicalImpact: 'Full database access and data exfiltration possible',
    remediationEffortHours: 16,
    tags: ['sql-injection', 'authentication', 'critical'],
    firstDetected: '2024-01-14T15:30:00Z',
    lastSeen: '2024-01-15T10:00:00Z',
    createdAt: '2024-01-14T15:30:00Z',
    updatedAt: '2024-01-15T14:00:00Z',
  },
];

export const mockUsers = [
  {
    id: 'user-1',
    email: 'john.security@candlefish.ai',
    name: 'John Security',
    role: 'security_analyst' as const,
    permissions: [
      'security:read',
      'security:write',
      'incidents:read',
      'incidents:write',
      'vulnerabilities:read',
      'vulnerabilities:write',
    ],
    mfaEnabled: true,
    lastLogin: '2024-01-15T08:00:00Z',
    createdAt: '2024-01-01T00:00:00Z',
  },
  {
    id: 'user-2',
    email: 'jane.developer@candlefish.ai',
    name: 'Jane Developer',
    role: 'incident_responder' as const,
    permissions: [
      'security:read',
      'incidents:read',
      'incidents:write',
      'assets:read',
    ],
    mfaEnabled: true,
    lastLogin: '2024-01-15T07:30:00Z',
    createdAt: '2024-01-01T00:00:00Z',
  },
];

export const mockAlerts = [
  {
    id: 'alert-1',
    ruleId: 'rule-1',
    ruleName: 'Brute Force Detection',
    title: 'Multiple Failed Login Attempts Detected',
    description: 'Detected 10 failed login attempts from IP 192.168.1.100 in the last 5 minutes',
    severity: 'high' as const,
    status: 'open' as const,
    confidenceScore: 0.95,
    riskScore: 80,
    affectedAssets: ['asset-1'],
    relatedEvents: ['event-1'],
    evidence: {
      ipAddress: '192.168.1.100',
      attemptCount: 10,
      timeWindow: '5 minutes',
      targetUsers: ['admin', 'user1', 'test'],
    },
    assignedTo: 'user-1',
    createdAt: '2024-01-15T10:30:00Z',
    updatedAt: '2024-01-15T10:30:00Z',
  },
];

export const mockCompliance = {
  overallScore: 87.5,
  frameworks: [
    {
      name: 'SOC 2 Type II',
      shortName: 'SOC2',
      score: 92,
      status: 'compliant' as const,
      lastAssessment: '2024-01-01T00:00:00Z',
      nextAssessment: '2024-04-01T00:00:00Z',
      controls: {
        total: 150,
        compliant: 138,
        nonCompliant: 8,
        notApplicable: 4,
      },
    },
    {
      name: 'ISO 27001',
      shortName: 'ISO27001',
      score: 85,
      status: 'partially_compliant' as const,
      lastAssessment: '2024-01-01T00:00:00Z',
      nextAssessment: '2024-07-01T00:00:00Z',
      controls: {
        total: 114,
        compliant: 97,
        nonCompliant: 12,
        notApplicable: 5,
      },
    },
    {
      name: 'PCI DSS',
      shortName: 'PCI-DSS',
      score: 78,
      status: 'non_compliant' as const,
      lastAssessment: '2024-01-01T00:00:00Z',
      nextAssessment: '2024-03-01T00:00:00Z',
      controls: {
        total: 300,
        compliant: 234,
        nonCompliant: 45,
        notApplicable: 21,
      },
    },
  ],
};

export const mockMetrics = {
  securityEventsPerMinute: {
    current: 12.5,
    trend: 'up' as const,
    change: 15.2,
  },
  meanTimeToDetection: {
    current: 4.2, // minutes
    trend: 'down' as const,
    change: -8.5,
  },
  meanTimeToResolution: {
    current: 142, // minutes
    trend: 'down' as const,
    change: -12.3,
  },
  falsePositiveRate: {
    current: 5.8, // percentage
    trend: 'down' as const,
    change: -2.1,
  },
};

// Helper function to generate random data for testing
export const generateMockEvent = (overrides: Partial<typeof mockSecurityEvents[0]> = {}) => ({
  ...mockSecurityEvents[0],
  id: `event-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
  createdAt: new Date().toISOString(),
  ...overrides,
});

export const generateMockThreat = (overrides: Partial<typeof mockThreats[0]> = {}) => ({
  ...mockThreats[0],
  id: `threat-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
  detectedAt: new Date().toISOString(),
  lastUpdated: new Date().toISOString(),
  ...overrides,
});

export const generateMockIncident = (overrides: Partial<typeof mockIncidents[0]> = {}) => ({
  ...mockIncidents[0],
  id: `incident-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
  incidentNumber: `INC-2024-${String(Date.now()).slice(-6)}`,
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
  ...overrides,
});