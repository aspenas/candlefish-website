# Security Dashboard - Simple Development Setup
# Direct Node.js without complex builds

version: '3.8'

networks:
  security-dashboard:
    driver: bridge
  
volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:

services:
  # Database Layer
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: security-dashboard-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: security_dashboard
      POSTGRES_USER: dashboard_user
      POSTGRES_PASSWORD: dev_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/database/security-dashboard-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5433:5432"
    networks:
      - security-dashboard
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dashboard_user -d security_dashboard"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: security-dashboard-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - security-dashboard
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf

  # Simple GraphQL Backend
  backend-api:
    image: node:20-alpine
    container_name: security-dashboard-backend
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./graphql:/app
      - ./deployment/logs:/app/logs
    ports:
      - "4000:4000"
      - "4001:4001"
    environment:
      NODE_ENV: development
      PORT: 4000
      DATABASE_URL: postgres://dashboard_user:dev_password_2024@postgres:5432/security_dashboard
      REDIS_URL: redis://redis:6379
      GRAPHQL_PLAYGROUND: "true"
      GRAPHQL_INTROSPECTION: "true"
      LOG_LEVEL: debug
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173,http://localhost:8080"
      JWT_SECRET: dev_jwt_secret_key_2024
      WEBSOCKET_ENABLED: "true"
      METRICS_ENABLED: "true"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - security-dashboard
    command: sh -c "npm install --no-package-lock && node dist/server.js"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 15s
      timeout: 3s
      retries: 3

  # Simple Frontend Server
  frontend:
    image: nginx:alpine
    container_name: security-dashboard-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - ./apps/security-dashboard/dist:/usr/share/nginx/html:ro
      - ./deployment/nginx/frontend.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend-api
    networks:
      - security-dashboard
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 15s
      timeout: 3s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: security-dashboard-prometheus
    restart: unless-stopped
    ports:
      - "9092:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./deployment/monitoring/prometheus-security-dashboard.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - security-dashboard
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 15s
      timeout: 3s
      retries: 3

  grafana:
    image: grafana/grafana:10.0.0
    container_name: security-dashboard-grafana
    restart: unless-stopped
    ports:
      - "3004:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: dev_admin_password_2024
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_DOMAIN: localhost
      GF_SERVER_ROOT_URL: "http://localhost:3004/"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    depends_on:
      - prometheus
      - postgres
    networks:
      - security-dashboard
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 15s
      timeout: 3s
      retries: 3

  # Health Checker
  health-checker:
    image: alpine:3.18
    container_name: security-dashboard-health
    restart: unless-stopped
    networks:
      - security-dashboard
    volumes:
      - ./scripts/health-check-local.sh:/usr/local/bin/health-check.sh:ro
    command: >
      sh -c "
        apk add --no-cache curl wget &&
        chmod +x /usr/local/bin/health-check.sh &&
        while true; do
          /usr/local/bin/health-check.sh
          sleep 30
        done
      "
    depends_on:
      - postgres
      - redis
      - backend-api
      - frontend