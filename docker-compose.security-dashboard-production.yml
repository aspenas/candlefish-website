# Security Dashboard Production Infrastructure
# Production-ready deployment with security hardening and monitoring
version: '3.8'

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    labels: "service,environment"

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

x-aws-secrets: &aws-secrets-env
  AWS_REGION: us-east-1
  AWS_DEFAULT_REGION: us-east-1

services:
  # ============================================================================
  # Core Databases
  # ============================================================================
  
  # PostgreSQL 15 with TimescaleDB for time-series data
  postgres-timescale:
    image: timescale/timescaledb:2.11.2-pg15
    container_name: security-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: security_dashboard
      POSTGRES_USER: security_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/database/security-dashboard-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./deployment/database/timescale-init.sql:/docker-entrypoint-initdb.d/02-timescale.sql:ro
      - ./deployment/database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "127.0.0.1:5432:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "pg_isready -U security_user -d security_dashboard"]
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging: *default-logging
    networks:
      - security-backend
      - monitoring
    labels:
      - "traefik.enable=false"
      - "service=postgres-timescale"
      - "environment=production"

  # Redis 7 for multi-level caching and session storage
  redis:
    image: redis:7.2-alpine
    container_name: security-redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    environment:
      <<: *aws-secrets-env
    volumes:
      - redis_data:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging: *default-logging
    networks:
      - security-backend
    labels:
      - "service=redis"
      - "environment=production"

  # Neo4j for threat intelligence graphs
  neo4j:
    image: neo4j:5.12-community
    container_name: security-neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
      NEO4J_dbms_security_procedures_unrestricted: gds.*,apoc.*
      NEO4J_dbms_security_procedures_allowlist: gds.*,apoc.*
      NEO4J_dbms_memory_heap_initial__size: 1G
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
      <<: *aws-secrets-env
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./deployment/neo4j/neo4j.conf:/conf/neo4j.conf:ro
    ports:
      - "127.0.0.1:7474:7474"  # HTTP
      - "127.0.0.1:7687:7687"  # Bolt
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging: *default-logging
    networks:
      - security-backend
    labels:
      - "service=neo4j"
      - "environment=production"

  # ============================================================================
  # Security Dashboard Services
  # ============================================================================

  # GraphQL Gateway with Apollo Federation
  graphql-gateway:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.graphql-gateway
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-unknown}
        VCS_REF: ${VCS_REF:-unknown}
        VERSION: ${VERSION:-latest}
    image: candlefish/security-dashboard-graphql:${VERSION:-latest}
    container_name: security-graphql-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      GRAPHQL_PLAYGROUND: false
      GRAPHQL_INTROSPECTION: false
      DATABASE_URL: postgresql://security_user:${POSTGRES_PASSWORD}@postgres-timescale:5432/security_dashboard
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ISSUER: https://security.candlefish.ai
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      LOG_LEVEL: info
      METRICS_ENABLED: true
      CORS_ORIGINS: https://security.candlefish.ai,https://admin.candlefish.ai
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 5000
      SENTRY_DSN: ${SENTRY_DSN}
      <<: *aws-secrets-env
    depends_on:
      postgres-timescale:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    ports:
      - "127.0.0.1:4000:4000"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "node", "/app/healthcheck.js"]
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        max_attempts: 3
    logging: *default-logging
    networks:
      - security-backend
      - security-frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.graphql.rule=Host(`api.security.candlefish.ai`)"
      - "traefik.http.routers.graphql.tls=true"
      - "traefik.http.services.graphql.loadbalancer.server.port=4000"
      - "service=graphql-gateway"
      - "environment=production"

  # REST API Service for legacy integrations
  rest-api:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.backend
      target: runtime
      args:
        BUILD_DATE: ${BUILD_DATE:-unknown}
        VCS_REF: ${VCS_REF:-unknown}
        VERSION: ${VERSION:-latest}
    image: candlefish/security-dashboard-api:${VERSION:-latest}
    container_name: security-rest-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4001
      DATABASE_URL: postgresql://security_user:${POSTGRES_PASSWORD}@postgres-timescale:5432/security_dashboard
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      LOG_LEVEL: info
      API_RATE_LIMIT: 1000
      <<: *aws-secrets-env
    depends_on:
      postgres-timescale:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "127.0.0.1:4001:4001"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging: *default-logging
    networks:
      - security-backend
      - security-frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rest-api.rule=Host(`api.security.candlefish.ai`) && PathPrefix(`/api/v1`)"
      - "traefik.http.routers.rest-api.tls=true"
      - "service=rest-api"
      - "environment=production"

  # WebSocket Service for real-time events
  websocket-service:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.websocket-service
      target: production
    image: candlefish/security-dashboard-websocket:${VERSION:-latest}
    container_name: security-websocket
    restart: unless-stopped
    environment:
      NODE_ENV: production
      WS_PORT: 4002
      METRICS_PORT: 4003
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/2
      JWT_SECRET: ${JWT_SECRET}
      WS_AUTH_SECRET: ${WS_AUTH_SECRET}
      WS_HEARTBEAT_INTERVAL: 30000
      WS_MAX_CONNECTIONS_PER_IP: 50
      LOG_LEVEL: info
      UV_THREADPOOL_SIZE: 128
      <<: *aws-secrets-env
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "127.0.0.1:4002:4002"
      - "127.0.0.1:4003:4003"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "node", "/app/healthcheck.js"]
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging: *default-logging
    networks:
      - security-backend
      - security-frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.websocket.rule=Host(`ws.security.candlefish.ai`)"
      - "traefik.http.routers.websocket.tls=true"
      - "service=websocket-service"
      - "environment=production"

  # Authentication Service with JWT/JWKS
  auth-service:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.auth-service
      target: production
    image: candlefish/security-dashboard-auth:${VERSION:-latest}
    container_name: security-auth
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4004
      DATABASE_URL: postgresql://security_user:${POSTGRES_PASSWORD}@postgres-timescale:5432/security_dashboard
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/3
      JWT_SECRET: ${JWT_SECRET}
      JWT_ISSUER: https://security.candlefish.ai
      JWT_AUDIENCE: security-dashboard
      JWT_EXPIRES_IN: 24h
      REFRESH_TOKEN_EXPIRES_IN: 30d
      JWKS_ENDPOINT: https://auth.security.candlefish.ai/.well-known/jwks.json
      OAUTH_GOOGLE_CLIENT_ID: ${OAUTH_GOOGLE_CLIENT_ID}
      OAUTH_GOOGLE_CLIENT_SECRET: ${OAUTH_GOOGLE_CLIENT_SECRET}
      OAUTH_GITHUB_CLIENT_ID: ${OAUTH_GITHUB_CLIENT_ID}
      OAUTH_GITHUB_CLIENT_SECRET: ${OAUTH_GITHUB_CLIENT_SECRET}
      MFA_ENABLED: true
      TOTP_ISSUER: Candlefish Security Dashboard
      LOG_LEVEL: info
      <<: *aws-secrets-env
    depends_on:
      postgres-timescale:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "127.0.0.1:4004:4004"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:4004/health"]
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging: *default-logging
    networks:
      - security-backend
      - security-frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`auth.security.candlefish.ai`)"
      - "traefik.http.routers.auth.tls=true"
      - "service=auth-service"
      - "environment=production"

  # Security Dashboard Frontend
  frontend:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.security-dashboard-frontend
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-unknown}
        VCS_REF: ${VCS_REF:-unknown}
        VERSION: ${VERSION:-latest}
    image: candlefish/security-dashboard-frontend:${VERSION:-latest}
    container_name: security-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: 0.0.0.0
      NEXT_TELEMETRY_DISABLED: 1
      NEXT_PUBLIC_GRAPHQL_URL: https://api.security.candlefish.ai/graphql
      NEXT_PUBLIC_WS_URL: wss://ws.security.candlefish.ai/graphql
      NEXT_PUBLIC_AUTH_URL: https://auth.security.candlefish.ai
      NEXTAUTH_URL: https://security.candlefish.ai
      NEXTAUTH_SECRET: ${JWT_SECRET}
      NEXT_PUBLIC_SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      - graphql-gateway
      - websocket-service
      - auth-service
    ports:
      - "127.0.0.1:3000:3000"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging: *default-logging
    networks:
      - security-frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`security.candlefish.ai`)"
      - "traefik.http.routers.frontend.tls=true"
      - "service=frontend"
      - "environment=production"

  # ============================================================================
  # Infrastructure Services
  # ============================================================================

  # Kong Gateway for API management and security
  kong-gateway:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.kong-gateway
    image: candlefish/security-kong:${VERSION:-latest}
    container_name: security-kong-gateway
    restart: unless-stopped
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres-timescale
      KONG_PG_PORT: 5432
      KONG_PG_DATABASE: kong_security
      KONG_PG_USER: security_user
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_PLUGINS: bundled,jwt,rate-limiting,cors,key-auth,oauth2,acl,request-size-limiting,response-ratelimiting
      KONG_LOG_LEVEL: info
    depends_on:
      postgres-timescale:
        condition: service_healthy
    ports:
      - "8000:8000"   # Proxy HTTP
      - "8443:8443"   # Proxy HTTPS
      - "127.0.0.1:8001:8001"   # Admin API
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "kong", "health"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging: *default-logging
    networks:
      - security-frontend
      - security-backend
    labels:
      - "service=kong-gateway"
      - "environment=production"

  # Load Balancer with Traefik
  traefik:
    image: traefik:v3.0
    container_name: security-traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.insecure=false
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=admin@candlefish.ai
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --log.level=INFO
      - --accesslog=true
      - --metrics.prometheus=true
      - --metrics.prometheus.entrypoint=metrics
      - --entrypoints.metrics.address=:8080
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "traefik", "healthcheck"]
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    logging: *default-logging
    networks:
      - security-frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.security.candlefish.ai`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "service=traefik"
      - "environment=production"

  # ============================================================================
  # Monitoring Stack
  # ============================================================================

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: security-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=https://prometheus.security.candlefish.ai'
      - '--log.level=info'
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./deployment/monitoring/prometheus-security-dashboard.yml:/etc/prometheus/prometheus.yml:ro
      - ./deployment/monitoring/security-dashboard-alerts.yaml:/etc/prometheus/rules/alert-rules.yaml:ro
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.25'
    logging: *default-logging
    networks:
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.security.candlefish.ai`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "service=prometheus"
      - "environment=production"

  # Grafana for visualization dashboards
  grafana:
    image: grafana/grafana-oss:10.1.1
    container_name: security-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel,vonage-status-panel
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_USERS_ALLOW_SIGN_UP: false
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_SERVER_DOMAIN: grafana.security.candlefish.ai
      GF_SERVER_ROOT_URL: https://grafana.security.candlefish.ai
      GF_SMTP_ENABLED: true
      GF_SMTP_HOST: ${SMTP_HOST}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
      GF_SMTP_FROM_ADDRESS: alerts@candlefish.ai
    ports:
      - "127.0.0.1:3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./deployment/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.1'
    logging: *default-logging
    networks:
      - monitoring
      - security-frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.security.candlefish.ai`)"
      - "traefik.http.routers.grafana.tls=true"
      - "service=grafana"
      - "environment=production"

  # AlertManager for alert routing and management
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: security-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alerts.security.candlefish.ai'
      - '--log.level=info'
    ports:
      - "127.0.0.1:9093:9093"
    volumes:
      - alertmanager_data:/alertmanager
      - ./deployment/monitoring/alertmanager/config.yaml:/etc/alertmanager/config.yml:ro
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    logging: *default-logging
    networks:
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`alerts.security.candlefish.ai`)"
      - "traefik.http.routers.alertmanager.tls=true"
      - "service=alertmanager"
      - "environment=production"

# ============================================================================
# Volumes for persistent data storage
# ============================================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/security-dashboard/data/postgres

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/security-dashboard/data/redis

  neo4j_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/security-dashboard/data/neo4j

  neo4j_logs:
    driver: local

  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/security-dashboard/monitoring/prometheus

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/security-dashboard/monitoring/grafana

  alertmanager_data:
    driver: local

  traefik_letsencrypt:
    driver: local

# ============================================================================
# Docker Secrets for secure credential management
# ============================================================================
secrets:
  postgres_password:
    external: true
  redis_password:
    external: true
  jwt_secret:
    external: true
  encryption_key:
    external: true

# ============================================================================
# Networks for service isolation
# ============================================================================
networks:
  security-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
    driver_opts:
      com.docker.network.bridge.name: security-frontend
      
  security-backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.31.0.0/16
    driver_opts:
      com.docker.network.bridge.name: security-backend
      
  monitoring:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.32.0.0/16
    driver_opts:
      com.docker.network.bridge.name: monitoring