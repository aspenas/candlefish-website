version: '3.8'

# Production Docker Compose for Candlefish AI with Analytics Dashboard
# Includes all components with production-ready configuration and CLOS Analytics

services:
  # CLOS Web Dashboard with Analytics
  clos-web-dashboard:
    build:
      context: ./clos/web-dashboard
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-now}
        VCS_REF: ${VCS_REF:-latest}
        VERSION: ${VERSION:-1.0.0}
    image: candlefish/clos-dashboard:${VERSION:-latest}
    container_name: clos-web-dashboard
    restart: unless-stopped
    ports:
      - "3500:3500"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=http://clos-api:8000
      - NEXT_PUBLIC_WS_URL=ws://clos-websocket:8001
      - NEXT_PUBLIC_ANALYTICS_ENABLED=true
      - NEXTAUTH_URL=${NEXTAUTH_URL:-https://clos.candlefish.ai}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - dashboard-logs:/app/logs
    networks:
      - candlefish-network
    depends_on:
      - clos-api
      - clos-websocket
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.clos-dashboard.rule=Host(`clos.candlefish.ai`)"
      - "traefik.http.routers.clos-dashboard.tls=true"
      - "traefik.http.routers.clos-dashboard.tls.certresolver=letsencrypt"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3500/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # CLOS API Server with Analytics Endpoints
  clos-api:
    build:
      context: ./clos/api-server
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-now}
        VCS_REF: ${VCS_REF:-latest}
        VERSION: ${VERSION:-1.0.0}
    image: candlefish/clos-api:${VERSION:-latest}
    container_name: clos-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PORT=8000
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ANALYTICS_RETENTION_DAYS=90
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=1000
      - AWS_REGION=${AWS_REGION}
    volumes:
      - api-logs:/app/logs
    networks:
      - candlefish-network
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.clos-api.rule=Host(`api.candlefish.ai`) && PathPrefix(`/clos`)"
      - "traefik.http.routers.clos-api.tls=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CLOS WebSocket Server for Real-time Analytics
  clos-websocket:
    build:
      context: ./clos/websocket-server
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-now}
        VCS_REF: ${VCS_REF:-latest}
        VERSION: ${VERSION:-1.0.0}
    image: candlefish/clos-websocket:${VERSION:-latest}
    container_name: clos-websocket
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=production
      - PORT=8001
      - REDIS_URL=${REDIS_URL}
      - WS_HEARTBEAT_INTERVAL=30000
      - WS_MAX_CONNECTIONS=10000
      - ANALYTICS_EVENTS_BUFFER_SIZE=1000
    volumes:
      - websocket-logs:/app/logs
    networks:
      - candlefish-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.clos-ws.rule=Host(`ws.candlefish.ai`)"
      - "traefik.http.routers.clos-ws.tls=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Core Web Application
  candlefish-website:
    build:
      context: ./brand/website
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-now}
        VCS_REF: ${VCS_REF:-latest}
        VERSION: ${VERSION:-1.0.0}
    image: candlefish/website:${VERSION:-latest}
    container_name: candlefish-website
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - AWS_REGION=${AWS_REGION}
    volumes:
      - website-logs:/app/logs
    networks:
      - candlefish-network
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.website.rule=Host(`candlefish.ai`)"
      - "traefik.http.routers.website.tls=true"
      - "traefik.http.routers.website.tls.certresolver=letsencrypt"
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # RTPM API Service
  rtpm-api:
    build:
      context: ./apps/rtpm-api
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE:-now}
        VCS_REF: ${VCS_REF:-latest}
        VERSION: ${VERSION:-1.0.0}
    image: candlefish/rtpm-api:${VERSION:-latest}
    container_name: rtpm-api
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    volumes:
      - rtpm-logs:/app/logs
    networks:
      - candlefish-network
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rtpm-api.rule=Host(`api.candlefish.ai`) && PathPrefix(`/rtpm`)"
      - "traefik.http.routers.rtpm-api.tls=true"
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NANDA API Service
  nanda-api:
    build:
      context: ./apps/nanda-api
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE:-now}
        VCS_REF: ${VCS_REF:-latest}
        VERSION: ${VERSION:-1.0.0}
    image: candlefish/nanda-api:${VERSION:-latest}
    container_name: nanda-api
    restart: unless-stopped
    ports:
      - "8002:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - nanda-logs:/app/logs
    networks:
      - candlefish-network
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nanda-api.rule=Host(`api.candlefish.ai`) && PathPrefix(`/nanda`)"
      - "traefik.http.routers.nanda-api.tls=true"
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Otter Gateway Service
  otter-gateway:
    build:
      context: ./apps/otter-gateway
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE:-now}
        VCS_REF: ${VCS_REF:-latest}
        VERSION: ${VERSION:-1.0.0}
    image: candlefish/otter-gateway:${VERSION:-latest}
    container_name: otter-gateway
    restart: unless-stopped
    ports:
      - "8003:3000"
    environment:
      - NODE_ENV=production
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-900000}
    volumes:
      - gateway-logs:/app/logs
    networks:
      - candlefish-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gateway.rule=Host(`api.candlefish.ai`)"
      - "traefik.http.routers.gateway.tls=true"
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: candlefish-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-candlefish}
      - POSTGRES_USER=${POSTGRES_USER:-candlefish}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS="--auth-host=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - candlefish-network
    command: >
      postgres
        -c shared_preload_libraries=pg_stat_statements
        -c pg_stat_statements.track=all
        -c max_connections=200
        -c shared_buffers=256MB
        -c effective_cache_size=1GB
        -c work_mem=4MB
        -c maintenance_work_mem=64MB
        -c random_page_cost=1.1
        -c temp_file_limit=2GB
        -c log_min_duration_statement=1000
        -c log_checkpoints=on
        -c log_connections=on
        -c log_disconnections=on
        -c log_lock_waits=on
        -c log_temp_files=0
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-candlefish} -d ${POSTGRES_DB:-candlefish}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: candlefish-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
        --appendonly yes
        --appendfsync everysec
        --maxmemory 512mb
        --maxmemory-policy allkeys-lru
        --tcp-keepalive 60
        --timeout 300
        --databases 16
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - candlefish-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reverse Proxy with SSL Termination
  traefik:
    image: traefik:v3.0
    container_name: candlefish-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--global.checknewversion=false"
      - "--global.sendanonymoususage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-acme:/acme.json
    networks:
      - candlefish-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.candlefish.ai`)"
      - "traefik.http.routers.traefik.tls=true"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: candlefish-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - candlefish-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.candlefish.ai`)"
      - "traefik.http.routers.prometheus.tls=true"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: candlefish-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - candlefish-network
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.candlefish.ai`)"
      - "traefik.http.routers.grafana.tls=true"

  # Log Aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-debian
    container_name: candlefish-fluentd
    restart: unless-stopped
    ports:
      - "24224:24224"
    volumes:
      - ./monitoring/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - fluentd-logs:/var/log/fluentd
    networks:
      - candlefish-network
    depends_on:
      - postgres

volumes:
  # Application Data
  postgres-data:
    driver: local
  redis-data:
    driver: local
  
  # Application Logs
  website-logs:
    driver: local
  rtpm-logs:
    driver: local
  nanda-logs:
    driver: local
  gateway-logs:
    driver: local
  dashboard-logs:
    driver: local
  api-logs:
    driver: local
  websocket-logs:
    driver: local
  
  # Monitoring Data
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  fluentd-logs:
    driver: local
  
  # SSL Certificates
  traefik-acme:
    driver: local

networks:
  candlefish-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16