# =============================================================================
# COLLABORATION PLATFORM SUBSCRIPTIONS
# Real-time subscription schema for live collaboration features
# =============================================================================

extend type Subscription {
  # =============================================================================
  # DOCUMENT REAL-TIME SUBSCRIPTIONS
  # =============================================================================
  
  """
  Subscribe to all document changes including content, permissions, and metadata
  """
  documentChanged(
    documentId: UUID!
    changeTypes: [DocumentChangeType!]
    includeOwnChanges: Boolean = false
  ): DocumentChangeEvent! @auth(requires: VIEW)
  
  """
  Subscribe to document content changes with operational transform events
  """
  documentContentChanged(
    documentId: UUID!
    blockIds: [UUID!]
    minSignificance: ChangeSignificance = MINOR
  ): DocumentContentChangeEvent! @auth(requires: VIEW)
  
  """
  Subscribe to document operation stream for real-time collaborative editing
  """
  documentOperations(
    documentId: UUID!
    excludeClientId: UUID
    afterSequence: NonNegativeInt
  ): DocumentOperationEvent! @auth(requires: VIEW) @rateLimit(max: 10000, window: 3600)
  
  """
  Subscribe to conflict detection and resolution events
  """
  documentConflicts(
    documentId: UUID!
    myConflictsOnly: Boolean = true
    includeAutoResolved: Boolean = false
  ): DocumentConflictEvent! @auth(requires: EDIT)
  
  # =============================================================================
  # PRESENCE AND COLLABORATION SUBSCRIPTIONS
  # =============================================================================
  
  """
  Subscribe to user presence changes in a document
  """
  documentPresenceChanged(
    documentId: UUID!
    includeIdleUsers: Boolean = false
  ): PresenceChangeEvent! @auth(requires: VIEW)
  
  """
  Subscribe to cursor position and selection changes
  """
  cursorPositionChanged(
    documentId: UUID!
    userIds: [UUID!]
    includeSelections: Boolean = true
  ): CursorPositionEvent! @auth(requires: VIEW)
  
  """
  Subscribe to user awareness events (typing, scrolling, etc.)
  """
  userAwarenessChanged(
    documentId: UUID!
    awarenessTypes: [AwarenessType!] = [TYPING, SCROLLING, SELECTION]
  ): UserAwarenessEvent! @auth(requires: VIEW)
  
  # =============================================================================
  # COMMENT AND ANNOTATION SUBSCRIPTIONS
  # =============================================================================
  
  """
  Subscribe to new comments and comment updates
  """
  commentActivity(
    documentId: UUID!
    commentTypes: [CommentType!]
    mentionsOnly: Boolean = false
    includeRepliesToMe: Boolean = true
  ): CommentActivityEvent! @auth(requires: VIEW)
  
  """
  Subscribe to comment thread resolution events
  """
  commentResolutionChanged(
    documentId: UUID!
    myThreadsOnly: Boolean = false
  ): CommentResolutionEvent! @auth(requires: VIEW)
  
  # =============================================================================
  # AI INTEGRATION SUBSCRIPTIONS
  # =============================================================================
  
  """
  Subscribe to AI suggestions as they are generated
  """
  aiSuggestionsGenerated(
    documentId: UUID!
    suggestionTypes: [SuggestionType!]
    minConfidence: Float = 0.7
  ): AISuggestionEvent! @auth(requires: USER)
  
  """
  Subscribe to AI analysis completion events
  """
  aiAnalysisCompleted(
    documentId: UUID!
    analysisTypes: [AnalysisType!]
  ): AIAnalysisEvent! @auth(requires: USER)
  
  """
  Subscribe to AI agent status and performance updates
  """
  aiAgentStatusChanged(
    agentId: UUID
    projectId: UUID
    includeMetrics: Boolean = false
  ): AIAgentStatusEvent! @auth(requires: MANAGE_AI_AGENT)
  
  # =============================================================================
  # PROJECT SUBSCRIPTIONS
  # =============================================================================
  
  """
  Subscribe to project-level activity and updates
  """
  projectActivity(
    projectId: UUID!
    activityTypes: [ActivityEventType!]
    minSeverity: ActivitySeverity = INFO
  ): ProjectActivityEvent! @auth(requires: VIEW_PROJECT)
  
  """
  Subscribe to project team changes
  """
  projectTeamChanged(
    projectId: UUID!
    includePermissionChanges: Boolean = true
  ): ProjectTeamEvent! @auth(requires: VIEW_PROJECT)
  
  # =============================================================================
  # NOTIFICATION SUBSCRIPTIONS
  # =============================================================================
  
  """
  Subscribe to real-time notifications for the current user
  """
  notifications(
    types: [NotificationType!]
    priorities: [NotificationPriority!] = [HIGH, URGENT]
    includeSystem: Boolean = false
  ): NotificationEvent! @auth(requires: USER)
}

# =============================================================================
# SUBSCRIPTION EVENT TYPES
# =============================================================================

type DocumentChangeEvent {
  id: UUID!
  document: Document!
  changeType: DocumentChangeType!
  changes: [DocumentChange!]!
  changedBy: User!
  timestamp: DateTime!
  sessionId: UUID!
  sequenceNumber: NonNegativeInt!
  significance: ChangeSignificance!
  affectedUsers: [User!]!
  activeCollaborators: NonNegativeInt!
  documentVersion: String!
}

type DocumentContentChangeEvent {
  id: UUID!
  document: Document!
  operations: [Operation!]!
  transformedOperations: [TransformationResult!]!
  author: User!
  timestamp: DateTime!
  sessionId: UUID!
  clientId: UUID!
  newSequenceNumber: NonNegativeInt!
  documentChecksum: String!
  affectedBlocks: [ContentBlockChange!]!
  conflictsDetected: [ConflictPreview!]!
  processingTime: Duration!
  transformationCount: NonNegativeInt!
}

type DocumentOperationEvent {
  id: UUID!
  documentId: UUID!
  operation: PendingOperation!
  operationResult: OperationResult!
  transformations: [TransformationStep!]!
  conflictsWith: [UUID!]!
  author: User!
  timestamp: DateTime!
  expectedSequenceNumber: NonNegativeInt!
  requiresTransformation: Boolean!
  concurrentOperations: NonNegativeInt!
  activeEditingSessions: NonNegativeInt!
}

type DocumentConflictEvent {
  id: UUID!
  document: Document!
  conflict: ActiveConflict!
  conflictType: ConflictEventType!
  resolution: ConflictResolution
  resolvedBy: User
  involvedUsers: [User!]!
  affectedBlocks: [UUID!]!
  aiRecommendations: [ConflictRecommendation!]!
  autoResolvable: Boolean!
  timestamp: DateTime!
}

type PresenceChangeEvent {
  id: UUID!
  documentId: UUID!
  session: PresenceSession!
  changeType: PresenceChangeType!
  previousState: PresenceState
  totalActiveUsers: NonNegativeInt!
  peakConcurrentUsers: NonNegativeInt!
  timestamp: DateTime!
}

type CursorPositionEvent {
  id: UUID!
  documentId: UUID!
  user: User!
  session: PresenceSession!
  cursor: CursorPosition
  selection: TextSelection
  viewport: ViewportInfo
  currentBlock: UUID
  editingContext: EditingContext
  timestamp: DateTime!
  isRealtime: Boolean!
}

type UserAwarenessEvent {
  id: UUID!
  documentId: UUID!
  user: User!
  session: PresenceSession!
  awarenessType: AwarenessType!
  awarenessData: AwarenessData!
  duration: Duration
  context: JSON
  timestamp: DateTime!
}

type CommentActivityEvent {
  id: UUID!
  documentId: UUID!
  comment: Comment!
  activityType: CommentActivityType!
  thread: CommentThread
  parentComment: Comment
  author: User!
  mentionedUsers: [User!]!
  aiSummary: String
  sentimentAnalysis: SentimentAnalysis
  suggestedActions: [String!]!
  timestamp: DateTime!
}

type CommentResolutionEvent {
  id: UUID!
  documentId: UUID!
  thread: CommentThread!
  resolutionType: ResolutionEventType!
  resolvedBy: User
  resolution: String
  aiGeneratedSummary: String
  resolvedComments: NonNegativeInt!
  participantCount: NonNegativeInt!
  timestamp: DateTime!
}

type AISuggestionEvent {
  id: UUID!
  documentId: UUID!
  suggestion: AISuggestion!
  eventType: AISuggestionEventType!
  generatedBy: NandaAgent!
  context: AIContext!
  relevanceScore: Float!
  confidence: Float!
  generationTime: Duration!
  tokensUsed: NonNegativeInt!
  timestamp: DateTime!
}

type AIAnalysisEvent {
  id: UUID!
  documentId: UUID!
  analysis: AIDocumentAnalysis!
  analysisTypes: [AnalysisType!]!
  processingTime: Duration!
  tokensUsed: NonNegativeInt!
  insights: [AIInsight!]!
  recommendations: [ImprovementSuggestion!]!
  timestamp: DateTime!
}

type AIAgentStatusEvent {
  id: UUID!
  agent: NandaAgent!
  previousStatus: AgentStatus
  newStatus: AgentStatus!
  changeReason: String
  performance: AgentPerformance
  usage: AgentUsage
  healthCheck: AgentHealthCheck
  timestamp: DateTime!
}

type ProjectActivityEvent {
  id: UUID!
  project: Project!
  activity: ActivityEvent!
  activityType: ActivityEventType!
  actor: User
  target: ActivityTarget
  impact: ActivityImpact!
  timestamp: DateTime!
}

type ProjectTeamEvent {
  id: UUID!
  project: Project!
  changeType: TeamChangeType!
  affectedUser: User!
  previousRole: ProjectRole
  newRole: ProjectRole
  permissionChanges: [PermissionChange!]!
  changedBy: User!
  reason: String
  timestamp: DateTime!
}

type NotificationEvent {
  id: UUID!
  notification: SmartNotification!
  eventType: NotificationEventType!
  recipient: User!
  channels: [NotificationChannel!]!
  scheduledDelivery: DateTime
  personalizedContent: String
  priority: NotificationPriority!
  timestamp: DateTime!
}

# =============================================================================
# SUPPORTING TYPES
# =============================================================================

type DocumentChange {
  field: String!
  oldValue: JSON
  newValue: JSON!
  changeType: FieldChangeType!
}

type TransformationResult {
  originalOperation: Operation!
  transformedOperation: Operation!
  transformationType: TransformationType!
  confidence: Float!
}

type ContentBlockChange {
  blockId: UUID!
  changeType: BlockChangeType!
  oldContent: JSON
  newContent: JSON!
  position: BlockPosition
}

type ConflictPreview {
  conflictId: UUID!
  severity: ConflictSeverity!
  affectedContent: String!
  autoResolvable: Boolean!
}

type OperationResult {
  success: Boolean!
  appliedAt: DateTime!
  sequenceNumber: NonNegativeInt!
  transformationApplied: Boolean!
  errors: [String!]!
}

type ConflictRecommendation {
  type: ConflictRecommendationType!
  description: String!
  confidence: Float!
  suggestedAction: String!
}

type PresenceState {
  status: PresenceStatus!
  cursor: CursorPosition
  selection: TextSelection
  isTyping: Boolean!
  lastAction: UserAction
}

type EditingContext {
  editingBlocks: [UUID!]!
  currentTool: EditingTool
  collaborationMode: CollaborationMode!
}

type AwarenessData {
  data: JSON!
  metadata: JSON
}

type AgentHealthCheck {
  status: HealthStatus!
  responseTime: Duration!
  errorRate: Float!
  lastCheck: DateTime!
}

type PermissionChange {
  permission: String!
  oldValue: Boolean
  newValue: Boolean!
}

# =============================================================================
# ENUMERATIONS
# =============================================================================

enum DocumentChangeType {
  CONTENT_MODIFIED
  METADATA_UPDATED
  PERMISSIONS_CHANGED
  SHARING_UPDATED
  STATUS_CHANGED
  VERSION_CREATED
  BRANCH_CREATED
  MERGED
  DELETED
  RESTORED
}

enum ChangeSignificance {
  TRIVIAL
  MINOR
  MODERATE
  MAJOR
  STRUCTURAL
  BREAKING
}

enum ConflictEventType {
  CONFLICT_DETECTED
  CONFLICT_RESOLVED
  CONFLICT_ESCALATED
  CONFLICT_AUTO_RESOLVED
  CONFLICT_TIMED_OUT
}

enum PresenceChangeType {
  USER_JOINED
  USER_LEFT
  STATUS_CHANGED
  CURSOR_MOVED
  SELECTION_CHANGED
  ACTIVITY_CHANGED
  DEVICE_CHANGED
}

enum AwarenessType {
  TYPING
  SCROLLING
  SELECTION
  MENU_OPENED
  TOOL_CHANGED
  VOICE_CHAT
  VIDEO_CHAT
  SCREEN_SHARE
}

enum CommentActivityType {
  COMMENT_CREATED
  COMMENT_UPDATED
  COMMENT_DELETED
  REPLY_ADDED
  REACTION_ADDED
  REACTION_REMOVED
  MENTION_ADDED
}

enum ResolutionEventType {
  THREAD_RESOLVED
  THREAD_REOPENED
  COMMENT_RESOLVED
  RESOLUTION_UPDATED
}

enum AISuggestionEventType {
  SUGGESTION_GENERATED
  SUGGESTION_APPLIED
  SUGGESTION_DISMISSED
  SUGGESTION_EXPIRED
  FEEDBACK_RECEIVED
}

enum TeamChangeType {
  MEMBER_ADDED
  MEMBER_REMOVED
  ROLE_CHANGED
  PERMISSIONS_UPDATED
  MEMBER_INVITED
  INVITATION_ACCEPTED
  INVITATION_DECLINED
}

enum NotificationEventType {
  NOTIFICATION_CREATED
  NOTIFICATION_SCHEDULED
  NOTIFICATION_DELIVERED
  NOTIFICATION_READ
  NOTIFICATION_ACTED_UPON
  NOTIFICATION_EXPIRED
}

enum FieldChangeType {
  CREATED
  UPDATED
  DELETED
  MOVED
  RENAMED
}

enum BlockChangeType {
  INSERTED
  DELETED
  MODIFIED
  MOVED
  SPLIT
  MERGED
  FORMATTED
}

enum ConflictRecommendationType {
  AUTO_MERGE
  MANUAL_REVIEW
  ACCEPT_THEIRS
  ACCEPT_MINE
  CREATE_HYBRID
}

enum EditingTool {
  TEXT_EDITOR
  COMMENT_TOOL
  ANNOTATION_TOOL
  FORMATTING_TOOL
  STRUCTURE_TOOL
  AI_ASSISTANT
}

enum CollaborationMode {
  REAL_TIME
  ASYNC
  REVIEW_MODE
  CONFLICT_RESOLUTION
  AI_ASSISTED
}

enum HealthStatus {
  HEALTHY
  DEGRADED
  UNHEALTHY
  UNKNOWN
}