# =============================================================================
# COLLABORATION PLATFORM QUERIES
# Comprehensive query schema with optimized field resolution and complexity analysis
# =============================================================================

extend type Query {
  # =============================================================================
  # PROJECT QUERIES
  # =============================================================================
  
  """
  Retrieve a single project by ID with full context
  Complexity: 15 (includes related entities)
  Rate limit: 100 requests per minute
  """
  project(
    id: UUID!
    """Include archived projects in the search"""
    includeArchived: Boolean = false
  ): Project @complexity(value: 15) @rateLimit(max: 100, window: 60) @auth(requires: USER)
  
  """
  List projects with advanced filtering and pagination
  Supports organization-scoped queries with permission filtering
  """
  projects(
    """Filter criteria for projects"""
    filter: ProjectsFilter
    """Sorting configuration"""
    sort: [ProjectSort!] = [{ field: UPDATED_AT, direction: DESC }]
    """Pagination parameters"""
    pagination: PaginationInput = { first: 20 }
    """Include projects from sub-workspaces"""
    includeSubWorkspaces: Boolean = false
  ): ProjectConnection! @complexity(value: 20) @rateLimit(max: 50, window: 60) @auth(requires: USER)
  
  """
  Search projects using full-text search with AI-powered relevance
  """
  searchProjects(
    """Search query with natural language support"""
    query: NonEmptyString!
    """Filter to apply to search results"""
    filter: ProjectSearchFilter
    """AI-powered search options"""
    searchOptions: SearchOptionsInput
    pagination: PaginationInput = { first: 10 }
  ): ProjectSearchResults! @complexity(value: 25) @rateLimit(max: 20, window: 60) @auth(requires: USER)
  
  # =============================================================================
  # AI INTEGRATION QUERIES
  # =============================================================================
  
  """
  Get AI suggestions for a specific document or context
  """
  aiSuggestions(
    """Target document for suggestions"""
    documentId: UUID
    """Specific context within the document"""
    context: AIContextInput
    """Types of suggestions to generate"""
    types: [SuggestionType!]
    """Maximum number of suggestions to return"""
    limit: NonNegativeInt = 5
    """Minimum confidence threshold (0.0 to 1.0)"""
    minConfidence: Float = 0.7
  ): [AISuggestion!]! @complexity(value: 20) @rateLimit(max: 10, window: 60) @auth(requires: USER)
  
  """
  Get AI analysis for a document
  """
  documentAIAnalysis(
    documentId: UUID!
    """Types of analysis to perform"""
    analysisTypes: [AnalysisType!] = [READABILITY, SENTIMENT, STRUCTURE]
    """Force refresh of cached analysis"""
    forceRefresh: Boolean = false
  ): AIDocumentAnalysis @complexity(value: 30) @rateLimit(max: 5, window: 300) @auth(requires: USER)
  
  """
  Get AI insights for a project or workspace
  """
  aiInsights(
    """Scope the insights to a specific project"""
    projectId: UUID
    """Filter insights by type"""
    types: [InsightType!]
    """Filter insights by priority"""
    priorities: [InsightPriority!]
    """Only show unacknowledged insights"""
    unacknowledgedOnly: Boolean = false
    pagination: PaginationInput = { first: 10 }
  ): InsightConnection! @complexity(value: 25) @auth(requires: USER)
  
  # =============================================================================
  # REAL-TIME COLLABORATION QUERIES
  # =============================================================================
  
  """
  Get current active collaborators for a document
  """
  documentCollaborators(
    documentId: UUID!
    """Include idle users (inactive for >5 minutes)"""
    includeIdle: Boolean = false
    """Include detailed device information"""
    includeDeviceInfo: Boolean = false
  ): [PresenceSession!]! @complexity(value: 8) @auth(requires: USER)
  
  """
  Get pending operations for operational transform
  """
  pendingOperations(
    documentId: UUID!
    """Only operations after this sequence number"""
    afterSequence: NonNegativeInt
    """Maximum number of operations to return"""
    limit: NonNegativeInt = 100
  ): [PendingOperation!]! @complexity(value: 12) @auth(requires: EDIT)
  
  """
  Get active conflicts requiring resolution
  """
  activeConflicts(
    documentId: UUID!
    """Only conflicts involving the current user"""
    myConflictsOnly: Boolean = false
    """Include auto-resolvable conflicts"""
    includeAutoResolvable: Boolean = true
  ): [ActiveConflict!]! @complexity(value: 10) @auth(requires: EDIT)
  
  # =============================================================================
  # ANALYTICS AND METRICS QUERIES
  # =============================================================================
  
  """
  Get comprehensive project metrics and analytics
  """
  projectAnalytics(
    projectId: UUID!
    """Metrics filter and configuration"""
    metricsFilter: ProjectMetricsFilter
    """Include comparative data from previous periods"""
    includeComparative: Boolean = false
    """Include predictive analytics"""
    includePredictive: Boolean = false
  ): ProjectMetrics! @complexity(value: 35) @rateLimit(max: 10, window: 300) @auth(requires: VIEW_ANALYTICS)
  
  """
  Get user activity analytics across projects
  """
  userActivityAnalytics(
    """User ID (defaults to current user)"""
    userId: UUID
    """Time range for analytics"""
    timeRange: DateTimeRangeInput!
    """Include detailed activity breakdown"""
    includeBreakdown: Boolean = true
  ): UserActivityAnalytics! @complexity(value: 25) @auth(requires: USER)
  
  """
  Get collaboration effectiveness metrics
  """
  collaborationMetrics(
    """Scope to specific project"""
    projectId: UUID
    """Time range for metrics"""
    timeRange: DateTimeRangeInput!
    """Include team-level breakdown"""
    includeTeamBreakdown: Boolean = false
  ): CollaborationMetrics! @complexity(value: 30) @auth(requires: VIEW_ANALYTICS)
}

# =============================================================================
# INPUT TYPES
# =============================================================================

input ProjectsFilter {
  status: [ProjectStatus!]
  ownerId: UUID
  workspaceId: UUID
  userRole: [ProjectRole!]
  createdAt: DateTimeRangeInput
  updatedAt: DateTimeRangeInput
  activityLevel: ActivityLevel
  aiCapabilities: [AICapability!]
  searchText: String
}

input ProjectSearchFilter {
  workspaceIds: [UUID!]
  status: [ProjectStatus!]
  dateRange: DateTimeRangeInput
  involvement: ProjectInvolvement
  contentRelevance: Boolean = true
}

input SearchOptionsInput {
  semanticSearch: Boolean = true
  fuzzyMatching: Boolean = true
  recencyBoost: Boolean = true
  collaborationBoost: Boolean = true
  maxResults: NonNegativeInt = 50
}

input AIContextInput {
  blockId: UUID
  selection: TextSelectionInput
  userIntent: UserIntent
  collaborationContext: JSON
  previousSuggestions: [UUID!]
}

input TextSelectionInput {
  start: NonNegativeInt!
  end: NonNegativeInt!
}

input ProjectSort {
  field: ProjectSortField!
  direction: SortDirection! = DESC
}

# =============================================================================
# ENUMERATIONS
# =============================================================================

enum ProjectSortField {
  NAME
  CREATED_AT
  UPDATED_AT
  LAST_ACTIVITY
  DOCUMENT_COUNT
  TEAM_SIZE
  STATUS
}

enum SortDirection {
  ASC
  DESC
}

enum ActivityLevel {
  INACTIVE
  LOW
  MODERATE
  HIGH
  VERY_HIGH
}

enum ProjectInvolvement {
  OWNER
  COLLABORATOR
  CONTRIBUTOR
  VIEWER
  ANY
}

enum AnalysisType {
  READABILITY
  SENTIMENT
  STRUCTURE
  COMPLETENESS
  CONSISTENCY
  COLLABORATION
  QUALITY
  ACCESSIBILITY
}

# =============================================================================
# RESULT TYPES
# =============================================================================

type ProjectSearchResults {
  results: [ProjectSearchResult!]!
  totalCount: NonNegativeInt!
  searchMetadata: SearchMetadata!
}

type ProjectSearchResult {
  project: Project!
  relevanceScore: Float!
  matchedFields: [String!]!
  highlightedSnippets: [HighlightedText!]!
}

type HighlightedText {
  text: String!
  highlights: [TextHighlight!]!
}

type TextHighlight {
  start: NonNegativeInt!
  end: NonNegativeInt!
  type: HighlightType!
}

type SearchMetadata {
  totalResults: NonNegativeInt!
  searchTime: Duration!
  searchId: UUID!
  usedAI: Boolean!
  suggestions: [String!]!
}

type UserActivityAnalytics {
  user: User!
  timeRange: DateTimeRange!
  documentsCreated: NonNegativeInt!
  documentsEdited: NonNegativeInt!
  commentsPosted: NonNegativeInt!
  collaborationHours: Duration!
  activeProjects: NonNegativeInt!
  peakActivityHour: Int!
  averageDocumentQuality: Float!
  conflictRate: Float!
  suggestionAcceptanceRate: Float!
  activityTrend: [DailyActivityData!]!
}

type DailyActivityData {
  date: Date!
  documentsEdited: NonNegativeInt!
  timeSpent: Duration!
  collaborationScore: Float!
}

type CollaborationMetrics {
  timeRange: DateTimeRange!
  totalCollaborators: NonNegativeInt!
  activeCollaborators: NonNegativeInt!
  averageTeamSize: Float!
  collaborationEfficiency: Float!
  conflictResolutionTime: Duration!
  consensusRate: Float!
  totalComments: NonNegativeInt!
  averageResponseTime: Duration!
  resolutionRate: Float!
  aiSuggestionsUsed: NonNegativeInt!
  aiEfficiencyGain: Float!
  weeklyTrends: [WeeklyCollaborationData!]!
}

type WeeklyCollaborationData {
  weekStart: Date!
  activeUsers: NonNegativeInt!
  documentsEdited: NonNegativeInt!
  collaborationScore: Float!
  conflictCount: NonNegativeInt!
}

enum HighlightType {
  EXACT_MATCH
  PARTIAL_MATCH
  SEMANTIC_MATCH
  FUZZY_MATCH
}

# =============================================================================
# CONNECTION TYPES
# =============================================================================

type ProjectConnection {
  edges: [ProjectEdge!]!
  pageInfo: PageInfo!
  totalCount: NonNegativeInt!
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

type InsightConnection {
  edges: [InsightEdge!]!
  pageInfo: PageInfo!
  totalCount: NonNegativeInt!
}

type InsightEdge {
  node: AIInsight!
  cursor: String!
}