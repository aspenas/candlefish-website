# =============================================================================
# COLLABORATION PLATFORM MUTATIONS
# Complete mutation schema for CRUD operations and real-time collaboration
# =============================================================================

extend type Mutation {
  # =============================================================================
  # PROJECT MUTATIONS
  # =============================================================================
  
  """
  Create a new project with AI agent configuration
  """
  createProject(
    input: CreateProjectInput!
  ): CreateProjectPayload! @complexity(value: 20) @rateLimit(max: 10, window: 3600) @auth(requires: USER)
  
  """
  Update project metadata and configuration
  """
  updateProject(
    input: UpdateProjectInput!
  ): UpdateProjectPayload! @complexity(value: 15) @auth(requires: EDIT_PROJECT)
  
  """
  Add team members to a project
  """
  addProjectMembers(
    projectId: UUID!
    members: [CreateProjectMemberInput!]!
    sendInvitation: Boolean = true
  ): AddProjectMembersPayload! @complexity(value: 12) @auth(requires: MANAGE_TEAM)
  
  """
  Remove team member from project
  """
  removeProjectMember(
    projectId: UUID!
    userId: UUID!
    transferOwnership: UUID # Required if removing owner
  ): RemoveProjectMemberPayload! @complexity(value: 10) @auth(requires: MANAGE_TEAM)
  
  # =============================================================================
  # DOCUMENT MUTATIONS (Enhanced)
  # =============================================================================
  
  """
  Create a new document with AI-powered template suggestions
  """
  createEnhancedDocument(
    input: CreateEnhancedDocumentInput!
  ): CreateDocumentPayload! @complexity(value: 25) @rateLimit(max: 20, window: 3600) @auth(requires: USER)
  
  """
  Apply multiple operations in a single transaction (Operational Transform)
  """
  applyDocumentOperations(
    input: ApplyOperationsInput!
  ): ApplyOperationsPayload! @complexity(value: 30) @rateLimit(max: 1000, window: 60) @auth(requires: EDIT)
  
  """
  Resolve conflicts with manual resolution
  """
  resolveConflicts(
    input: ResolveConflictsInput!
  ): ResolveConflictsPayload! @complexity(value: 20) @auth(requires: EDIT)
  
  # =============================================================================
  # AI INTEGRATION MUTATIONS
  # =============================================================================
  
  """
  Configure NANDA AI agent for a project
  """
  configureAIAgent(
    input: ConfigureAIAgentInput!
  ): ConfigureAIAgentPayload! @complexity(value: 18) @rateLimit(max: 10, window: 3600) @auth(requires: MANAGE_AI_AGENT)
  
  """
  Generate AI suggestions for document content
  """
  generateAISuggestions(
    input: GenerateAISuggestionsInput!
  ): GenerateAISuggestionsPayload! @complexity(value: 25) @rateLimit(max: 20, window: 60) @auth(requires: USER)
  
  """
  Apply an AI suggestion to a document
  """
  applyAISuggestion(
    suggestionId: UUID!
    customModifications: JSON
  ): ApplyAISuggestionPayload! @complexity(value: 15) @auth(requires: EDIT)
  
  """
  Provide feedback on AI suggestions for learning
  """
  provideSuggestionFeedback(
    input: ProvideSuggestionFeedbackInput!
  ): ProvideFeedbackPayload! @complexity(value: 8) @auth(requires: USER)
  
  # =============================================================================
  # REAL-TIME COLLABORATION MUTATIONS
  # =============================================================================
  
  """
  Join a document editing session
  """
  joinEditingSession(
    input: JoinEditingSessionInput!
  ): JoinEditingSessionPayload! @complexity(value: 12) @rateLimit(max: 100, window: 60) @auth(requires: USER)
  
  """
  Update user presence information (cursor, selection, status)
  """
  updatePresence(
    input: UpdatePresenceInput!
  ): UpdatePresencePayload! @complexity(value: 5) @rateLimit(max: 1000, window: 60) @auth(requires: USER)
  
  """
  Acquire exclusive edit lock on document blocks
  """
  acquireEditLock(
    documentId: UUID!
    blockIds: [UUID!]!
    lockType: LockType! = BLOCK_LEVEL
    duration: Duration = "PT5M" # 5 minutes default
  ): AcquireLockPayload! @complexity(value: 10) @auth(requires: EDIT)
  
  # =============================================================================
  # ENHANCED COMMENT MUTATIONS
  # =============================================================================
  
  """
  Create comment with AI enhancements and smart notifications
  """
  createEnhancedComment(
    input: CreateEnhancedCommentInput!
  ): CreateCommentPayload! @complexity(value: 18) @rateLimit(max: 100, window: 3600) @auth(requires: USER)
  
  """
  Resolve comment thread with AI summary generation
  """
  resolveCommentThread(
    threadId: UUID!
    resolution: String
    generateAISummary: Boolean = true
  ): ResolveCommentThreadPayload! @complexity(value: 15) @auth(requires: USER)
  
  # =============================================================================
  # VERSION CONTROL MUTATIONS
  # =============================================================================
  
  """
  Create document version with AI-generated changelog
  """
  createEnhancedVersion(
    input: CreateEnhancedVersionInput!
  ): CreateVersionPayload! @complexity(value: 20) @auth(requires: EDIT)
  
  """
  Merge branches with conflict resolution
  """
  mergeBranches(
    input: MergeBranchesInput!
  ): MergeBranchesPayload! @complexity(value: 35) @auth(requires: EDIT)
}

# =============================================================================
# INPUT TYPES
# =============================================================================

input CreateProjectInput {
  name: NonEmptyString!
  description: String
  workspaceId: UUID!
  
  # AI configuration
  aiAgentConfig: CreateAIAgentConfigInput
  enableAIFeatures: [AIFeature!] = [AUTO_SUGGESTIONS, GRAMMAR_CHECK]
  
  # Team setup
  initialMembers: [CreateProjectMemberInput!]
  defaultPermissions: ProjectPermission!
}

input UpdateProjectInput {
  id: UUID!
  name: NonEmptyString
  description: String
  status: ProjectStatus
  
  # AI configuration updates
  aiAgentConfig: UpdateAIAgentConfigInput
  enabledAIFeatures: [AIFeature!]
}

input CreateEnhancedDocumentInput {
  name: NonEmptyString!
  description: String
  type: DocumentType!
  projectId: UUID!
  
  # AI enhancements
  generateAIOutline: Boolean = false
  aiPersonalityType: AIPersonalityType = PROFESSIONAL
  enableSmartSuggestions: Boolean = true
  
  # Collaboration settings
  permissions: CreateDocumentPermissionsInput
  sharing: CreateDocumentSharingInput
}

input ApplyOperationsInput {
  documentId: UUID!
  operations: [CreateOperationInput!]!
  
  # Operational Transform metadata
  clientId: UUID!
  baseSequenceNumber: NonNegativeInt!
  
  # Conflict resolution strategy
  conflictResolution: ConflictResolutionStrategy = AUTO_MERGE
  
  # Session context
  sessionId: UUID!
  optimisticUpdates: Boolean = true
}

input ResolveConflictsInput {
  documentId: UUID!
  conflicts: [ConflictResolutionInput!]!
  
  # Resolution strategy
  globalStrategy: ConflictResolutionStrategy
  preserveUserIntent: Boolean = true
  
  # AI assistance
  useAIRecommendations: Boolean = true
  aiConfidenceThreshold: Float = 0.8
}

input ConflictResolutionInput {
  conflictId: UUID!
  resolutionType: ManualResolutionType!
  acceptedContent: JSON
  customResolution: JSON
  reasoning: String
}

input ConfigureAIAgentInput {
  projectId: UUID
  workspaceId: UUID
  
  # Agent configuration
  name: NonEmptyString!
  personality: AIPersonalityType!
  capabilities: [AICapability!]!
  
  # Model configuration
  primaryModel: AIModelType!
  temperature: Float = 0.7
  maxTokens: NonNegativeInt = 2048
  
  # Feature settings
  autoSuggestionThreshold: Float = 0.7
  conflictDetectionSensitivity: Float = 0.5
  learningEnabled: Boolean = true
}

input GenerateAISuggestionsInput {
  documentId: UUID!
  context: AIContextInput!
  suggestionTypes: [SuggestionType!]!
  maxSuggestions: NonNegativeInt = 5
  minConfidence: Float = 0.6
  priority: RequestPriority = NORMAL
}

input JoinEditingSessionInput {
  documentId: UUID!
  clientId: UUID!
  deviceInfo: DeviceInfoInput!
  permissions: [SessionPermission!]
  enableRealtimeSync: Boolean = true
}

input UpdatePresenceInput {
  sessionId: UUID!
  cursor: UpdateCursorPositionInput
  selection: UpdateTextSelectionInput
  viewport: UpdateViewportInfoInput
  isTyping: Boolean
  currentAction: UserAction
}

input CreateEnhancedCommentInput {
  documentId: UUID!
  content: CreateCommentContentInput!
  position: CreateCommentPositionInput
  type: CommentType = GENERAL
  priority: CommentPriority = NORMAL
  mentions: [UUID!]
  enableAISuggestions: Boolean = true
}

input CreateEnhancedVersionInput {
  documentId: UUID!
  name: String
  description: String
  isMajorVersion: Boolean = false
  generateChangelog: Boolean = true
  generateSummary: Boolean = false
  branchId: UUID
}

input CreateAIAgentConfigInput {
  name: NonEmptyString!
  personality: AIPersonalityType = PROFESSIONAL
  capabilities: [AICapability!] = [AUTO_SUGGESTIONS, GRAMMAR_CHECK]
  primaryModel: AIModelType = CLAUDE_3_SONNET
  temperature: Float = 0.7
}

input UpdateAIAgentConfigInput {
  name: NonEmptyString
  personality: AIPersonalityType
  capabilities: [AICapability!]
  temperature: Float
  learningEnabled: Boolean
}

input DeviceInfoInput {
  type: DeviceType!
  os: String!
  browser: String
  timezone: String!
  locale: String!
}

# =============================================================================
# PAYLOAD TYPES
# =============================================================================

type CreateProjectPayload {
  project: Project
  errors: [MutationError!]!
  generatedDocuments: [Document!]!
  invitationsSent: [ProjectInvitation!]!
  aiAgentStatus: AgentSetupStatus
}

type UpdateProjectPayload {
  project: Project
  errors: [MutationError!]!
  changedFields: [String!]!
  affectedMembers: [User!]!
}

type CreateDocumentPayload {
  document: Document
  errors: [MutationError!]!
  generatedOutline: DocumentOutline
  aiSuggestions: [AISuggestion!]!
}

type ApplyOperationsPayload {
  document: Document
  appliedOperations: [Operation!]!
  rejectedOperations: [OperationRejection!]!
  conflicts: [ActiveConflict!]!
  errors: [MutationError!]!
  newSequenceNumber: NonNegativeInt!
  documentChecksum: String!
  processingTime: Duration!
}

type ResolveConflictsPayload {
  document: Document
  resolvedConflicts: [ResolvedConflict!]!
  remainingConflicts: [ActiveConflict!]!
  errors: [MutationError!]!
  resolutionSummary: ConflictResolutionSummary!
}

type ConfigureAIAgentPayload {
  agent: NandaAgent
  errors: [MutationError!]!
  enabledCapabilities: [AICapability!]!
  estimatedMonthlyCost: Decimal
  setupStatus: AgentSetupStatus!
}

type GenerateAISuggestionsPayload {
  suggestions: [AISuggestion!]!
  errors: [MutationError!]!
  processingTime: Duration!
  tokensUsed: NonNegativeInt!
  confidence: Float!
}

type JoinEditingSessionPayload {
  session: PresenceSession
  document: Document
  errors: [MutationError!]!
  activeCollaborators: [PresenceSession!]!
  realtimeEndpoint: URL!
  authToken: String!
}

type CreateCommentPayload {
  comment: Comment
  thread: CommentThread
  errors: [MutationError!]!
  aiSummary: String
  sentimentAnalysis: SentimentAnalysis
  suggestedReplies: [String!]!
}

type CreateVersionPayload {
  version: DocumentVersion
  errors: [MutationError!]!
  changelog: [VersionChange!]!
  aiSummary: String
  changeAnalysis: ChangeAnalysis
}

# =============================================================================
# UTILITY TYPES
# =============================================================================

type MutationError {
  code: ErrorCode!
  message: String!
  field: String
  context: JSON
  recoverable: Boolean!
}

type ProjectInvitation {
  id: UUID!
  invitee: User!
  role: ProjectRole!
  status: InvitationStatus!
  expiresAt: DateTime!
}

type OperationRejection {
  operation: Operation!
  reason: RejectionReason!
  message: String!
}

type ResolvedConflict {
  conflictId: UUID!
  resolutionType: ConflictResolutionType!
  finalContent: JSON!
  confidence: Float!
  aiAssisted: Boolean!
}

type ConflictResolutionSummary {
  totalConflicts: NonNegativeInt!
  resolvedConflicts: NonNegativeInt!
  aiAssistedResolutions: NonNegativeInt!
  averageResolutionTime: Duration!
}

type AgentSetupStatus {
  status: SetupStatus!
  progress: Float! # 0.0 to 1.0
  currentStep: String!
  estimatedCompletion: Duration
}

type DocumentOutline {
  sections: [OutlineSection!]!
  suggestedStructure: [StructureSuggestion!]!
  estimatedReadingTime: Duration!
}

type OutlineSection {
  title: String!
  level: NonNegativeInt!
  suggestedContent: String
  aiGenerated: Boolean!
}

type StructureSuggestion {
  type: StructureType!
  description: String!
  placement: NonNegativeInt!
  confidence: Float!
}

type VersionChange {
  type: ChangeType!
  blockId: UUID
  description: String!
  impact: ChangeImpact!
  author: User
  timestamp: DateTime!
}

type ChangeAnalysis {
  significantChanges: [VersionChange!]!
  overallImpact: ChangeImpact!
  recommendedActions: [String!]!
  backwardCompatible: Boolean!
}

# =============================================================================
# ENUMERATIONS
# =============================================================================

enum ErrorCode {
  INVALID_INPUT
  PERMISSION_DENIED
  RESOURCE_NOT_FOUND
  CONFLICT_DETECTED
  RATE_LIMIT_EXCEEDED
  AI_SERVICE_ERROR
  VALIDATION_ERROR
  SYSTEM_ERROR
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}

enum RejectionReason {
  INVALID_OPERATION
  PERMISSION_DENIED
  CONFLICT_DETECTED
  RATE_LIMIT_EXCEEDED
  RESOURCE_LOCKED
  VALIDATION_FAILED
}

enum ConflictResolutionType {
  AUTOMATIC
  MANUAL
  AI_ASSISTED
  HYBRID
}

enum SetupStatus {
  INITIALIZING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum StructureType {
  HEADING
  PARAGRAPH
  LIST
  TABLE
  QUOTE
  CODE_BLOCK
  DIVIDER
}

enum ChangeImpact {
  MINOR
  MODERATE
  MAJOR
  BREAKING
}

enum AIPersonalityType {
  PROFESSIONAL
  CASUAL
  CREATIVE
  TECHNICAL
  ACADEMIC
  FRIENDLY
  FORMAL
}

enum AIModelType {
  GPT_4
  GPT_3_5_TURBO
  CLAUDE_3_OPUS
  CLAUDE_3_SONNET
  CLAUDE_3_HAIKU
  CUSTOM
}

enum RequestPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum SessionPermission {
  READ_ONLY
  COMMENT_ONLY
  EDIT_TEXT
  EDIT_STRUCTURE
  MANAGE_PERMISSIONS
}