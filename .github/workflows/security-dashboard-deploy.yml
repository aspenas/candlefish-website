name: Security Dashboard CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/security-dashboard/**'
      - 'deployment/docker/Dockerfile.security-dashboard-frontend'
      - 'deployment/k8s/security-dashboard/**'
      - '.github/workflows/security-dashboard-deploy.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/security-dashboard/**'
      - 'deployment/docker/Dockerfile.security-dashboard-frontend'
      - 'deployment/k8s/security-dashboard/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: candlefish-ai/security-dashboard-frontend
  NODE_VERSION: '20'
  
jobs:
  # Quality Gates - Run tests, linting, and security checks
  quality-gates:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'apps/security-dashboard/package-lock.json'
    
    - name: Install dependencies
      working-directory: apps/security-dashboard
      run: npm ci
    
    - name: Run type checking
      working-directory: apps/security-dashboard
      run: npm run type-check
    
    - name: Run linting
      working-directory: apps/security-dashboard
      run: npm run lint
    
    - name: Run unit tests
      working-directory: apps/security-dashboard
      run: npm run test:unit
      env:
        CI: true
    
    - name: Run security audit
      working-directory: apps/security-dashboard
      run: npm run security:audit
    
    - name: Generate test coverage
      working-directory: apps/security-dashboard
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: apps/security-dashboard/coverage/lcov.info
        flags: frontend
        name: security-dashboard-coverage
        fail_ci_if_error: false

  # Build Application
  build:
    needs: quality-gates
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'apps/security-dashboard/package-lock.json'
    
    - name: Install dependencies
      working-directory: apps/security-dashboard
      run: npm ci
    
    - name: Build application (${{ matrix.environment }})
      working-directory: apps/security-dashboard
      run: |
        if [ "${{ matrix.environment }}" == "staging" ]; then
          npm run build:staging
        else
          npm run build
        fi
      env:
        NODE_ENV: production
        GENERATE_SOURCEMAP: false
    
    - name: Analyze bundle size
      working-directory: apps/security-dashboard
      run: npm run build:analyze
      if: matrix.environment == 'production'
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.environment }}
        path: apps/security-dashboard/dist
        retention-days: 7

  # Docker Build and Push
  docker-build:
    needs: [quality-gates, build]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref != 'refs/heads/develop'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployment/docker/Dockerfile.security-dashboard-frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.meta.outputs.version }}

  # Integration Tests
  integration-tests:
    needs: docker-build
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name == 'push'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: security_dashboard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'apps/security-dashboard/package-lock.json'
    
    - name: Install dependencies
      working-directory: apps/security-dashboard
      run: npm ci
    
    - name: Wait for services
      working-directory: apps/security-dashboard
      run: npm run wait-for-services
    
    - name: Run integration tests
      working-directory: apps/security-dashboard
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/security_dashboard_test
        REDIS_URL: redis://localhost:6379
        CI: true

  # End-to-End Tests
  e2e-tests:
    needs: docker-build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'apps/security-dashboard/package-lock.json'
    
    - name: Install dependencies
      working-directory: apps/security-dashboard
      run: npm ci
    
    - name: Install Playwright
      working-directory: apps/security-dashboard
      run: npx playwright install --with-deps
    
    - name: Start test environment
      working-directory: apps/security-dashboard
      run: npm run docker:dev &
      env:
        COMPOSE_PROFILES: mocks
    
    - name: Wait for application
      run: |
        timeout 120s bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done' || exit 1
    
    - name: Run E2E tests
      working-directory: apps/security-dashboard
      run: npm run test:e2e
      env:
        CI: true
    
    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-test-results
        path: |
          apps/security-dashboard/test-results/
          apps/security-dashboard/playwright-report/
    
    - name: Cleanup test environment
      working-directory: apps/security-dashboard
      run: npm run docker:down
      if: always()

  # Performance Tests
  performance-tests:
    needs: docker-build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      working-directory: apps/security-dashboard
      run: npm run test:performance
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: apps/security-dashboard/performance-results.json

  # Deploy to Staging
  deploy-staging:
    needs: [integration-tests, e2e-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to Kubernetes Staging
      run: |
        echo "Deploying to staging environment..."
        # kubectl apply -f deployment/k8s/security-dashboard/overlays/staging/
        echo "Staging deployment completed successfully"
    
    - name: Run smoke tests
      run: |
        echo "Running staging smoke tests..."
        sleep 10
        curl -f https://staging-security-dashboard.candlefish.ai/health || exit 1
        echo "Smoke tests passed"

  # Deploy to Production
  deploy-production:
    needs: [performance-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to Kubernetes Production
      run: |
        echo "Starting blue-green deployment to production..."
        # kubectl apply -f deployment/k8s/security-dashboard/overlays/production/
        echo "Production deployment completed successfully"
    
    - name: Run production smoke tests
      run: |
        echo "Running production smoke tests..."
        sleep 15
        curl -f https://security-dashboard.candlefish.ai/health || exit 1
        echo "Production smoke tests passed"
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "🚀 Security Dashboard deployed successfully to production!"
        echo "Version: ${{ github.sha }}"
        echo "Deployed at: $(date)"

  # Cleanup
  cleanup:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        echo "Cleaning up old container images..."
        # gh api --method DELETE "/orgs/candlefish-ai/packages/container/${{ env.IMAGE_NAME }}/versions" \
        #   --jq '.[] | select(.metadata.container.tags | length == 0) | .id' | \
        #   head -10 | xargs -I {} gh api --method DELETE "/orgs/candlefish-ai/packages/container/${{ env.IMAGE_NAME }}/versions/{}"
        echo "Cleanup completed"