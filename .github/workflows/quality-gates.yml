name: Quality Gates Enforcement

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  schedule:
    # Run quality gates daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.21'
  COVERAGE_THRESHOLD: '80'

jobs:
  quality-gates:
    name: Enforce Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 45

    services:
      postgres:
        image: timescale/timescaledb:latest-pg14
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: security_dashboard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: npm ci

      # Gate 1: Code Coverage
      - name: 'Quality Gate 1: Code Coverage'
        id: coverage
        run: |
          echo "🎯 Running comprehensive test suite with coverage..."
          npm run test:coverage:check

          if [ $? -eq 0 ]; then
            echo "coverage=passed" >> $GITHUB_OUTPUT
            echo "✅ Code coverage threshold (80%) met"
          else
            echo "coverage=failed" >> $GITHUB_OUTPUT
            echo "❌ Code coverage below 80% threshold"
          fi

      - name: Generate coverage badges
        if: always()
        run: |
          npm install -g coverage-badges-cli
          coverage-badges --input coverage/coverage-summary.json --output coverage/badges/

      # Gate 2: Test Results
      - name: 'Quality Gate 2: Test Results'
        id: tests
        run: |
          echo "🧪 Checking test results..."

          # Run all test suites
          npm run test:security-dashboard
          TEST_EXIT_CODE=$?

          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "tests=passed" >> $GITHUB_OUTPUT
            echo "✅ All tests passed"
          else
            echo "tests=failed" >> $GITHUB_OUTPUT
            echo "❌ Some tests failed"
            exit 1
          fi

      # Gate 3: Performance Benchmarks
      - name: 'Quality Gate 3: Performance'
        id: performance
        run: |
          echo "🚀 Running performance tests..."

          # Start backend services for performance testing
          cd services/security-dashboard
          go build -o security-dashboard
          ./security-dashboard &
          BACKEND_PID=$!
          sleep 10

          # Install K6
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

          # Run performance tests
          cd ../..
          k6 run __tests__/performance/k6/security-dashboard-load-test.js --out json=k6-results.json
          PERF_EXIT_CODE=$?

          # Clean up
          kill $BACKEND_PID || true

          if [ $PERF_EXIT_CODE -eq 0 ]; then
            echo "performance=passed" >> $GITHUB_OUTPUT
            echo "✅ Performance thresholds met"
          else
            echo "performance=failed" >> $GITHUB_OUTPUT
            echo "❌ Performance thresholds not met"
          fi
        env:
          DATABASE_URL: postgres://postgres:test_password@localhost:5432/security_dashboard_test
          REDIS_URL: redis://localhost:6379
          BASE_URL: http://localhost:8080
          WS_URL: ws://localhost:8080

      # Gate 4: Security Scan
      - name: 'Quality Gate 4: Security Scan'
        id: security
        run: |
          echo "🔐 Running security scans..."

          # NPM Audit
          npm audit --audit-level high
          NPM_AUDIT_EXIT_CODE=$?

          # OWASP Dependency Check
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.2/dependency-check-8.4.2-release.zip
          unzip dependency-check-8.4.2-release.zip
          ./dependency-check/bin/dependency-check.sh --project "Security Dashboard" --scan . --format JSON --out dependency-check-report.json
          OWASP_EXIT_CODE=$?

          # Check for critical vulnerabilities
          if jq -e '.dependencies[].vulnerabilities[] | select(.severity == "HIGH" or .severity == "CRITICAL")' dependency-check-report.json > /dev/null 2>&1; then
            echo "❌ High or critical vulnerabilities found"
            echo "security=failed" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ No high/critical vulnerabilities found"
            echo "security=passed" >> $GITHUB_OUTPUT
          fi

      # Gate 5: Code Quality (Linting & Type Checking)
      - name: 'Quality Gate 5: Code Quality'
        id: quality
        run: |
          echo "📝 Checking code quality..."

          # Linting
          npm run lint
          LINT_EXIT_CODE=$?

          # Type checking
          npm run typecheck
          TYPE_EXIT_CODE=$?

          if [ $LINT_EXIT_CODE -eq 0 ] && [ $TYPE_EXIT_CODE -eq 0 ]; then
            echo "quality=passed" >> $GITHUB_OUTPUT
            echo "✅ Code quality checks passed"
          else
            echo "quality=failed" >> $GITHUB_OUTPUT
            echo "❌ Code quality issues found"
            exit 1
          fi

      # Comprehensive Quality Gate Check
      - name: 'Final Quality Gate Evaluation'
        if: always()
        run: |
          echo "🎯 Running comprehensive quality gate check..."
          node scripts/quality-gate-check.js
        env:
          COVERAGE_RESULT: ${{ steps.coverage.outputs.coverage }}
          TESTS_RESULT: ${{ steps.tests.outputs.tests }}
          PERFORMANCE_RESULT: ${{ steps.performance.outputs.performance }}
          SECURITY_RESULT: ${{ steps.security.outputs.security }}
          QUALITY_RESULT: ${{ steps.quality.outputs.quality }}

      # Upload artifacts
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Upload coverage badges
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badges
          path: coverage/badges/

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: k6-results.json

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: dependency-check-report.json

      - name: Upload quality gate report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-gate-report
          path: quality-gate-report.json

      # Comment on PR with results
      - name: Comment PR with quality gate results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read quality gate report
            let report = {};
            try {
              const reportContent = fs.readFileSync('quality-gate-report.json', 'utf8');
              report = JSON.parse(reportContent);
            } catch (error) {
              report = { overallStatus: 'UNKNOWN', gates: {}, summary: { passed: 0, failed: 0, total: 0 } };
            }

            // Create comment body
            const status = report.overallStatus === 'PASSED' ? '✅ PASSED' : '❌ FAILED';
            const statusColor = report.overallStatus === 'PASSED' ? '🟢' : '🔴';

            let comment = `## ${statusColor} Quality Gates Report\n\n`;
            comment += `**Overall Status:** ${status}\n`;
            comment += `**Gates Passed:** ${report.summary.passed}/${report.summary.total}\n\n`;

            comment += `### Gate Results:\n`;
            Object.entries(report.gates || {}).forEach(([gate, passed]) => {
              const gateStatus = passed ? '✅' : '❌';
              comment += `- ${gateStatus} **${gate}**\n`;
            });

            comment += `\n### Quality Metrics:\n`;
            comment += `- 🎯 **Coverage Threshold:** 80%\n`;
            comment += `- ⚡ **Performance:** P95 < 100ms, Error Rate < 1%\n`;
            comment += `- 🔐 **Security:** No HIGH/CRITICAL vulnerabilities\n`;
            comment += `- 📝 **Code Quality:** Lint + TypeScript checks\n`;

            comment += `\n*Report generated at: ${new Date().toISOString()}*`;

            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      # Fail job if quality gates failed
      - name: Fail if quality gates not met
        if: always()
        run: |
          if [ -f "quality-gate-report.json" ]; then
            OVERALL_STATUS=$(jq -r '.overallStatus' quality-gate-report.json)
            if [ "$OVERALL_STATUS" != "PASSED" ]; then
              echo "❌ Quality gates failed"
              exit 1
            fi
          else
            echo "❌ Quality gate report not found"
            exit 1
          fi

  # Prevent deployment if quality gates fail
  deployment-gate:
    name: Deployment Quality Gate
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Quality gates passed - deployment approved
        run: |
          echo "✅ All quality gates passed"
          echo "🚀 Deployment approved"

      - name: Trigger deployment
        run: |
          echo "Deployment would be triggered here"
          # Add actual deployment trigger logic here
