name: Release Automation

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
          - custom
      custom_version:
        description: 'Custom version (only for custom release type)'
        required: false

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  # Semantic release
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_notes: ${{ steps.semantic.outputs.new_release_notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          npm install -g \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/npm \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            conventional-changelog-conventionalcommits

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx semantic-release
          
          # Capture outputs
          if [ -f .semantic-release-output.json ]; then
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            echo "new_release_version=$(jq -r .version .semantic-release-output.json)" >> $GITHUB_OUTPUT
            echo "new_release_notes=$(jq -r .notes .semantic-release-output.json)" >> $GITHUB_OUTPUT
          else
            echo "new_release_published=false" >> $GITHUB_OUTPUT
          fi

  # Manual release
  manual-release:
    name: Manual Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Determine version
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(jq -r .version package.json)
          
          if [ "${{ github.event.inputs.release_type }}" == "custom" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
          else
            # Increment version based on type
            NEW_VERSION=$(npx semver $CURRENT_VERSION -i ${{ github.event.inputs.release_type }})
          fi
          
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "Previous version: ${CURRENT_VERSION}"
          echo "New version: ${NEW_VERSION}"

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog for the release
          npx conventional-changelog -p conventionalcommits -i CHANGELOG_TEMP.md -s --skip-unstable
          
          # Extract changelog for this release
          CHANGELOG=$(sed '/^##/q' CHANGELOG_TEMP.md | head -n -1)
          
          # Save to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "${CHANGELOG}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Update main CHANGELOG.md
          npx conventional-changelog -p conventionalcommits -i CHANGELOG.md -s

      - name: Update version
        run: |
          # Update package.json versions
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version --workspaces-update=false
          
          # Update all workspace packages
          pnpm recursive exec -- npm version ${{ steps.version.outputs.version }} --no-git-tag-version || true

      - name: Commit changes
        run: |
          git add .
          git commit -m "chore(release): ${{ steps.version.outputs.version }} [skip ci]

          ${{ steps.changelog.outputs.changelog }}"

      - name: Create tag
        run: |
          git tag -a v${{ steps.version.outputs.version }} -m "Release v${{ steps.version.outputs.version }}"
          git push origin main --follow-tags

  # Create GitHub release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [semantic-release, manual-release]
    if: always() && (needs.semantic-release.outputs.new_release_published == 'true' || needs.manual-release.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine release info
        id: release-info
        run: |
          if [ "${{ needs.semantic-release.outputs.new_release_published }}" == "true" ]; then
            echo "version=${{ needs.semantic-release.outputs.new_release_version }}" >> $GITHUB_OUTPUT
            echo "notes<<EOF" >> $GITHUB_OUTPUT
            echo "${{ needs.semantic-release.outputs.new_release_notes }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "version=${{ needs.manual-release.outputs.version }}" >> $GITHUB_OUTPUT
            echo "notes<<EOF" >> $GITHUB_OUTPUT
            echo "${{ needs.manual-release.outputs.changelog }}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Build release artifacts
        run: |
          # Build production bundles
          pnpm install --frozen-lockfile
          pnpm build
          
          # Create release archives
          tar -czf security-dashboard-${{ steps.release-info.outputs.version }}.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            apps/security-dashboard/dist
          
          zip -r security-dashboard-${{ steps.release-info.outputs.version }}.zip \
            apps/security-dashboard/dist \
            -x "*/node_modules/*" \
            -x "*/.git/*"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.release-info.outputs.version }}
          name: Release v${{ steps.release-info.outputs.version }}
          body: |
            # Release v${{ steps.release-info.outputs.version }}
            
            ${{ steps.release-info.outputs.notes }}
            
            ## Installation
            
            ### Docker
            ```bash
            docker pull ghcr.io/candlefish-ai/security-dashboard:${{ steps.release-info.outputs.version }}
            ```
            
            ### Kubernetes
            ```bash
            kubectl set image deployment/security-dashboard \
              security-dashboard=ghcr.io/candlefish-ai/security-dashboard:${{ steps.release-info.outputs.version }}
            ```
            
            ## Checksums
            
            ```
            $(sha256sum *.tar.gz *.zip)
            ```
          files: |
            security-dashboard-*.tar.gz
            security-dashboard-*.zip
          draft: false
          prerelease: ${{ contains(steps.release-info.outputs.version, '-') }}
          generate_release_notes: true

  # Publish packages
  publish-packages:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [github-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.7.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Publish public packages
          pnpm --filter "./packages/*" publish --access public --no-git-checks || true

  # Docker release
  docker-release:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [github-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/security-dashboard
            ${{ secrets.DOCKER_USERNAME }}/security-dashboard
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/docker/Dockerfile.security-dashboard-frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to environments
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-release]
    environment:
      name: staging
      url: https://security-staging.candlefish.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Trigger staging deployment workflow
          gh workflow run deploy-staging.yml \
            --ref main \
            -f version=${{ needs.github-release.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Release notes and documentation
  documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [github-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

      - name: Update documentation
        run: |
          # Update version in documentation
          find docs -type f -name "*.md" -exec sed -i "s/version: .*/version: ${{ needs.github-release.outputs.version }}/g" {} \;
          
          # Generate API documentation
          pnpm docs:api
          
          # Update README
          sed -i "s/\[!\[Version\].*/[![Version](https://img.shields.io/badge/version-${{ needs.github-release.outputs.version }}-blue.svg)](https://github.com/${{ github.repository }}/releases)/g" README.md

      - name: Commit documentation updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add .
          git commit -m "docs: update documentation for v${{ needs.github-release.outputs.version }} [skip ci]" || true
          git push

  # Notification
  notify-release:
    name: Send Release Notifications
    runs-on: ubuntu-latest
    needs: [github-release, docker-release, deploy-staging]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🚀 New Release Published",
              attachments: [{
                color: 'good',
                title: 'Security Dashboard v${{ needs.github-release.outputs.version }}',
                fields: [
                  {
                    title: 'Version',
                    value: '${{ needs.github-release.outputs.version }}',
                    short: true
                  },
                  {
                    title: 'Type',
                    value: '${{ github.event.inputs.release_type || 'automatic' }}',
                    short: true
                  },
                  {
                    title: 'Docker Image',
                    value: 'ghcr.io/candlefish-ai/security-dashboard:${{ needs.github-release.outputs.version }}',
                    short: false
                  },
                  {
                    title: 'Release Notes',
                    value: 'https://github.com/${{ github.repository }}/releases/tag/v${{ needs.github-release.outputs.version }}',
                    short: false
                  }
                ]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create release announcement issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📦 Release v${{ needs.github-release.outputs.version }} - Deployment Checklist`,
              body: `## Release v${{ needs.github-release.outputs.version }}
              
              ### Pre-Production Checklist
              - [ ] Staging deployment successful
              - [ ] Smoke tests passed
              - [ ] Performance benchmarks acceptable
              - [ ] Security scan completed
              - [ ] Documentation updated
              
              ### Production Deployment
              - [ ] Schedule maintenance window
              - [ ] Notify stakeholders
              - [ ] Deploy to production
              - [ ] Verify production health
              - [ ] Monitor error rates
              
              ### Post-Release
              - [ ] Send release notes to customers
              - [ ] Update public documentation
              - [ ] Close related issues
              - [ ] Plan next release
              
              **Release Notes**: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.github-release.outputs.version }}
              **Docker Image**: \`ghcr.io/candlefish-ai/security-dashboard:${{ needs.github-release.outputs.version }}\`
              `,
              labels: ['release', 'deployment'],
              assignees: ['devops-team']
            });