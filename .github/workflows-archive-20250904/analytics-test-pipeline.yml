name: Analytics Dashboard Test Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'clos/api-server/**'
      - 'clos/web-dashboard/**'
      - '.github/workflows/analytics-test-pipeline.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'clos/api-server/**'
      - 'clos/web-dashboard/**'

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Backend API Tests
  backend-tests:
    name: Backend API Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: clos_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: clos/api-server/package-lock.json

    - name: Install backend dependencies
      working-directory: clos/api-server
      run: npm ci

    - name: Run TypeScript compilation
      working-directory: clos/api-server
      run: npm run build

    - name: Run linting
      working-directory: clos/api-server
      run: npm run lint

    - name: Run unit tests
      working-directory: clos/api-server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/clos_test
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/clos_test
        REDIS_URL: redis://localhost:6379/1
        TEST_REDIS_URL: redis://localhost:6379/1
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-for-ci
      run: npm test -- --coverage --maxWorkers=2

    - name: Run integration tests
      working-directory: clos/api-server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/clos_test
        REDIS_URL: redis://localhost:6379/1
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-for-ci
      run: npm test -- --testPathPattern=integration --maxWorkers=2

    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        directory: clos/api-server/coverage
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: clos/web-dashboard/package-lock.json

    - name: Install frontend dependencies
      working-directory: clos/web-dashboard
      run: npm ci

    - name: Run TypeScript compilation
      working-directory: clos/web-dashboard
      run: npm run type-check

    - name: Run linting
      working-directory: clos/web-dashboard
      run: npm run lint

    - name: Run unit tests
      working-directory: clos/web-dashboard
      run: npm test -- --coverage --watchAll=false --maxWorkers=2

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        directory: clos/web-dashboard/coverage
        flags: frontend
        name: frontend-coverage

  # Build and Integration Test
  build-and-integration:
    name: Build & Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: clos_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd clos/api-server && npm ci
        cd ../web-dashboard && npm ci

    - name: Build backend
      working-directory: clos/api-server
      run: npm run build

    - name: Build frontend
      working-directory: clos/web-dashboard
      env:
        NODE_ENV: production
      run: npm run build

    - name: Start backend server
      working-directory: clos/api-server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/clos_test
        REDIS_URL: redis://localhost:6379/0
        NODE_ENV: test
        PORT: 3501
      run: npm start &

    - name: Start frontend server
      working-directory: clos/web-dashboard
      env:
        NODE_ENV: production
        PORT: 3500
      run: npm start &

    - name: Wait for servers to start
      run: |
        npx wait-on http://localhost:3501/api/health -t 60000
        npx wait-on http://localhost:3500 -t 60000

    - name: Run WebSocket integration tests
      working-directory: clos/api-server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/clos_test
        REDIS_URL: redis://localhost:6379/0
        WS_URL: ws://localhost:3501
        NODE_ENV: test
      run: npm test -- --testPathPattern=websocket --maxWorkers=1

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build-and-integration
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: clos_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd clos/api-server && npm ci
        cd ../web-dashboard && npm ci

    - name: Install Playwright browsers
      working-directory: clos/web-dashboard
      run: npx playwright install --with-deps chromium firefox webkit

    - name: Build applications
      run: |
        cd clos/api-server && npm run build
        cd ../web-dashboard && npm run build

    - name: Run E2E tests
      working-directory: clos/web-dashboard
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/clos_test
        REDIS_URL: redis://localhost:6379/0
        NODE_ENV: test
      run: npm run test:e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: clos/web-dashboard/test-results/
        retention-days: 30

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build-and-integration
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: clos_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd clos/api-server && npm ci
        cd ../web-dashboard && npm ci

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Install Chrome for Lighthouse
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Start services
      run: |
        cd clos/api-server && npm start &
        cd ../web-dashboard && npm start &
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/clos_test
        REDIS_URL: redis://localhost:6379/0
        NODE_ENV: test

    - name: Wait for services
      run: |
        npx wait-on http://localhost:3501/api/health -t 60000
        npx wait-on http://localhost:3500 -t 60000

    - name: Run API load tests
      working-directory: clos/api-server
      run: k6 run tests/performance/load-test.js
      env:
        BASE_URL: http://localhost:3501

    - name: Run WebSocket load tests
      working-directory: clos/api-server
      run: k6 run tests/performance/websocket-load-test.js
      env:
        WS_URL: ws://localhost:3501

    - name: Run Lighthouse performance tests
      working-directory: clos/web-dashboard
      run: node tests/performance/lighthouse-performance.js

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-reports
        path: |
          clos/web-dashboard/test-results/lighthouse/
        retention-days: 30

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Audit backend dependencies
      working-directory: clos/api-server
      run: |
        npm ci
        npm audit --audit-level high

    - name: Audit frontend dependencies
      working-directory: clos/web-dashboard
      run: |
        npm ci
        npm audit --audit-level high

    - name: Run Semgrep security scan
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/typescript
          p/react
        generateSarif: "1"

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif
      if: always()

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd clos/api-server && npm ci
        cd ../web-dashboard && npm ci

    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: clos/
        args: >
          -Dsonar.organization=candlefish-ai
          -Dsonar.projectKey=candlefish-ai_analytics-dashboard
          -Dsonar.sources=api-server/src,web-dashboard/components,web-dashboard/app
          -Dsonar.tests=api-server/tests,web-dashboard/__tests__,web-dashboard/e2e
          -Dsonar.typescript.lcov.reportPaths=api-server/coverage/lcov.info,web-dashboard/coverage/lcov.info
          -Dsonar.javascript.lcov.reportPaths=api-server/coverage/lcov.info,web-dashboard/coverage/lcov.info

  # Test Result Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-audit, code-quality]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-results

    - name: Generate test summary
      run: |
        echo "# Analytics Dashboard Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Status Overview" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.backend-tests.result }}" == "success" ]]; then
          echo "✅ Backend Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Backend Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.frontend-tests.result }}" == "success" ]]; then
          echo "✅ Frontend Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Frontend Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
          echo "✅ E2E Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ E2E Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.security-audit.result }}" == "success" ]]; then
          echo "✅ Security Audit: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security Audit: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "✅ Code Quality: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code Quality: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifacts Generated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 Test Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "- 🎭 Playwright E2E Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- ⚡ Performance Test Reports" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY

  # Deployment (only on main branch with all tests passing)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Build applications
      run: |
        cd clos/api-server && npm ci && npm run build
        cd ../web-dashboard && npm ci && npm run build

    - name: Deploy to staging
      run: |
        echo "🚀 Deploying Analytics Dashboard to staging environment..."
        echo "Backend build artifacts ready for deployment"
        echo "Frontend build artifacts ready for deployment"
        # Add actual deployment commands here (Docker, Kubernetes, etc.)
        
    - name: Run smoke tests
      run: |
        echo "🧪 Running smoke tests against staging environment..."
        # Add smoke test commands here
        echo "Smoke tests completed successfully"

    - name: Notify deployment status
      if: always()
      run: |
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "✅ Deployment to staging completed successfully"
        else
          echo "❌ Deployment to staging failed"
        fi