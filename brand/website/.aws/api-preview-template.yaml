AWSTemplateFormatVersion: '2010-09-09'
Description: 'Ephemeral API Preview Environment for PR Reviews'

Parameters:
  PRNumber:
    Type: String
    Description: Pull Request Number
    AllowedPattern: '^[0-9]+$'
    
  Environment:
    Type: String
    Description: Environment name
    Default: preview
    
  CommitSha:
    Type: String
    Description: Git commit SHA
    AllowedPattern: '^[a-f0-9]{40}$'

Resources:
  # Lambda function for API preview
  PreviewAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'candlefish-api-preview-pr-${PRNumber}'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt PreviewAPIRole.Arn
      Code:
        ZipFile: |
          const { APIGatewayProxyHandler } = require('aws-lambda');
          
          exports.handler = async (event) => {
            const { path, httpMethod, headers } = event;
            
            // Health check endpoint
            if (path === '/health' && httpMethod === 'GET') {
              return {
                statusCode: 200,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({
                  status: 'healthy',
                  environment: 'preview',
                  prNumber: process.env.PR_NUMBER,
                  timestamp: new Date().toISOString()
                })
              };
            }
            
            // Mock API responses for preview
            if (path.startsWith('/api/')) {
              return {
                statusCode: 200,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({
                  message: 'Preview API Response',
                  path: path,
                  method: httpMethod,
                  prNumber: process.env.PR_NUMBER
                })
              };
            }
            
            // Default 404
            return {
              statusCode: 404,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              },
              body: JSON.stringify({
                error: 'Not Found',
                path: path
              })
            };
          };
      Environment:
        Variables:
          PR_NUMBER: !Ref PRNumber
          COMMIT_SHA: !Ref CommitSha
          ENVIRONMENT: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: PRNumber
          Value: !Ref PRNumber
        - Key: AutoCleanup
          Value: 'true'

  # IAM Role for Lambda function
  PreviewAPIRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'candlefish-api-preview-role-pr-${PRNumber}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PreviewAPIPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/candlefish-api-preview-pr-${PRNumber}:*'

  # API Gateway for preview API
  PreviewAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'candlefish-api-preview-pr-${PRNumber}'
      Description: !Sub 'Preview API for PR #${PRNumber}'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: PRNumber
          Value: !Ref PRNumber
        - Key: AutoCleanup
          Value: 'true'

  # API Gateway Resource (catch-all)
  PreviewAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PreviewAPIGateway
      ParentId: !GetAtt PreviewAPIGateway.RootResourceId
      PathPart: '{proxy+}'

  # API Gateway Method (ANY)
  PreviewAPIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PreviewAPIGateway
      ResourceId: !Ref PreviewAPIResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreviewAPIFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # API Gateway Method (ROOT)
  PreviewAPIRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PreviewAPIGateway
      ResourceId: !GetAtt PreviewAPIGateway.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreviewAPIFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # CORS OPTIONS method
  PreviewAPIOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref PreviewAPIGateway
      ResourceId: !Ref PreviewAPIResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda permission for API Gateway
  PreviewAPILambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PreviewAPIFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PreviewAPIGateway}/*/*'

  # API Gateway Deployment
  PreviewAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PreviewAPIMethod
      - PreviewAPIRootMethod
      - PreviewAPIOptionsMethod
    Properties:
      RestApiId: !Ref PreviewAPIGateway
      StageName: preview
      StageDescription: !Sub 'Preview stage for PR #${PRNumber}'
      Variables:
        PRNumber: !Ref PRNumber
        CommitSha: !Ref CommitSha

  # CloudWatch Log Group for Lambda
  PreviewAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/candlefish-api-preview-pr-${PRNumber}'
      RetentionInDays: 7

  # DynamoDB table for preview data (optional)
  PreviewDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'candlefish-preview-data-pr-${PRNumber}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: PRNumber
          Value: !Ref PRNumber
        - Key: AutoCleanup
          Value: 'true'

  # S3 bucket for preview assets (optional)
  PreviewAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'candlefish-preview-assets-pr-${PRNumber}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter7Days
            Status: Enabled
            ExpirationInDays: 7
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: PRNumber
          Value: !Ref PRNumber
        - Key: AutoCleanup
          Value: 'true'

Outputs:
  ApiUrl:
    Description: 'Preview API Gateway URL'
    Value: !Sub 'https://${PreviewAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/preview'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  ApiId:
    Description: 'Preview API Gateway ID'
    Value: !Ref PreviewAPIGateway
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'

  LambdaFunctionArn:
    Description: 'Preview Lambda Function ARN'
    Value: !GetAtt PreviewAPIFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'

  DynamoDBTableName:
    Description: 'Preview DynamoDB Table Name'
    Value: !Ref PreviewDataTable
    Export:
      Name: !Sub '${AWS::StackName}-TableName'

  S3BucketName:
    Description: 'Preview S3 Bucket Name'
    Value: !Ref PreviewAssetsBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'