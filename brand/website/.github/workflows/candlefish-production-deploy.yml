name: Candlefish Production Deployment

on:
  push:
    branches: [main]
    paths:
      - 'web/aquarium/**'
      - 'components/**'
      - 'app/**'
      - 'lib/**'
      - 'package.json'
      - 'next.config.js'
      - 'tailwind.config.js'
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - blue-green
          - emergency-rollback

env:
  NODE_VERSION: '18.x'
  DEPLOYMENT_ENVIRONMENT: production
  CANDLEFISH_ANALYTICS_ENABLED: true
  
jobs:
  # Feature Detection & Compatibility Testing
  feature-detection:
    runs-on: ubuntu-latest
    outputs:
      canvas-support: ${{ steps.canvas-test.outputs.supported }}
      webgl-support: ${{ steps.webgl-test.outputs.supported }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Test Canvas 2D Support
        id: canvas-test
        run: |
          npm run test:animation
          echo "supported=true" >> $GITHUB_OUTPUT
          
      - name: Test WebGL Support
        id: webgl-test
        run: |
          # Run WebGL compatibility tests
          npm run test -- --testPathPattern=webgl
          echo "supported=true" >> $GITHUB_OUTPUT

  # Quality Assurance Pipeline
  quality-assurance:
    runs-on: ubuntu-latest
    needs: [feature-detection]
    strategy:
      matrix:
        test-suite: [unit, integration, performance, accessibility, visual]
        
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Run linting
        run: npm run lint
        
      - name: Run test suite - ${{ matrix.test-suite }}
        run: |
          case "${{ matrix.test-suite }}" in
            unit)
              npm run test:unit -- --coverage --watchAll=false
              ;;
            integration)
              npm run test:integration
              ;;
            performance)
              npm run test:performance
              ;;
            accessibility)
              npm run test:accessibility
              ;;
            visual)
              npm run test:visual
              ;;
          esac
          
      - name: Upload coverage reports
        if: matrix.test-suite == 'unit'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          
      - name: Performance Budget Check
        if: matrix.test-suite == 'performance'
        run: |
          # Check animation performance metrics
          npm run test:animation
          # Verify memory usage stays under 50MB
          # Verify frame rate maintains >55 FPS on mid-tier devices
          
  # Build & Optimization
  build-and-optimize:
    runs-on: ubuntu-latest
    needs: [quality-assurance]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application with optimizations
        env:
          NEXT_TELEMETRY_DISABLED: 1
          STATIC_EXPORT: true
        run: |
          npm run build
          
      - name: Analyze bundle size
        run: |
          # Generate bundle analysis report
          npm run build -- --analyze
          
      - name: Optimize assets
        run: |
          # Compress images and optimize animations
          find out/ -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | xargs -I {} sh -c 'echo "Optimizing {}"'
          
      - name: Generate service worker
        run: |
          # Create service worker for offline candlefish memory persistence
          cat > out/sw.js << 'EOF'
          const CACHE_NAME = 'candlefish-v1';
          const CACHE_URLS = [
            '/',
            '/aquarium.js',
            '/img/candlefish-static.svg'
          ];
          
          self.addEventListener('install', (event) => {
            event.waitUntil(
              caches.open(CACHE_NAME).then((cache) => cache.addAll(CACHE_URLS))
            );
          });
          
          self.addEventListener('fetch', (event) => {
            if (event.request.url.includes('/api/candlefish/memory')) {
              // Cache memory persistence API calls
              event.respondWith(
                caches.match(event.request).then((response) => {
                  return response || fetch(event.request);
                })
              );
            }
          });
          EOF
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: production-build
          path: out/
          retention-days: 30

  # A/B Testing & Feature Flag Setup
  ab-testing-setup:
    runs-on: ubuntu-latest
    needs: [build-and-optimize]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure A/B Testing
        env:
          LAUNCHDARKLY_SDK_KEY: ${{ secrets.LAUNCHDARKLY_SDK_KEY }}
        run: |
          # Create feature flag configuration
          cat > ab-testing-config.json << 'EOF'
          {
            "emotional_complexity": {
              "variants": {
                "basic": { "allocation": 30, "emotionalStates": 3 },
                "standard": { "allocation": 50, "emotionalStates": 6 },
                "advanced": { "allocation": 20, "emotionalStates": 6, "personality": true }
              }
            },
            "trust_building_rate": {
              "variants": {
                "slow": { "allocation": 30, "multiplier": 0.7 },
                "standard": { "allocation": 40, "multiplier": 1.0 },
                "fast": { "allocation": 30, "multiplier": 1.3 }
              }
            },
            "visual_effects": {
              "variants": {
                "minimal": { "allocation": 25, "particles": false, "bubbles": false },
                "standard": { "allocation": 50, "particles": true, "bubbles": true },
                "rich": { "allocation": 25, "particles": true, "bubbles": true, "sparkles": true }
              }
            }
          }
          EOF
          
      - name: Upload A/B config
        uses: actions/upload-artifact@v3
        with:
          name: ab-testing-config
          path: ab-testing-config.json

  # Blue-Green Deployment
  deploy-blue-green:
    runs-on: ubuntu-latest
    needs: [ab-testing-setup]
    environment: production
    if: github.event.inputs.deployment_type == 'blue-green' || github.event.inputs.deployment_type == ''
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: production-build
          path: ./build/
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Determine current environment
        id: env-check
        run: |
          CURRENT_ENV=$(aws elbv2 describe-target-groups --names candlefish-blue candlefish-green --query 'TargetGroups[?State==`active`].TargetGroupName' --output text)
          if [ "$CURRENT_ENV" = "candlefish-blue" ]; then
            echo "current=blue" >> $GITHUB_OUTPUT
            echo "target=green" >> $GITHUB_OUTPUT
          else
            echo "current=green" >> $GITHUB_OUTPUT
            echo "target=blue" >> $GITHUB_OUTPUT
          fi
          
      - name: Deploy to ${{ steps.env-check.outputs.target }} environment
        run: |
          # Deploy to target environment
          aws s3 sync ./build/ s3://candlefish-${{ steps.env-check.outputs.target }}/
          
          # Update CloudFront distribution
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_${{ steps.env-check.outputs.target }} }} --paths "/*"
          
      - name: Run smoke tests on ${{ steps.env-check.outputs.target }}
        run: |
          # Test candlefish animation loads and functions
          curl -f https://candlefish-${{ steps.env-check.outputs.target }}.candlefish.ai/health || exit 1
          
          # Run specific candlefish tests
          npm run test:e2e -- --baseUrl=https://candlefish-${{ steps.env-check.outputs.target }}.candlefish.ai
          
      - name: Switch traffic to ${{ steps.env-check.outputs.target }}
        run: |
          # Update load balancer to point to new environment
          aws elbv2 modify-rule --rule-arn ${{ secrets.ALB_RULE_ARN }} \
            --actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:us-east-1:${{ secrets.AWS_ACCOUNT_ID }}:targetgroup/candlefish-${{ steps.env-check.outputs.target }}/$(aws elbv2 describe-target-groups --names candlefish-${{ steps.env-check.outputs.target }} --query 'TargetGroups[0].TargetGroupArn' --output text | cut -d'/' -f2-)
          
      - name: Monitor deployment health
        run: |
          # Monitor for 5 minutes after traffic switch
          for i in {1..30}; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://candlefish.ai/health)
            if [ "$HTTP_CODE" -ne "200" ]; then
              echo "Health check failed with code: $HTTP_CODE"
              exit 1
            fi
            sleep 10
          done

  # Performance & Analytics Monitoring
  post-deployment-monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-blue-green]
    
    steps:
      - name: Setup monitoring dashboard
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
        run: |
          # Create Grafana dashboard for candlefish metrics
          curl -X POST "https://api.grafana.com/dashboards" \
            -H "Authorization: Bearer $GRAFANA_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "dashboard": {
                "title": "Candlefish Animation Metrics",
                "panels": [
                  {
                    "title": "Emotional State Distribution",
                    "type": "piechart",
                    "targets": [{"expr": "candlefish_mood_transitions_total"}]
                  },
                  {
                    "title": "Trust Level Progression",
                    "type": "graph", 
                    "targets": [{"expr": "candlefish_trust_level"}]
                  },
                  {
                    "title": "Animation Performance",
                    "type": "graph",
                    "targets": [
                      {"expr": "candlefish_fps"},
                      {"expr": "candlefish_memory_usage"}
                    ]
                  }
                ]
              }
            }'
            
      - name: Configure real-time alerts
        run: |
          # Set up alerts for critical metrics
          curl -X POST "https://api.datadoghq.com/api/v1/monitor" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: $DATADOG_API_KEY" \
            -d '{
              "type": "metric alert",
              "query": "avg(last_5m):avg:candlefish.fps < 30",
              "name": "Candlefish FPS Degradation",
              "message": "Animation performance has degraded below 30 FPS",
              "options": {
                "notify_audit": false,
                "locked": false,
                "timeout_h": 0,
                "new_host_delay": 300,
                "require_full_window": true,
                "notify_no_data": false,
                "renotify_interval": 0
              }
            }'

  # Emergency Rollback (Manual trigger only)
  emergency-rollback:
    runs-on: ubuntu-latest
    if: github.event.inputs.deployment_type == 'emergency-rollback'
    environment: production
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Identify rollback target
        id: rollback-target
        run: |
          CURRENT_ENV=$(aws elbv2 describe-target-groups --names candlefish-blue candlefish-green --query 'TargetGroups[?State==`active`].TargetGroupName' --output text)
          if [ "$CURRENT_ENV" = "candlefish-blue" ]; then
            echo "rollback_to=green" >> $GITHUB_OUTPUT
          else
            echo "rollback_to=blue" >> $GITHUB_OUTPUT
          fi
          
      - name: Execute emergency rollback
        run: |
          echo "🚨 EMERGENCY ROLLBACK INITIATED"
          echo "Rolling back from $([ "${{ steps.rollback-target.outputs.rollback_to }}" = "green" ] && echo "blue" || echo "green") to ${{ steps.rollback-target.outputs.rollback_to }}"
          
          # Switch load balancer back to previous environment
          aws elbv2 modify-rule --rule-arn ${{ secrets.ALB_RULE_ARN }} \
            --actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:us-east-1:${{ secrets.AWS_ACCOUNT_ID }}:targetgroup/candlefish-${{ steps.rollback-target.outputs.rollback_to }}/$(aws elbv2 describe-target-groups --names candlefish-${{ steps.rollback-target.outputs.rollback_to }} --query 'TargetGroups[0].TargetGroupArn' --output text | cut -d'/' -f2-)
          
          # Clear CloudFront caches
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
          
      - name: Verify rollback success
        run: |
          sleep 30  # Wait for DNS propagation
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://candlefish.ai/health)
          if [ "$HTTP_CODE" -eq "200" ]; then
            echo "✅ Rollback successful"
          else
            echo "❌ Rollback verification failed"
            exit 1
          fi
          
      - name: Notify team of emergency rollback
        run: |
          # Send Slack notification
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-type: application/json' \
            --data '{"text":"🚨 EMERGENCY ROLLBACK COMPLETED for Candlefish Animation - Previous version restored"}'