# Multi-stage Dockerfile for Candlefish.ai Operational Design Atelier
# Optimized for performance, security, and minimal attack surface

# Stage 1: Dependencies
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy dependency files
COPY package.json package-lock.json ./

# Install production dependencies
RUN npm ci --only=production && \
    npm cache clean --force

# Install all dependencies for building
COPY package.json package-lock.json ./
RUN npm ci && \
    npm cache clean --force

# Stage 2: Builder
FROM node:20-alpine AS builder
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build arguments for configuration
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_WS_URL
ARG NEXT_PUBLIC_ENVIRONMENT

# Set build-time environment variables
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV NEXT_PUBLIC_WS_URL=$NEXT_PUBLIC_WS_URL
ENV NEXT_PUBLIC_ENVIRONMENT=$NEXT_PUBLIC_ENVIRONMENT
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Build the application with optimizations
RUN npm run build && \
    # Remove dev dependencies and unnecessary files
    rm -rf .git \
    rm -rf __tests__ \
    rm -rf cypress \
    rm -rf scripts \
    rm -rf terraform \
    rm -rf *.md \
    rm -rf .github \
    rm -rf .vscode \
    find . -name "*.map" -delete && \
    find . -name "*.test.*" -delete

# Stage 3: Runtime
FROM node:20-alpine AS runner
WORKDIR /app

# Security: Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Install production dependencies only
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Copy configuration files
COPY --chown=nextjs:nodejs next.config.js ./
COPY --chown=nextjs:nodejs package.json ./

# Set runtime environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Security headers and configurations
ENV HELMET_ENABLED=true
ENV RATE_LIMIT_ENABLED=true
ENV CORS_ENABLED=true

# Performance optimizations
ENV NODE_OPTIONS="--max-old-space-size=2048 --enable-source-maps"

# Health check endpoint
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node healthcheck.js || exit 1

# Create healthcheck script
RUN echo 'const http = require("http"); \
    const options = { \
        hostname: "localhost", \
        port: 3000, \
        path: "/api/health", \
        timeout: 2000 \
    }; \
    const req = http.request(options, (res) => { \
        process.exit(res.statusCode === 200 ? 0 : 1); \
    }); \
    req.on("error", () => process.exit(1)); \
    req.end();' > healthcheck.js && \
    chown nextjs:nodejs healthcheck.js

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Start the application
CMD ["node", "server.js"]