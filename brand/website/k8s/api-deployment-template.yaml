apiVersion: apps/v1
kind: Deployment
metadata:
  name: SERVICE_NAME_PLACEHOLDER
  labels:
    app: SERVICE_NAME_PLACEHOLDER
    app.kubernetes.io/name: SERVICE_NAME_PLACEHOLDER
    app.kubernetes.io/version: IMAGE_TAG_PLACEHOLDER
    app.kubernetes.io/component: api-service
    app.kubernetes.io/part-of: candlefish-platform
  annotations:
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: SERVICE_NAME_PLACEHOLDER
  template:
    metadata:
      labels:
        app: SERVICE_NAME_PLACEHOLDER
        app.kubernetes.io/name: SERVICE_NAME_PLACEHOLDER
        app.kubernetes.io/version: IMAGE_TAG_PLACEHOLDER
        app.kubernetes.io/component: api-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
        config.checksum: "${CONFIG_CHECKSUM}"
    spec:
      serviceAccountName: SERVICE_NAME_PLACEHOLDER-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: SERVICE_NAME_PLACEHOLDER
        image: ${ECR_REGISTRY}/SERVICE_NAME_PLACEHOLDER:IMAGE_TAG_PLACEHOLDER
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: HOSTNAME
          value: "0.0.0.0"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-secrets
              key: openai-api-key
              optional: true
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-secrets
              key: anthropic-api-key
              optional: true
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: User-Agent
              value: kube-probe/liveness
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: User-Agent
              value: kube-probe/readiness
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: User-Agent
              value: kube-probe/startup
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: app-logs
        emptyDir:
          sizeLimit: 500Mi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - SERVICE_NAME_PLACEHOLDER
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                - t3.medium
                - t3.large
      tolerations:
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: SERVICE_NAME_PLACEHOLDER-service
  labels:
    app: SERVICE_NAME_PLACEHOLDER
    app.kubernetes.io/name: SERVICE_NAME_PLACEHOLDER
    app.kubernetes.io/component: api-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: SERVICE_NAME_PLACEHOLDER

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: SERVICE_NAME_PLACEHOLDER-sa
  labels:
    app: SERVICE_NAME_PLACEHOLDER
    app.kubernetes.io/name: SERVICE_NAME_PLACEHOLDER
    app.kubernetes.io/component: api-service
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::${AWS_ACCOUNT_ID}:role/SERVICE_NAME_PLACEHOLDER-role
automountServiceAccountToken: true

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: SERVICE_NAME_PLACEHOLDER-ingress
  labels:
    app: SERVICE_NAME_PLACEHOLDER
    app.kubernetes.io/name: SERVICE_NAME_PLACEHOLDER
    app.kubernetes.io/component: api-service
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - api.candlefish.ai
    secretName: SERVICE_NAME_PLACEHOLDER-tls
  rules:
  - host: api.candlefish.ai
    http:
      paths:
      - path: /SERVICE_NAME_PLACEHOLDER(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: SERVICE_NAME_PLACEHOLDER-service
            port:
              number: 80