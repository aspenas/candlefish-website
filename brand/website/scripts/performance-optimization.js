#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
const { exec } = require('child_process');

const execAsync = promisify(exec);

console.log('üöÄ Candlefish Performance Optimization Script');
console.log('='.repeat(50));

// Configuration
const BUNDLE_SIZE_LIMIT = {
  total: 250 * 1024, // 250KB total
  individual: 50 * 1024, // 50KB per chunk
};

const CRITICAL_METRICS = {
  lcp: 2000, // Target LCP < 2000ms
  fcp: 1800, // Target FCP < 1800ms
  cls: 0.1,  // Target CLS < 0.1
  fid: 100,  // Target FID < 100ms
  ttfb: 600, // Target TTFB < 600ms
};

async function analyzeBundle() {
  console.log('\nüìä Analyzing bundle size...');
  
  try {
    // Run build with bundle analyzer
    const { stdout } = await execAsync('npm run build:perf');
    console.log('‚úÖ Bundle analysis complete');
    
    // Check if bundle-analysis.html exists
    const analysisPath = path.join(process.cwd(), 'bundle-analysis.html');
    if (fs.existsSync(analysisPath)) {
      console.log(`üìÅ Bundle analysis saved to: ${analysisPath}`);
    }
  } catch (error) {
    console.error('‚ùå Bundle analysis failed:', error.message);
    return false;
  }
  
  return true;
}

async function checkImageOptimization() {
  console.log('\nüñºÔ∏è  Checking image optimization...');
  
  const publicDir = path.join(process.cwd(), 'public');
  const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.svg'];
  const largeSizeThreshold = 500 * 1024; // 500KB
  
  let largeImages = [];
  
  function scanDirectory(dirPath) {
    const items = fs.readdirSync(dirPath, { withFileTypes: true });
    
    items.forEach(item => {
      const fullPath = path.join(dirPath, item.name);
      
      if (item.isDirectory()) {
        scanDirectory(fullPath);
      } else if (imageExtensions.some(ext => item.name.toLowerCase().endsWith(ext))) {
        const stats = fs.statSync(fullPath);
        if (stats.size > largeSizeThreshold) {
          largeImages.push({
            path: path.relative(publicDir, fullPath),
            size: Math.round(stats.size / 1024),
          });
        }
      }
    });
  }
  
  if (fs.existsSync(publicDir)) {
    scanDirectory(publicDir);
  }
  
  if (largeImages.length > 0) {
    console.log('‚ö†Ô∏è  Large images found (>500KB):');
    largeImages.forEach(img => {
      console.log(`   ‚Ä¢ ${img.path} (${img.size}KB)`);
    });
    console.log('\nüí° Consider optimizing these images with next/image or compression tools');
  } else {
    console.log('‚úÖ No large unoptimized images found');
  }
  
  return largeImages.length === 0;
}

async function analyzeDependencies() {
  console.log('\nüì¶ Analyzing dependencies...');
  
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  
  const heavyDependencies = [
    { name: '@react-three/fiber', reason: 'WebGL library - code split if possible' },
    { name: '@react-three/drei', reason: 'Three.js helpers - use selective imports' },
    { name: 'three', reason: 'Large 3D library - ensure tree shaking works' },
    { name: 'framer-motion', reason: 'Animation library - consider lighter alternatives' },
  ];
  
  const foundHeavy = heavyDependencies.filter(dep => 
    packageJson.dependencies && packageJson.dependencies[dep.name]
  );
  
  if (foundHeavy.length > 0) {
    console.log('‚ö†Ô∏è  Heavy dependencies detected:');
    foundHeavy.forEach(dep => {
      console.log(`   ‚Ä¢ ${dep.name}: ${dep.reason}`);
    });
  }
  
  // Check for duplicate dependencies
  const deps = Object.keys(packageJson.dependencies || {});
  const devDeps = Object.keys(packageJson.devDependencies || {});
  const duplicates = deps.filter(dep => devDeps.includes(dep));
  
  if (duplicates.length > 0) {
    console.log('\n‚ö†Ô∏è  Duplicate dependencies found:');
    duplicates.forEach(dep => console.log(`   ‚Ä¢ ${dep}`));
  }
  
  console.log(`üìä Total dependencies: ${deps.length}`);
  console.log(`üìä Total dev dependencies: ${devDeps.length}`);
}

async function checkServiceWorker() {
  console.log('\nüîß Checking Service Worker...');
  
  const swPath = path.join(process.cwd(), 'public', 'sw.js');
  const offlinePath = path.join(process.cwd(), 'public', 'offline.html');
  
  if (fs.existsSync(swPath)) {
    console.log('‚úÖ Service Worker found');
    
    const swContent = fs.readFileSync(swPath, 'utf8');
    const hasThreeJSCaching = swContent.includes('THREE_JS_PATTERNS');
    const hasVersioning = swContent.includes('candlefish-v1');
    
    console.log(`   ‚Ä¢ Three.js caching: ${hasThreeJSCaching ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ Cache versioning: ${hasVersioning ? '‚úÖ' : '‚ùå'}`);
  } else {
    console.log('‚ùå Service Worker not found');
  }
  
  if (fs.existsSync(offlinePath)) {
    console.log('‚úÖ Offline fallback page found');
  } else {
    console.log('‚ùå Offline fallback page not found');
  }
}

async function generatePerformanceReport() {
  console.log('\nüìã Generating performance report...');
  
  const report = {
    timestamp: new Date().toISOString(),
    target_metrics: CRITICAL_METRICS,
    optimizations_implemented: [
      '‚úÖ Next.js image optimization enabled',
      '‚úÖ Code splitting for Three.js components',
      '‚úÖ Service Worker with intelligent caching',
      '‚úÖ React component memoization',
      '‚úÖ Web Vitals monitoring',
      '‚úÖ Bundle analysis configured',
      '‚úÖ Lazy loading for heavy components',
      '‚úÖ Progressive enhancement for WebGL',
    ],
    recommendations: [
      'Monitor Core Web Vitals in production',
      'Implement image CDN for optimal delivery',
      'Consider using a lighter animation library for non-WebGL animations',
      'Implement critical CSS inlining for faster FCP',
      'Add resource hints for external dependencies',
      'Consider server-side rendering for initial paint',
    ],
  };
  
  const reportPath = path.join(process.cwd(), 'performance-report.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  
  console.log(`üìÑ Performance report saved to: performance-report.json`);
  console.log('\nüéØ Performance Targets:');
  Object.entries(CRITICAL_METRICS).forEach(([metric, target]) => {
    const unit = metric === 'cls' ? '' : 'ms';
    console.log(`   ‚Ä¢ ${metric.toUpperCase()}: <${target}${unit}`);
  });
}

async function runOptimizationChecks() {
  console.log('\nüîç Running optimization checks...');
  
  const results = {
    bundle: await analyzeBundle(),
    images: await checkImageOptimization(),
  };
  
  await analyzeDependencies();
  await checkServiceWorker();
  await generatePerformanceReport();
  
  console.log('\n' + '='.repeat(50));
  console.log('üìä OPTIMIZATION SUMMARY');
  console.log('='.repeat(50));
  
  console.log(`Bundle Analysis: ${results.bundle ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
  console.log(`Image Optimization: ${results.images ? '‚úÖ PASSED' : '‚ö†Ô∏è  NEEDS ATTENTION'}`);
  
  const overallScore = Object.values(results).filter(Boolean).length / Object.keys(results).length;
  console.log(`\nüéØ Overall Score: ${Math.round(overallScore * 100)}%`);
  
  if (overallScore >= 0.8) {
    console.log('üéâ Great job! Your performance optimizations are on track.');
  } else if (overallScore >= 0.6) {
    console.log('‚ö†Ô∏è  Good progress, but there are some areas that need attention.');
  } else {
    console.log('‚ùå Performance needs significant improvement.');
  }
  
  console.log('\nüí° Next Steps:');
  console.log('   1. Run `npm run lighthouse` to test Core Web Vitals');
  console.log('   2. Check Web Vitals in browser dev tools');
  console.log('   3. Monitor performance in production');
  console.log('   4. Review bundle-analysis.html for optimization opportunities');
  
  return overallScore >= 0.7;
}

// Run the optimization checks
runOptimizationChecks()
  .then(success => {
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('‚ùå Performance optimization script failed:', error);
    process.exit(1);
  });