import request from 'supertest';
import express from 'express';
import { Pool } from 'pg';
import Redis from 'ioredis';
import jwt from 'jsonwebtoken';
import { createAnalyticsRouter } from '../../src/routes/analytics';
import { DatabaseService } from '../../src/services/database';
import { CacheService } from '../../src/services/cache';

describe('Analytics API Endpoints', () => {
  let app: express.Application;\n  let pool: Pool;\n  let redis: Redis;\n  let databaseService: DatabaseService;\n  let cacheService: CacheService;\n  let authToken: string;\n\n  beforeAll(async () => {\n    // Setup database and cache connections\n    pool = new Pool({\n      connectionString: process.env.DATABASE_URL,\n      max: 5\n    });\n    \n    redis = new Redis(process.env.REDIS_URL!);\n    \n    databaseService = new DatabaseService(pool);\n    cacheService = new CacheService(redis);\n    \n    // Create Express app with analytics routes\n    app = express();\n    app.use(express.json());\n    \n    // Add auth middleware mock\n    app.use((req, res, next) => {\n      const token = req.headers.authorization?.split(' ')[1];\n      if (token) {\n        try {\n          const decoded = jwt.verify(token, process.env.JWT_SECRET!);\n          req.user = decoded;\n        } catch (error) {\n          return res.status(401).json({ error: 'Invalid token' });\n        }\n      }\n      next();\n    });\n    \n    app.use('/api/v1/analytics', createAnalyticsRouter(databaseService, cacheService));\n    \n    // Generate test auth token\n    authToken = jwt.sign(\n      { userId: 'test-user-id', role: 'admin' },\n      process.env.JWT_SECRET!,\n      { expiresIn: '1h' }\n    );\n    \n    // Clean and seed test data\n    await cleanTestData();\n    await seedTestData();\n  });\n\n  beforeEach(async () => {\n    // Clear cache before each test\n    await cacheService.clear('analytics:*');\n  });\n\n  afterAll(async () => {\n    await cleanTestData();\n    await pool.end();\n    await redis.disconnect();\n  });\n\n  describe('GET /api/v1/analytics/agents/performance', () => {\n    it('should return agent performance metrics', async () => {\n      const response = await request(app)\n        .get('/api/v1/analytics/agents/performance')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body).toHaveProperty('data');\n      expect(Array.isArray(response.body.data)).toBe(true);\n      \n      if (response.body.data.length > 0) {\n        const metric = response.body.data[0];\n        expect(metric).toHaveProperty('agent_id');\n        expect(metric).toHaveProperty('agent_name');\n        expect(metric).toHaveProperty('metric_type');\n        expect(metric).toHaveProperty('value');\n        expect(metric.created_at).toBeValidDate();\n      }\n    });\n\n    it('should filter by agent_id when provided', async () => {\n      const response = await request(app)\n        .get('/api/v1/analytics/agents/performance?agent_id=test-agent-1')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      response.body.data.forEach((metric: any) => {\n        expect(metric.agent_id).toBe('test-agent-1');\n      });\n    });\n\n    it('should filter by date range', async () => {\n      const startDate = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();\n      const endDate = new Date().toISOString();\n      \n      const response = await request(app)\n        .get(`/api/v1/analytics/agents/performance?start_date=${startDate}&end_date=${endDate}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      response.body.data.forEach((metric: any) => {\n        const createdAt = new Date(metric.created_at);\n        expect(createdAt >= new Date(startDate)).toBe(true);\n        expect(createdAt <= new Date(endDate)).toBe(true);\n      });\n    });\n\n    it('should return 401 without authentication', async () => {\n      await request(app)\n        .get('/api/v1/analytics/agents/performance')\n        .expect(401);\n    });\n\n    it('should handle pagination parameters', async () => {\n      const response = await request(app)\n        .get('/api/v1/analytics/agents/performance?limit=5&offset=0')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.length).toBeLessThanOrEqual(5);\n    });\n  });\n\n  describe('GET /api/v1/analytics/services/health', () => {\n    it('should return service health metrics', async () => {\n      const response = await request(app)\n        .get('/api/v1/analytics/services/health')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body).toHaveProperty('data');\n      expect(Array.isArray(response.body.data)).toBe(true);\n      \n      if (response.body.data.length > 0) {\n        const metric = response.body.data[0];\n        expect(metric).toHaveProperty('service_name');\n        expect(metric).toHaveProperty('response_time_ms');\n        expect(metric).toHaveProperty('status_code');\n        expect(typeof metric.response_time_ms).toBe('number');\n      }\n    });\n\n    it('should filter by service name', async () => {\n      const response = await request(app)\n        .get('/api/v1/analytics/services/health?service=api-server')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      response.body.data.forEach((metric: any) => {\n        expect(metric.service_name).toBe('api-server');\n      });\n    });\n\n    it('should calculate average response time', async () => {\n      const response = await request(app)\n        .get('/api/v1/analytics/services/health?aggregate=avg')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      if (response.body.data.length > 0) {\n        expect(response.body).toHaveProperty('summary');\n        expect(response.body.summary).toHaveProperty('avg_response_time');\n        expect(typeof response.body.summary.avg_response_time).toBe('number');\n      }\n    });\n  });\n\n  describe('GET /api/v1/analytics/system/overview', () => {\n    it('should return system overview metrics', async () => {\n      const response = await request(app)\n        .get('/api/v1/analytics/system/overview')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body).toHaveProperty('data');\n      expect(response.body.data).toHaveProperty('agents');\n      expect(response.body.data).toHaveProperty('services');\n      expect(response.body.data).toHaveProperty('system');\n    });\n\n    it('should include system health status', async () => {\n      const response = await request(app)\n        .get('/api/v1/analytics/system/overview')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.data).toHaveProperty('health_status');\n      expect(['healthy', 'warning', 'critical']).toContain(\n        response.body.data.health_status\n      );\n    });\n\n    it('should cache system overview for performance', async () => {\n      // First request\n      const start1 = Date.now();\n      await request(app)\n        .get('/api/v1/analytics/system/overview')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n      const duration1 = Date.now() - start1;\n\n      // Second request (should be cached)\n      const start2 = Date.now();\n      await request(app)\n        .get('/api/v1/analytics/system/overview')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n      const duration2 = Date.now() - start2;\n\n      // Cached request should be faster\n      expect(duration2).toBeLessThan(duration1);\n    });\n  });\n\n  describe('POST /api/v1/analytics/metrics', () => {\n    it('should create new agent performance metric', async () => {\n      const newMetric = {\n        type: 'agent',\n        agent_id: 'test-agent-new',\n        agent_name: 'Test Agent New',\n        metric_type: 'response_time',\n        value: 150.5,\n        unit: 'ms'\n      };\n\n      const response = await request(app)\n        .post('/api/v1/analytics/metrics')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(newMetric)\n        .expect(201);\n\n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body).toHaveProperty('data');\n      expect(response.body.data).toHaveProperty('id');\n      expect(response.body.data.agent_id).toBe(newMetric.agent_id);\n    });\n\n    it('should create new service performance metric', async () => {\n      const newMetric = {\n        type: 'service',\n        service_name: 'test-service',\n        endpoint: '/api/test',\n        response_time_ms: 200,\n        status_code: 200,\n        cpu_usage: 45.2,\n        memory_usage: 512.5\n      };\n\n      const response = await request(app)\n        .post('/api/v1/analytics/metrics')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(newMetric)\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.service_name).toBe(newMetric.service_name);\n    });\n\n    it('should validate required fields', async () => {\n      const invalidMetric = {\n        type: 'agent'\n        // Missing required fields\n      };\n\n      const response = await request(app)\n        .post('/api/v1/analytics/metrics')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(invalidMetric)\n        .expect(400);\n\n      expect(response.body).toHaveProperty('success', false);\n      expect(response.body).toHaveProperty('error');\n    });\n\n    it('should reject invalid metric types', async () => {\n      const invalidMetric = {\n        type: 'invalid-type',\n        value: 100\n      };\n\n      await request(app)\n        .post('/api/v1/analytics/metrics')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(invalidMetric)\n        .expect(400);\n    });\n  });\n\n  describe('GET /api/v1/analytics/trends', () => {\n    it('should return performance trends over time', async () => {\n      const response = await request(app)\n        .get('/api/v1/analytics/trends?period=24h')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body).toHaveProperty('data');\n      expect(response.body.data).toHaveProperty('agent_trends');\n      expect(response.body.data).toHaveProperty('service_trends');\n    });\n\n    it('should group trends by specified interval', async () => {\n      const response = await request(app)\n        .get('/api/v1/analytics/trends?period=24h&interval=1h')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      if (response.body.data.agent_trends.length > 0) {\n        const trend = response.body.data.agent_trends[0];\n        expect(trend).toHaveProperty('time_bucket');\n        expect(trend).toHaveProperty('avg_value');\n      }\n    });\n\n    it('should validate period parameter', async () => {\n      await request(app)\n        .get('/api/v1/analytics/trends?period=invalid')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(400);\n    });\n  });\n\n  // Helper functions\n  async function cleanTestData() {\n    await pool.query('DELETE FROM agent_performance_metrics WHERE agent_id LIKE \\'test-%\\'');\n    await pool.query('DELETE FROM service_performance_metrics WHERE service_name LIKE \\'test-%\\'');\n    await pool.query('DELETE FROM system_metrics WHERE component LIKE \\'test-%\\'');\n  }\n\n  async function seedTestData() {\n    // Seed agent metrics\n    await pool.query(`\n      INSERT INTO agent_performance_metrics (agent_id, agent_name, metric_type, value, unit)\n      VALUES \n        ('test-agent-1', 'Test Agent 1', 'response_time', 120.5, 'ms'),\n        ('test-agent-1', 'Test Agent 1', 'success_rate', 95.2, '%'),\n        ('test-agent-2', 'Test Agent 2', 'response_time', 89.3, 'ms'),\n        ('test-agent-2', 'Test Agent 2', 'error_rate', 2.1, '%')\n    `);\n\n    // Seed service metrics\n    await pool.query(`\n      INSERT INTO service_performance_metrics (service_name, endpoint, response_time_ms, status_code, cpu_usage, memory_usage)\n      VALUES \n        ('api-server', '/api/v1/analytics', 150, 200, 25.5, 256.2),\n        ('api-server', '/api/v1/agents', 95, 200, 22.1, 245.8),\n        ('web-dashboard', '/dashboard', 45, 200, 15.2, 128.5)\n    `);\n\n    // Seed system metrics\n    await pool.query(`\n      INSERT INTO system_metrics (metric_name, metric_value, metric_unit, component, severity)\n      VALUES \n        ('cpu_usage', 45.2, '%', 'system', 'info'),\n        ('memory_usage', 2048.5, 'MB', 'system', 'info'),\n        ('disk_usage', 75.8, '%', 'system', 'warning')\n    `);\n  }\n});"