---
# Comprehensive Audit Logging and Monitoring Configuration
# Implements detailed audit trails for compliance and security monitoring
# Compliant with PCI DSS 10.1-10.7, HIPAA ยง164.312(b), SOC 2 CC7.2

# Fluent Bit DaemonSet for log collection
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluent-bit
  namespace: claude-config
  labels:
    app.kubernetes.io/name: fluent-bit
    security.candlefish.ai/component: log-collector
    compliance: "pci-dss-10.2,hipaa-164.312"
spec:
  selector:
    matchLabels:
      app: fluent-bit
  template:
    metadata:
      labels:
        app: fluent-bit
        security-zone: monitoring
    spec:
      serviceAccountName: fluent-bit-sa
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: fluent-bit
        image: fluent/fluent-bit:2.1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 2020
          name: metrics
        env:
        - name: FLUENT_ELASTICSEARCH_HOST
          value: "elasticsearch.monitoring.svc.cluster.local"
        - name: FLUENT_ELASTICSEARCH_PORT
          value: "9200"
        - name: FLUENT_ELASTICSEARCH_TLS
          value: "On"
        - name: FLUENT_ELASTICSEARCH_TLS_VERIFY
          value: "On"
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc/
        - name: mnt
          mountPath: /mnt
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
      - name: mnt
        hostPath:
          path: /mnt

---
# Fluent Bit configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: claude-config
  labels:
    app.kubernetes.io/name: fluent-bit
    security.candlefish.ai/component: log-config
data:
  fluent-bit.conf: |
    [SERVICE]
        Daemon Off
        Flush 1
        Log_Level info
        Parsers_File parsers.conf
        Parsers_File custom_parsers.conf
        HTTP_Server On
        HTTP_Listen 0.0.0.0
        HTTP_Port 2020
        Health_Check On
        HC_Errors_Count 5
        HC_Retry_Failure_Count 5
        HC_Period 60

    [INPUT]
        Name tail
        Path /var/log/containers/*.log
        Parser cri
        Tag kube.*
        Mem_Buf_Limit 5MB
        Skip_Long_Lines On
        DB /var/log/flb_kube.db

    [INPUT]
        Name systemd
        Tag host.*
        Systemd_Filter _SYSTEMD_UNIT=kubelet.service
        Read_From_Tail On

    [FILTER]
        Name kubernetes
        Match kube.*
        Kube_URL https://kubernetes.default.svc:443
        Kube_CA_File /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix kube.var.log.containers.
        Merge_Log On
        Keep_Log Off
        K8S-Logging.Parser On
        K8S-Logging.Exclude On

    [FILTER]
        Name record_modifier
        Match *
        Record cluster_name claude-config
        Record environment production
        Record compliance_required true

    # Detect and mask sensitive data
    [FILTER]
        Name lua
        Match *
        script /fluent-bit/scripts/mask_sensitive.lua
        call mask_sensitive_data

    # Add security context
    [FILTER]
        Name lua
        Match *
        script /fluent-bit/scripts/security_context.lua
        call add_security_context

    [OUTPUT]
        Name es
        Match *
        Host ${FLUENT_ELASTICSEARCH_HOST}
        Port ${FLUENT_ELASTICSEARCH_PORT}
        TLS On
        TLS.Verify On
        Logstash_Format On
        Logstash_Prefix audit
        Logstash_DateFormat %Y.%m.%d
        Type _doc
        Include_Tag_Key On
        Tag_Key @log_tag
        Buffer_Size 1M
        Retry_Limit 5

    [OUTPUT]
        Name s3
        Match *
        bucket claude-config-audit-logs
        region us-east-1
        use_put_object On
        total_file_size 50M
        upload_timeout 10m
        store_dir /tmp/fluent-bit-s3
        s3_key_format /logs/%Y/%m/%d/${UUID}.gz
        compression gzip

  parsers.conf: |
    [PARSER]
        Name cri
        Format regex
        Regex ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<message>.*)$
        Time_Key time
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z

    [PARSER]
        Name json
        Format json
        Time_Key time
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z

    [PARSER]
        Name audit
        Format json
        Time_Key timestamp
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z

  custom_parsers.conf: |
    [PARSER]
        Name security_event
        Format json
        Time_Key timestamp
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z
        Types severity:string user:string action:string resource:string

  mask_sensitive.lua: |
    function mask_sensitive_data(tag, timestamp, record)
        -- Mask credit card numbers
        if record["message"] then
            record["message"] = string.gsub(record["message"], "%d%d%d%d%-?%d%d%d%d%-?%d%d%d%d%-?%d%d%d%d", "****-****-****-****")
            -- Mask SSN
            record["message"] = string.gsub(record["message"], "%d%d%d%-?%d%d%-?%d%d%d%d", "***-**-****")
            -- Mask API keys
            record["message"] = string.gsub(record["message"], "api[_-]?key[\"']?:%s*[\"']?([^\"'%s]+)", "api_key: ****MASKED****")
            -- Mask passwords
            record["message"] = string.gsub(record["message"], "password[\"']?:%s*[\"']?([^\"'%s]+)", "password: ****MASKED****")
        end
        return 1, timestamp, record
    end

  security_context.lua: |
    function add_security_context(tag, timestamp, record)
        -- Add security classification
        if string.match(record["message"] or "", "auth") or 
           string.match(record["message"] or "", "login") or
           string.match(record["message"] or "", "password") then
            record["security_level"] = "high"
        else
            record["security_level"] = "standard"
        end
        
        -- Add compliance tags
        if record["kubernetes"] and record["kubernetes"]["namespace_name"] == "claude-config" then
            record["compliance_scope"] = "pci-dss,hipaa,soc2"
        end
        
        -- Add timestamp for audit trail
        record["audit_timestamp"] = os.date("!%Y-%m-%dT%H:%M:%S.000Z")
        
        return 1, timestamp, record
    end

---
# Prometheus for metrics collection
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: claude-config
  labels:
    app.kubernetes.io/name: prometheus
    security.candlefish.ai/component: metrics
spec:
  replicas: 2
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        security-zone: monitoring
    spec:
      serviceAccountName: prometheus-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        imagePullPolicy: Always
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus/
        - --storage.tsdb.retention.time=30d
        - --storage.tsdb.retention.size=10GB
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --web.enable-lifecycle
        - --web.enable-admin-api
        ports:
        - containerPort: 9090
          name: http
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-pvc

---
# Prometheus configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: claude-config
  labels:
    app.kubernetes.io/name: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'claude-config'
        environment: 'production'

    # Security alerts
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093

    rule_files:
      - /etc/prometheus/rules/*.yml

    scrape_configs:
    # Kubernetes API server
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

    # Kubernetes nodes
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)

    # Application metrics
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__

    # Security metrics
    - job_name: 'security-metrics'
      static_configs:
      - targets:
        - 'falco-exporter:9376'
        - 'trivy-exporter:9115'
        - 'vault-exporter:9410'
      metrics_path: /metrics

  rules.yml: |
    groups:
    - name: security_alerts
      interval: 30s
      rules:
      # Authentication failures
      - alert: HighAuthenticationFailures
        expr: rate(authentication_failures_total[5m]) > 10
        for: 5m
        labels:
          severity: warning
          component: auth
          compliance: "pci-dss-8.1.6"
        annotations:
          summary: "High rate of authentication failures"
          description: "Authentication failures exceed 10 per minute for 5 minutes"

      # Unauthorized access attempts
      - alert: UnauthorizedAccessAttempt
        expr: unauthorized_access_attempts_total > 0
        for: 1m
        labels:
          severity: critical
          component: security
          compliance: "pci-dss-10.2.4"
        annotations:
          summary: "Unauthorized access attempt detected"
          description: "Unauthorized access attempt to {{ $labels.resource }}"

      # Secret access anomaly
      - alert: AnomalousSecretAccess
        expr: rate(secret_access_total[5m]) > 50
        for: 2m
        labels:
          severity: warning
          component: secrets
          compliance: "pci-dss-3.4"
        annotations:
          summary: "Anomalous secret access pattern detected"
          description: "Secret access rate exceeds normal patterns"

      # Privilege escalation
      - alert: PrivilegeEscalationAttempt
        expr: privilege_escalation_attempts > 0
        for: 1m
        labels:
          severity: critical
          component: rbac
          compliance: "soc2-cc6.1"
        annotations:
          summary: "Privilege escalation attempt detected"
          description: "Privilege escalation attempt by {{ $labels.user }}"

      # Container security
      - alert: ContainerWithHighPrivileges
        expr: container_privileged == 1
        for: 5m
        labels:
          severity: warning
          component: container
          compliance: "pci-dss-2.2.5"
        annotations:
          summary: "Container running with privileged mode"
          description: "Container {{ $labels.container }} in pod {{ $labels.pod }} is running privileged"

      # Network policy violations
      - alert: NetworkPolicyViolation
        expr: network_policy_violations_total > 0
        for: 1m
        labels:
          severity: warning
          component: network
          compliance: "pci-dss-1.3"
        annotations:
          summary: "Network policy violation detected"
          description: "Network policy violation: {{ $labels.violation_type }}"

---
# Grafana for visualization
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: claude-config
  labels:
    app.kubernetes.io/name: grafana
    security.candlefish.ai/component: visualization
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        security-zone: monitoring
    spec:
      serviceAccountName: grafana-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin
              key: password
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "false"
        - name: GF_AUTH_BASIC_ENABLED
          value: "true"
        - name: GF_AUTH_DISABLE_LOGIN_FORM
          value: "false"
        - name: GF_SECURITY_COOKIE_SECURE
          value: "true"
        - name: GF_SECURITY_STRICT_TRANSPORT_SECURITY
          value: "true"
        - name: GF_SECURITY_CONTENT_SECURITY_POLICY
          value: "true"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards

---
# Alert Manager for notifications
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: claude-config
  labels:
    app.kubernetes.io/name: alertmanager
    security.candlefish.ai/component: alerting
spec:
  replicas: 2
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
        security-zone: monitoring
    spec:
      serviceAccountName: alertmanager-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.26.0
        imagePullPolicy: Always
        args:
        - --config.file=/etc/alertmanager/config.yml
        - --storage.path=/alertmanager
        - --cluster.advertise-address=$(POD_IP):9094
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 9093
          name: http
        - containerPort: 9094
          name: cluster
        volumeMounts:
        - name: alertmanager-config
          mountPath: /etc/alertmanager
        - name: alertmanager-storage
          mountPath: /alertmanager
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      volumes:
      - name: alertmanager-config
        secret:
          secretName: alertmanager-config
      - name: alertmanager-storage
        emptyDir: {}

---
# RBAC for monitoring components
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluent-bit-sa
  namespace: claude-config

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: claude-config

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-sa
  namespace: claude-config

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alertmanager-sa
  namespace: claude-config

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluent-bit-role
rules:
- apiGroups: [""]
  resources: ["namespaces", "pods", "nodes"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluent-bit-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: fluent-bit-role
subjects:
- kind: ServiceAccount
  name: fluent-bit-sa
  namespace: claude-config

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-role
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-role
subjects:
- kind: ServiceAccount
  name: prometheus-sa
  namespace: claude-config