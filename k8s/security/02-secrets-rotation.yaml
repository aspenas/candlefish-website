---
# Secrets Rotation Automation System
# Implements automatic rotation for all sensitive credentials
# Compliant with PCI DSS 8.5.1, HIPAA ยง164.308(a)(5)

apiVersion: v1
kind: ConfigMap
metadata:
  name: secrets-rotation-config
  namespace: claude-config
  labels:
    app.kubernetes.io/name: secrets-rotation
    app.kubernetes.io/component: security
    compliance: "pci-dss-8.5.1,hipaa-164.308"
data:
  rotation-policy.yaml: |
    policies:
      jwt-secrets:
        rotation_interval: 7d
        grace_period: 24h
        type: jwt
        algorithm: RS256
        key_size: 4096
      api-keys:
        rotation_interval: 30d
        grace_period: 48h
        type: api-key
        length: 64
      database-passwords:
        rotation_interval: 90d
        grace_period: 72h
        type: password
        complexity: high
      encryption-keys:
        rotation_interval: 180d
        grace_period: 7d
        type: aes
        key_size: 256
      tls-certificates:
        rotation_interval: 89d  # Before 90-day expiry
        grace_period: 7d
        type: x509
        key_size: 4096

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: jwt-secret-rotation
  namespace: claude-config
  labels:
    app.kubernetes.io/name: secrets-rotation
    app.kubernetes.io/component: jwt-rotation
    security.candlefish.ai/critical: "true"
spec:
  schedule: "0 2 * * 0"  # Weekly at 2 AM Sunday
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: secrets-rotation
            component: jwt-rotation
            security-zone: security
        spec:
          serviceAccountName: secrets-rotation-sa
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 1000
            seccompProfile:
              type: RuntimeDefault
          containers:
          - name: jwt-rotator
            image: candlefish/secrets-rotator:v1.0.0
            imagePullPolicy: Always
            command: ["/bin/sh", "-c"]
            args:
            - |
              #!/bin/sh
              set -e
              
              # Generate new JWT signing keys
              echo "Generating new JWT key pair..."
              openssl genrsa -out /tmp/jwt-private.pem 4096
              openssl rsa -in /tmp/jwt-private.pem -pubout -out /tmp/jwt-public.pem
              
              # Generate new kid (key ID)
              KID=$(uuidgen | tr '[:upper:]' '[:lower:]')
              TIMESTAMP=$(date -u +"%Y%m%d%H%M%S")
              
              # Create JWKS format
              JWKS=$(cat <<EOF
              {
                "keys": [
                  {
                    "kid": "$KID",
                    "kty": "RSA",
                    "alg": "RS256",
                    "use": "sig",
                    "n": "$(openssl rsa -in /tmp/jwt-private.pem -pubout -outform DER | base64 | tr -d '\n' | tr '+/' '-_' | tr -d '=')",
                    "e": "AQAB"
                  }
                ]
              }
              EOF
              )
              
              # Store in AWS Secrets Manager with versioning
              aws secretsmanager put-secret-value \
                --secret-id "claude-config/jwt-signing-key" \
                --secret-string "{\"private_key\":\"$(cat /tmp/jwt-private.pem | base64 -w0)\",\"public_key\":\"$(cat /tmp/jwt-public.pem | base64 -w0)\",\"kid\":\"$KID\",\"created_at\":\"$TIMESTAMP\"}" \
                --version-stage "AWSPENDING"
              
              # Update Kubernetes secret
              kubectl create secret generic jwt-signing-key-new \
                --from-file=private-key=/tmp/jwt-private.pem \
                --from-file=public-key=/tmp/jwt-public.pem \
                --from-literal=kid=$KID \
                --namespace=claude-config \
                --dry-run=client -o yaml | kubectl apply -f -
              
              # Trigger rolling update
              kubectl set env deployment/auth-service \
                JWT_KEY_ROTATION=$TIMESTAMP \
                -n claude-config
              
              # Clean up
              shred -vfz /tmp/jwt-*.pem
              
              echo "JWT key rotation completed successfully"
            env:
            - name: AWS_REGION
              value: us-east-1
            - name: AWS_DEFAULT_REGION
              value: us-east-1
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 500m
                memory: 256Mi
            volumeMounts:
            - name: tmp
              mountPath: /tmp
          volumes:
          - name: tmp
            emptyDir: {}
          restartPolicy: OnFailure

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: api-key-rotation
  namespace: claude-config
  labels:
    app.kubernetes.io/name: secrets-rotation
    app.kubernetes.io/component: api-key-rotation
spec:
  schedule: "0 3 1 * *"  # Monthly on the 1st at 3 AM
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: secrets-rotation
            component: api-key-rotation
            security-zone: security
        spec:
          serviceAccountName: secrets-rotation-sa
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
          containers:
          - name: api-key-rotator
            image: candlefish/secrets-rotator:v1.0.0
            imagePullPolicy: Always
            command: ["/bin/sh", "-c"]
            args:
            - |
              #!/bin/sh
              set -e
              
              # Generate new API keys
              generate_api_key() {
                openssl rand -hex 32
              }
              
              # Rotate each service's API key
              SERVICES="gateway-service auth-service config-service monitoring-service"
              
              for SERVICE in $SERVICES; do
                echo "Rotating API key for $SERVICE..."
                NEW_KEY=$(generate_api_key)
                KEY_HASH=$(echo -n "$NEW_KEY" | sha256sum | cut -d' ' -f1)
                
                # Store in Secrets Manager
                aws secretsmanager put-secret-value \
                  --secret-id "claude-config/$SERVICE/api-key" \
                  --secret-string "{\"key\":\"$NEW_KEY\",\"hash\":\"$KEY_HASH\",\"rotated_at\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" \
                  --version-stage "AWSPENDING"
                
                # Update Kubernetes secret
                kubectl patch secret "${SERVICE}-api-key" \
                  -n claude-config \
                  --type='json' \
                  -p="[{\"op\": \"replace\", \"path\": \"/data/api-key\", \"value\":\"$(echo -n $NEW_KEY | base64 -w0)\"}]"
                
                # Trigger graceful rotation
                kubectl annotate deployment "$SERVICE" \
                  rotation.timestamp="$(date -u +%Y%m%d%H%M%S)" \
                  -n claude-config --overwrite
              done
              
              echo "API key rotation completed"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
            resources:
              limits:
                cpu: 200m
                memory: 128Mi
          restartPolicy: OnFailure

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-password-rotation
  namespace: claude-config
  labels:
    app.kubernetes.io/name: secrets-rotation
    app.kubernetes.io/component: db-rotation
spec:
  schedule: "0 4 1 */3 *"  # Quarterly on the 1st at 4 AM
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: secrets-rotation
            component: db-rotation
            security-zone: security
        spec:
          serviceAccountName: secrets-rotation-sa
          containers:
          - name: db-password-rotator
            image: candlefish/secrets-rotator:v1.0.0
            imagePullPolicy: Always
            command: ["/bin/sh", "-c"]
            args:
            - |
              #!/bin/sh
              set -e
              
              # Generate strong password
              generate_password() {
                openssl rand -base64 32 | tr -d "=+/" | cut -c1-25
              }
              
              # Rotate PostgreSQL password
              echo "Rotating PostgreSQL password..."
              NEW_PASSWORD=$(generate_password)
              
              # Connect to database and update password
              export PGPASSWORD=$CURRENT_DB_PASSWORD
              psql -h $DB_HOST -U $DB_USER -d postgres -c "ALTER USER $DB_USER PASSWORD '$NEW_PASSWORD';"
              
              # Update AWS Secrets Manager
              aws secretsmanager put-secret-value \
                --secret-id "claude-config/database/credentials" \
                --secret-string "{\"username\":\"$DB_USER\",\"password\":\"$NEW_PASSWORD\",\"host\":\"$DB_HOST\",\"port\":5432,\"database\":\"claude_config\"}" \
                --version-stage "AWSPENDING"
              
              # Update Kubernetes secret
              kubectl patch secret database-credentials \
                -n claude-config \
                --type='json' \
                -p="[{\"op\": \"replace\", \"path\": \"/data/password\", \"value\":\"$(echo -n $NEW_PASSWORD | base64 -w0)\"}]"
              
              # Trigger rolling update for services using database
              kubectl rollout restart deployment/config-service -n claude-config
              kubectl rollout restart deployment/auth-service -n claude-config
              
              echo "Database password rotation completed"
            env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: host
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: username
            - name: CURRENT_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: password
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
          restartPolicy: OnFailure

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: tls-certificate-rotation
  namespace: claude-config
  labels:
    app.kubernetes.io/name: secrets-rotation
    app.kubernetes.io/component: tls-rotation
spec:
  schedule: "0 1 * * 0"  # Weekly check at 1 AM Sunday
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: secrets-rotation
            component: tls-rotation
            security-zone: security
        spec:
          serviceAccountName: secrets-rotation-sa
          containers:
          - name: cert-manager-trigger
            image: candlefish/secrets-rotator:v1.0.0
            imagePullPolicy: Always
            command: ["/bin/sh", "-c"]
            args:
            - |
              #!/bin/sh
              set -e
              
              # Check certificate expiry
              CERTS=$(kubectl get certificates -n claude-config -o json)
              
              echo "$CERTS" | jq -r '.items[] | select(.status.renewalTime != null) | .metadata.name' | while read CERT_NAME; do
                EXPIRY=$(kubectl get certificate $CERT_NAME -n claude-config -o jsonpath='{.status.notAfter}')
                EXPIRY_EPOCH=$(date -d "$EXPIRY" +%s)
                NOW_EPOCH=$(date +%s)
                DAYS_LEFT=$(( ($EXPIRY_EPOCH - $NOW_EPOCH) / 86400 ))
                
                if [ $DAYS_LEFT -lt 30 ]; then
                  echo "Certificate $CERT_NAME expires in $DAYS_LEFT days, triggering renewal..."
                  kubectl annotate certificate $CERT_NAME \
                    cert-manager.io/issue-temporary-certificate="true" \
                    -n claude-config --overwrite
                fi
              done
              
              echo "TLS certificate check completed"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
          restartPolicy: OnFailure

---
# RBAC for secrets rotation
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secrets-rotation-sa
  namespace: claude-config
  labels:
    app.kubernetes.io/name: secrets-rotation
    app.kubernetes.io/component: rbac

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secrets-rotation-role
  namespace: claude-config
  labels:
    app.kubernetes.io/name: secrets-rotation
    app.kubernetes.io/component: rbac
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "patch", "update", "create"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "patch", "update"]
- apiGroups: ["apps"]
  resources: ["deployments/scale"]
  verbs: ["patch"]
- apiGroups: ["cert-manager.io"]
  resources: ["certificates"]
  verbs: ["get", "list", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secrets-rotation-rolebinding
  namespace: claude-config
  labels:
    app.kubernetes.io/name: secrets-rotation
    app.kubernetes.io/component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secrets-rotation-role
subjects:
- kind: ServiceAccount
  name: secrets-rotation-sa
  namespace: claude-config

---
# Secret rotation monitoring
apiVersion: v1
kind: Service
metadata:
  name: secrets-rotation-metrics
  namespace: claude-config
  labels:
    app.kubernetes.io/name: secrets-rotation
    app.kubernetes.io/component: monitoring
spec:
  selector:
    app: secrets-rotation
  ports:
  - name: metrics
    port: 9090
    targetPort: 9090