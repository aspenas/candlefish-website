apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: security-dashboard-api-hpa
  namespace: security-dashboard
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: security-dashboard-api
  minReplicas: 3
  maxReplicas: 50
  targetCPUUtilizationPercentage: 70
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: security-dashboard-graphql-hpa
  namespace: security-dashboard
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: security-dashboard-graphql
  minReplicas: 2
  maxReplicas: 30
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75
  - type: Object
    object:
      metric:
        name: graphql_query_complexity
      describedObject:
        apiVersion: v1
        kind: Service
        name: graphql-service
      target:
        type: AverageValue
        averageValue: "500"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
    scaleDown:
      stabilizationWindowSeconds: 180
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: performance-config
  namespace: security-dashboard
data:
  # Database connection pool settings
  db_max_open_conns: "100"
  db_max_idle_conns: "25"
  db_conn_max_lifetime: "1h"
  db_conn_max_idle_time: "10m"
  
  # Redis settings
  redis_pool_size: "50"
  redis_min_idle_conns: "10"
  redis_max_retries: "3"
  redis_dial_timeout: "5s"
  redis_read_timeout: "3s"
  redis_write_timeout: "3s"
  
  # API rate limiting
  api_rate_limit: "10000"
  api_rate_limit_window: "1m"
  api_burst_limit: "100"
  
  # Cache TTL settings
  cache_ttl_default: "5m"
  cache_ttl_user_data: "10m"
  cache_ttl_security_events: "30s"
  cache_ttl_static_content: "1h"
  
  # Worker settings
  worker_pool_size: "100"
  event_buffer_size: "10000"
  batch_size: "100"
  batch_flush_interval: "1s"

---
apiVersion: v1
kind: Service
metadata:
  name: security-dashboard-api
  namespace: security-dashboard
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "60"
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 443
    targetPort: 8443
    protocol: TCP
    name: https
  selector:
    app: security-dashboard-api

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: security-dashboard-api-pdb
  namespace: security-dashboard
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: security-dashboard-api

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: security-dashboard-quota
  namespace: security-dashboard
spec:
  hard:
    requests.cpu: "100"
    requests.memory: 200Gi
    limits.cpu: "200"
    limits.memory: 400Gi
    persistentvolumeclaims: "10"
    services.loadbalancers: "2"

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: security-dashboard-network-policy
  namespace: security-dashboard
spec:
  podSelector:
    matchLabels:
      app: security-dashboard
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: security-dashboard
    - podSelector:
        matchLabels:
          app: security-dashboard
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8443
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: security-dashboard
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 443   # HTTPS outbound